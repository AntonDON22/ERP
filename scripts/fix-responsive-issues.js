#!/usr/bin/env node

/**
 * üîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ü–†–û–ë–õ–ï–ú –ê–î–ê–ü–¢–ò–í–ù–û–°–¢–ò
 * 
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
 * –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —ç–∫—Ä–∞–Ω–æ–≤ –æ—Ç 320px
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
const FIXES = {
  // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  criticalFiles: [
    'client/src/components/Navigation.tsx',
    'client/src/components/DataTable.tsx',
    'client/src/pages/ProductsList.tsx',
    'client/src/pages/InventoryList.tsx',
    'client/src/pages/OrdersList.tsx'
  ],
  
  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
  patterns: [
    // –î–æ–±–∞–≤–∏—Ç—å overflow-x-auto –¥–ª—è div —Å –∫–ª–∞—Å—Å–æ–º flex –∏–ª–∏ grid
    {
      find: /(<div className="[^"]*)(flex|grid)([^"]*"[^>]*>)/g,
      replace: '$1$2$3',
      addOverflow: true
    },
    
    // –î–æ–±–∞–≤–∏—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã
    {
      find: /(className="[^"]*)\bp-(\d+)\b([^"]*")/g,
      replace: '$1p-$2 sm:p-$2 md:p-$2$3'
    },
    
    // –î–æ–±–∞–≤–∏—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Ç–µ–∫—Å—Ç–∞
    {
      find: /(className="[^"]*)\btext-(sm|base|lg|xl)\b([^"]*")/g,
      replace: '$1text-sm sm:text-$2$3'
    }
  ]
};

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

class ResponsivenessFixer {
  constructor() {
    this.fixedFiles = 0;
    this.totalFixes = 0;
  }

  /**
   * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –¥–æ–±–∞–≤–ª—è—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
   */
  fixFile(filePath) {
    try {
      const content = fs.readFileSync(filePath, 'utf8');
      let newContent = content;
      let fileFixed = false;
      let fixCount = 0;

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Navigation
      if (filePath.includes('Navigation.tsx')) {
        const navigationFixes = this.fixNavigation(newContent);
        newContent = navigationFixes.content;
        fixCount += navigationFixes.fixes;
        fileFixed = navigationFixes.fixes > 0;
      }

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è DataTable
      if (filePath.includes('DataTable.tsx')) {
        const tableFixes = this.fixDataTable(newContent);
        newContent = tableFixes.content;
        fixCount += tableFixes.fixes;
        fileFixed = tableFixes.fixes > 0;
      }

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü —Å–ø–∏—Å–∫–æ–≤
      if (filePath.includes('List.tsx') || filePath.includes('Lists.tsx')) {
        const listFixes = this.fixListPages(newContent);
        newContent = listFixes.content;
        fixCount += listFixes.fixes;
        fileFixed = listFixes.fixes > 0;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
      if (fileFixed) {
        fs.writeFileSync(filePath, newContent, 'utf8');
        this.fixedFiles++;
        this.totalFixes += fixCount;
        
        console.log(`${colors.green}‚úì${colors.reset} ${path.relative(process.cwd(), filePath)} - ${colors.cyan}${fixCount} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π${colors.reset}`);
      }

      return { fixed: fileFixed, fixes: fixCount };

    } catch (error) {
      console.error(`${colors.red}–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ ${filePath}:${colors.reset}`, error.message);
      return { fixed: false, fixes: 0 };
    }
  }

  /**
   * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è Navigation
   */
  fixNavigation(content) {
    let newContent = content;
    let fixes = 0;

    // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    if (!content.includes('MenuIcon') && !content.includes('mobile')) {
      // –ò—â–µ–º –∏–º–ø–æ—Ä—Ç—ã lucide-react
      const lucideImport = content.match(/import\s*{([^}]+)}\s*from\s*["']lucide-react["']/);
      if (lucideImport) {
        const icons = lucideImport[1];
        if (!icons.includes('Menu')) {
          newContent = newContent.replace(
            /from\s*["']lucide-react["']/,
            'from "lucide-react"'
          ).replace(
            lucideImport[0],
            `import { ${icons.trim()}, Menu } from "lucide-react"`
          );
          fixes++;
        }
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      newContent = newContent.replace(
        /(<nav[^>]*className="[^"]*)(hidden\s+md:flex)?([^"]*")/g,
        '$1hidden md:flex$3'
      );
      fixes++;
    }

    return { content: newContent, fixes };
  }

  /**
   * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è DataTable
   */
  fixDataTable(content) {
    let newContent = content;
    let fixes = 0;

    // –î–æ–±–∞–≤–ª—è–µ–º overflow-x-auto –∫ —Ç–∞–±–ª–∏—Ü–∞–º
    newContent = newContent.replace(
      /(<div[^>]*className="[^"]*)(table-container|table-wrapper)?([^"]*"[^>]*>[\s\S]*?<table)/g,
      (match, prefix, existing, suffix, table) => {
        if (!match.includes('overflow-x-auto')) {
          fixes++;
          return `${prefix}overflow-x-auto ${existing || ''}${suffix}${table}`;
        }
        return match;
      }
    );

    // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∫ –∫–Ω–æ–ø–∫–∞–º –¥–µ–π—Å—Ç–≤–∏–π
    newContent = newContent.replace(
      /(<Button[^>]*className="[^"]*)(text-\w+)?([^"]*")/g,
      (match, prefix, textSize, suffix) => {
        if (!match.includes('sm:')) {
          fixes++;
          return `${prefix}text-xs sm:text-sm${suffix}`;
        }
        return match;
      }
    );

    return { content: newContent, fixes };
  }

  /**
   * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü —Å–ø–∏—Å–∫–æ–≤
   */
  fixListPages(content) {
    let newContent = content;
    let fixes = 0;

    // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º
    newContent = newContent.replace(
      /(<div[^>]*className="[^"]*)(max-w-\w+\s+mx-auto)?([^"]*px-\d+)([^"]*")/g,
      (match, prefix, maxWidth, padding, suffix) => {
        if (!padding.includes('sm:px')) {
          fixes++;
          return `${prefix}${maxWidth || ''}px-2 sm:px-4 lg:px-8${suffix}`;
        }
        return match;
      }
    );

    // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    newContent = newContent.replace(
      /(<h1[^>]*className="[^"]*)(text-\w+)?([^"]*")/g,
      (match, prefix, textSize, suffix) => {
        if (!match.includes('sm:text')) {
          fixes++;
          return `${prefix}text-xl sm:text-2xl lg:text-3xl${suffix}`;
        }
        return match;
      }
    );

    // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ gap –¥–ª—è flex –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    newContent = newContent.replace(
      /(<div[^>]*className="[^"]*flex[^"]*)(gap-\d+)?([^"]*")/g,
      (match, prefix, gap, suffix) => {
        if (!gap && !match.includes('sm:gap')) {
          fixes++;
          return `${prefix}gap-2 sm:gap-4${suffix}`;
        }
        return match;
      }
    );

    return { content: newContent, fixes };
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
   */
  run() {
    console.log(`${colors.bright}${colors.cyan}üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏${colors.reset}\n`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    const existingFiles = FIXES.criticalFiles.filter(file => 
      fs.existsSync(path.join(process.cwd(), file))
    );

    if (existingFiles.length === 0) {
      console.log(`${colors.yellow}‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã${colors.reset}`);
      return 0;
    }

    console.log(`${colors.bright}–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ${existingFiles.length} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤...${colors.reset}\n`);

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    existingFiles.forEach(file => {
      const fullPath = path.join(process.cwd(), file);
      this.fixFile(fullPath);
    });

    // –û—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    console.log(`\n${colors.bright}üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:${colors.reset}`);
    console.log(`   –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${colors.green}${this.fixedFiles}${colors.reset}`);
    console.log(`   –í—Å–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: ${colors.cyan}${this.totalFixes}${colors.reset}`);

    if (this.fixedFiles > 0) {
      console.log(`\n${colors.bright}${colors.green}‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!${colors.reset}`);
      console.log(`${colors.bright}üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞—É–¥–∏—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏${colors.reset}`);
    } else {
      console.log(`\n${colors.yellow}‚ÑπÔ∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è${colors.reset}`);
    }

    return this.fixedFiles > 0 ? 0 : 1;
  }
}

// –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
const fixer = new ResponsivenessFixer();
const exitCode = fixer.run();
process.exit(exitCode);