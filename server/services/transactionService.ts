import { db } from "../db";
import {
  documents,
  documentItems,
  inventory,
  reserves,
  orders,
  orderItems as orderItemsTable,
} from "../../shared/schema";
import { eq, sql } from "drizzle-orm";
import type { InsertDocument, CreateDocumentItem } from "../../shared/schema";
import { getMoscowTime } from "../../shared/timeUtils";
import { cacheService } from "./cacheService";
import { apiLogger } from "../../shared/logger";

export class TransactionService {
  // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –ø–µ—Ä–µ—Å—á–µ—Ç–æ–º –æ—Å—Ç–∞—Ç–∫–æ–≤
  async createDocumentWithInventory(document: InsertDocument, items: CreateDocumentItem[]) {
    return await db.transaction(async (tx) => {
      console.log("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞");

      // 1. –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
      const [createdDocument] = await tx.insert(documents).values(document).returning();

      // 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
      const today = new Date().toLocaleDateString("ru-RU", {
        day: "2-digit",
        month: "2-digit",
      });

      const todayStart = new Date();
      todayStart.setHours(0, 0, 0, 0);
      const todayEnd = new Date();
      todayEnd.setHours(23, 59, 59, 999);

      const todayDocuments = await tx
        .select()
        .from(documents)
        .where(
          sql`${documents.type} = ${createdDocument.type} AND ${documents.createdAt} >= ${todayStart.toISOString()} AND ${documents.createdAt} <= ${todayEnd.toISOString()}`
        );

      const dayNumber = todayDocuments.length;
      const name = `${createdDocument.type} ${today}-${dayNumber}`;

      const [updatedDocument] = await tx
        .update(documents)
        .set({ name })
        .where(eq(documents.id, createdDocument.id))
        .returning();

      // 3. –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
      for (const item of items) {
        await tx.insert(documentItems).values({
          productId: item.productId,
          quantity: item.quantity.toString(),
          price: item.price ?? "0",
          documentId: createdDocument.id,
        });

        // 4. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ
        await this.processInventoryMovement(tx, {
          productId: item.productId,
          quantity: item.quantity.toString(),
          price: item.price ?? "0",
          documentId: createdDocument.id,
          movementType: updatedDocument.type === "income" ? "IN" : "OUT",
          warehouseId: updatedDocument.warehouseId || undefined,
        });
      }

      console.log("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");

      // –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–µ—à–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
      await cacheService.invalidatePattern("inventory:*");
      apiLogger.info("Inventory cache invalidated after document creation", {
        documentId: updatedDocument.id,
      });

      return updatedDocument;
    });
  }

  // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –ø–µ—Ä–µ—Å—á–µ—Ç–æ–º –æ—Å—Ç–∞—Ç–∫–æ–≤
  async updateDocumentWithInventory(
    documentId: number,
    updatedDocument: Partial<InsertDocument>,
    newItems?: CreateDocumentItem[]
  ) {
    return await db.transaction(async (tx) => {
      console.log(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${documentId}`);

      // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç
      const [currentDocument] = await tx
        .select()
        .from(documents)
        .where(eq(documents.id, documentId));

      if (!currentDocument) {
        throw new Error(`–î–æ–∫—É–º–µ–Ω—Ç —Å ID ${documentId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

      // 2. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ —Å–∫–ª–∞–¥—É –¥–ª—è —ç—Ç–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
      await tx.delete(inventory).where(eq(inventory.documentId, documentId));

      // 3. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
      await tx.delete(documentItems).where(eq(documentItems.documentId, documentId));

      // 4. –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const documentUpdateData = {
        ...updatedDocument,
        updatedAt: getMoscowTime(),
      };
      console.log('üîß TransactionService - documentUpdateData:', documentUpdateData);
      
      const [document] = await tx
        .update(documents)
        .set(documentUpdateData)
        .where(eq(documents.id, documentId))
        .returning();

      // 5. –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏, —Å–æ–∑–¥–∞–µ–º –∏—Ö
      if (newItems && newItems.length > 0) {
        for (const item of newItems) {
          await tx.insert(documentItems).values({
            productId: item.productId,
            quantity: item.quantity.toString(),
            price: "0", // –¶–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–∑–∏—Ü–∏–π –±–µ–∑ —Ü–µ–Ω—ã
            documentId: documentId,
          });

          // 6. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ —Å–∫–ª–∞–¥—É
          await this.processInventoryMovement(tx, {
            productId: item.productId,
            quantity: item.quantity.toString(),
            price: "0", // –¶–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏–π –±–µ–∑ —Ü–µ–Ω—ã
            documentId: documentId,
            movementType: document.type === "income" ? "IN" : "OUT",
            warehouseId: document.warehouseId || undefined,
          });
        }
      }

      console.log("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");

      // –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–µ—à–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
      await cacheService.invalidatePattern("inventory:*");
      apiLogger.info("Inventory cache invalidated after document update", { documentId });

      return document;
    });
  }

  // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π –æ—Å—Ç–∞—Ç–∫–æ–≤
  async deleteDocumentWithInventory(documentId: number) {
    return await db.transaction(async (tx) => {
      console.log(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${documentId}`);

      // 1. –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ inventory
      const inventoryResult = await tx
        .delete(inventory)
        .where(eq(inventory.documentId, documentId));
      console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ ${inventoryResult.rowCount ?? 0} –∑–∞–ø–∏—Å–µ–π inventory`);

      // 2. –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ document_items
      const itemsResult = await tx
        .delete(documentItems)
        .where(eq(documentItems.documentId, documentId));
      console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ ${itemsResult.rowCount ?? 0} –ø–æ–∑–∏—Ü–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–∞`);

      // 3. –£–¥–∞–ª—è–µ–º —Å–∞–º –¥–æ–∫—É–º–µ–Ω—Ç
      const documentResult = await tx.delete(documents).where(eq(documents.id, documentId));

      const success = (documentResult.rowCount ?? 0) > 0;
      console.log("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");

      // –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–µ—à–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
      if (success) {
        await cacheService.invalidatePattern("inventory:*");
        apiLogger.info("Inventory cache invalidated after document deletion", { documentId });
      }

      return success;
    });
  }

  // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤ —Å —Ä–µ–∑–µ—Ä–≤–∞–º–∏
  async processOrderWithReserves(orderData: any, items: any[], isReserved: boolean) {
    return await db.transaction(async (tx) => {
      console.log("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å —Ä–µ–∑–µ—Ä–≤–∞–º–∏");

      // 1. –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
      const [createdOrder] = await tx.insert(orders).values(orderData).returning();

      let totalAmount = 0;

      // 2. –°–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
      for (const item of items) {
        await tx.insert(orderItemsTable).values({
          ...item,
          orderId: createdOrder.id,
        });

        totalAmount += parseFloat(item.quantity) * parseFloat(item.price);

        // 3. –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ—Ç—Å—è, —Å–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤—ã
        if (isReserved) {
          await tx.insert(reserves).values({
            orderId: createdOrder.id,
            productId: item.productId,
            quantity: item.quantity,
            warehouseId: orderData.warehouseId,
            createdAt: getMoscowTime(),
          });
          console.log(`üì¶ –°–æ–∑–¥–∞–Ω —Ä–µ–∑–µ—Ä–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${createdOrder.id}, —Ç–æ–≤–∞—Ä ${item.productId}`);
        }
      }

      // 4. –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º–æ–π –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º
      const today = new Date().toLocaleDateString("ru-RU", {
        day: "2-digit",
        month: "2-digit",
      });

      const todayOrders = await tx
        .select()
        .from(orders)
        .where(sql`DATE(${orders.createdAt}) = CURRENT_DATE`);

      const dayNumber = todayOrders.length;
      const name = `–ó–∞–∫–∞–∑ ${today}-${dayNumber}`;

      const [updatedOrder] = await tx
        .update(orders)
        .set({
          name,
          totalAmount: totalAmount.toFixed(2),
          isReserved: isReserved,
        })
        .where(eq(orders.id, createdOrder.id))
        .returning();

      console.log("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");

      // –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–µ—à–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –µ—Å–ª–∏ —Å–æ–∑–¥–∞–≤–∞–ª–∏—Å—å —Ä–µ–∑–µ—Ä–≤—ã
      if (isReserved) {
        await cacheService.invalidatePattern("inventory:*");
        apiLogger.info("Inventory cache invalidated after order creation with reserves", {
          orderId: updatedOrder.id,
        });
      }

      return updatedOrder;
    });
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (–≤–Ω—É—Ç—Ä–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)
  private async processInventoryMovement(
    tx: any,
    movement: {
      productId: number;
      quantity: string;
      price: string;
      documentId: number;
      movementType: "IN" | "OUT";
      warehouseId?: number;
    }
  ) {
    if (movement.movementType === "IN") {
      // –ü—Ä–∏—Ö–æ–¥ - –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
      await tx.insert(inventory).values({
        productId: movement.productId,
        quantity: movement.quantity,
        price: movement.price,
        movementType: "IN",
        documentId: movement.documentId,
        createdAt: getMoscowTime(),
      });
    } else {
      // –†–∞—Å—Ö–æ–¥ - –∏—Å–ø–æ–ª—å–∑—É–µ–º FIFO –ª–æ–≥–∏–∫—É
      await this.processWriteoffFIFO(
        tx,
        movement.productId,
        Number(movement.quantity),
        movement.price,
        movement.documentId
      );
    }
  }

  // FIFO –ª–æ–≥–∏–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤–Ω—É—Ç—Ä–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)
  private async processWriteoffFIFO(
    tx: any,
    productId: number,
    quantityToWriteoff: number,
    writeoffPrice: string,
    documentId: number
  ) {
    console.log(`üîÑ FIFO-—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${productId}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${quantityToWriteoff}`);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–∏—Ö–æ–¥—ã —Ç–æ–≤–∞—Ä–∞, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (FIFO)
    const stockMovements = await tx
      .select()
      .from(inventory)
      .where(
        sql`${inventory.productId} = ${productId} AND CAST(${inventory.quantity} AS DECIMAL) > 0`
      )
      .orderBy(sql`${inventory.createdAt} ASC`);

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${stockMovements.length} –ø—Ä–∏—Ö–æ–¥–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${productId}`);

    let remainingToWriteoff = quantityToWriteoff;
    const writeoffEntries = [];

    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø—Ä–∏—Ö–æ–¥–∞–º –∏ —Å–ø–∏—Å—ã–≤–∞–µ–º FIFO
    for (const stockItem of stockMovements) {
      if (remainingToWriteoff <= 0) break;

      const availableQuantity = Number(stockItem.quantity);
      const quantityToTakeFromThisBatch = Math.min(remainingToWriteoff, availableQuantity);

      if (quantityToTakeFromThisBatch > 0) {
        writeoffEntries.push({
          productId: productId,
          quantity: `-${quantityToTakeFromThisBatch}`,
          price: stockItem.price,
          movementType: "OUT" as const,
          documentId: documentId,
          createdAt: getMoscowTime(),
        });

        remainingToWriteoff -= quantityToTakeFromThisBatch;
        console.log(`üì§ –°–ø–∏—Å–∞–Ω–æ ${quantityToTakeFromThisBatch} –∏–∑ –ø–∞—Ä—Ç–∏–∏ ${stockItem.id}`);
      }
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º batch insert –¥–ª—è –≤—Å–µ—Ö —Å–ø–∏—Å–∞–Ω–∏–π
    if (writeoffEntries.length > 0) {
      await tx.insert(inventory).values(writeoffEntries);
    }

    // –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ—Å–ø–∏—Å–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã - —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Å–ø–∏—Å–∞–Ω–∏–∏ –≤ –º–∏–Ω—É—Å
    if (remainingToWriteoff > 0) {
      console.log(`‚ö†Ô∏è –°–ø–∏—Å–∞–Ω–∏–µ –≤ –º–∏–Ω—É—Å: ${remainingToWriteoff} –µ–¥–∏–Ω–∏—Ü`);

      await tx.insert(inventory).values({
        productId: productId,
        quantity: `-${remainingToWriteoff}`,
        price: writeoffPrice,
        movementType: "OUT",
        documentId: documentId,
        createdAt: getMoscowTime(),
      });
    }

    console.log("‚úÖ FIFO-—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–æ–≤ –∑–∞–∫–∞–∑–∞
  async removeReservesForOrder(orderId: number): Promise<void> {
    await db.delete(reserves).where(eq(reserves.orderId, orderId));
    apiLogger.info("Reserves removed for order", { orderId });
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –∑–∞–∫–∞–∑–∞
  async createReservesForOrder(orderId: number, warehouseId: number): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
      const orderItemsList = await db
        .select()
        .from(orderItemsTable)
        .where(eq(orderItemsTable.orderId, orderId));

      if (orderItemsList.length === 0) {
        apiLogger.warn("No order items found for creating reserves", { orderId });
        return;
      }

      // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤—ã –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
      for (const orderItem of orderItemsList) {
        await db.insert(reserves).values({
          orderId,
          productId: orderItem.productId,
          warehouseId,
          quantity: orderItem.quantity,
          createdAt: getMoscowTime(),
        });
      }

      apiLogger.info("Reserves created for all order items", {
        orderId,
        warehouseId,
        itemsCount: orderItemsList.length,
      });
    } catch (error) {
      apiLogger.error("Failed to create reserves for order", {
        orderId,
        warehouseId,
        error: error instanceof Error ? error.message : String(error),
      });
      throw error;
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–∞ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
  async createReserveForItem(orderId: number, item: any, warehouseId: number): Promise<void> {
    await db.insert(reserves).values({
      orderId,
      productId: item.productId,
      warehouseId,
      quantity: item.quantity,
      createdAt: getMoscowTime(),
    });
    apiLogger.info("Reserve created for order item", {
      orderId,
      productId: item.productId,
      quantity: item.quantity,
    });
  }
}

export const transactionService = new TransactionService();
