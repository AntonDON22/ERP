/**
 * –ê–≥—Ä–µ–≥–∞—Ç–æ—Ä –æ—à–∏–±–æ–∫ –¥–ª—è —Å–±–æ—Ä–∞ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */

export interface TestError {
  step: string;
  message: string;
  details?: any;
  timestamp: Date;
}

export class ErrorAggregator {
  private errors: TestError[] = [];
  private warnings: TestError[] = [];

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä
   */
  addError(step: string, message: string, details?: any): void {
    this.errors.push({
      step,
      message,
      details,
      timestamp: new Date()
    });
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä
   */
  addWarning(step: string, message: string, details?: any): void {
    this.warnings.push({
      step,
      message,
      details,
      timestamp: new Date()
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫
   */
  hasErrors(): boolean {
    return this.errors.length > 0;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
   */
  hasWarnings(): boolean {
    return this.warnings.length > 0;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
   */
  getErrorCount(): number {
    return this.errors.length;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
   */
  getWarningCount(): number {
    return this.warnings.length;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—à–∏–±–∫–∏
   */
  getErrors(): TestError[] {
    return [...this.errors];
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
   */
  getWarnings(): TestError[] {
    return [...this.warnings];
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –æ—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
   */
  clear(): void {
    this.errors = [];
    this.warnings = [];
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
   */
  getSummary(): string {
    if (!this.hasErrors() && !this.hasWarnings()) {
      return "‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã";
    }

    const parts: string[] = [];
    
    if (this.hasErrors()) {
      parts.push(`${this.getErrorCount()} –æ—à–∏–±–æ–∫`);
    }
    
    if (this.hasWarnings()) {
      parts.push(`${this.getWarningCount()} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π`);
    }

    return `‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${parts.join(', ')}`;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
   */
  getDetailedReport(): string {
    const lines = [];
    
    lines.push('\nüìä –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò');
    lines.push('='.repeat(50));
    
    if (this.hasErrors()) {
      lines.push('\n‚ùå –û–®–ò–ë–ö–ò:');
      this.errors.forEach((error, index) => {
        lines.push(`${index + 1}. [${error.step}] ${error.message}`);
        if (error.details) {
          lines.push(`   –î–µ—Ç–∞–ª–∏: ${JSON.stringify(error.details)}`);
        }
      });
    }
    
    if (this.hasWarnings()) {
      lines.push('\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:');
      this.warnings.forEach((warning, index) => {
        lines.push(`${index + 1}. [${warning.step}] ${warning.message}`);
        if (warning.details) {
          lines.push(`   –î–µ—Ç–∞–ª–∏: ${JSON.stringify(warning.details)}`);
        }
      });
    }
    
    if (!this.hasErrors() && !this.hasWarnings()) {
      lines.push('\n‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
    }
    
    lines.push('='.repeat(50));
    return lines.join('\n');
  }

  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–º –æ—à–∏–±–æ–∫
   */
  async safeExecute<T>(
    step: string, 
    operation: () => Promise<T>,
    continueOnError: boolean = true
  ): Promise<T | null> {
    try {
      return await operation();
    } catch (error) {
      this.addError(step, error instanceof Error ? error.message : String(error), error);
      
      if (!continueOnError) {
        throw error;
      }
      
      return null;
    }
  }

  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –≤ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä
   */
  check(step: string, condition: boolean, errorMessage: string, warningMessage?: string): boolean {
    if (!condition) {
      if (warningMessage) {
        this.addWarning(step, warningMessage);
      } else {
        this.addError(step, errorMessage);
      }
    }
    return condition;
  }
}