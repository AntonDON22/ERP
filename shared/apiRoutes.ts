/**
 * üîí –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–ê–Ø –ó–ê–©–ò–¢–ê: –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ API –º–∞—Ä—à—Ä—É—Ç—ã
 *
 * –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–†–ê–í–ò–õ–û: –í—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ API –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —ç—Ç–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã.
 * –ó–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º—ã—Ö —Å—Ç—Ä–æ–∫ —Ç–∏–ø–∞ "/api/products" –≤ –∫–æ–¥–µ.
 *
 * –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞:
 * 1. –î–æ–±–∞–≤–∏—Ç—å –µ–≥–æ —Å—é–¥–∞
 * 2. –û–±–Ω–æ–≤–∏—Ç—å replit.md —Å–µ–∫—Ü–∏—é "API Endpoints"
 * 3. –°–æ–∑–¥–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–µ—Å—Ç
 */

// –ë–∞–∑–æ–≤—ã–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏
export const API_ROUTES = {
  // –¢–æ–≤–∞—Ä—ã
  PRODUCTS: {
    LIST: "/api/products" as const,
    GET: (id: number) => `/api/products/${id}` as const,
    CREATE: "/api/products" as const,
    UPDATE: (id: number) => `/api/products/${id}` as const,
    DELETE: (id: number) => `/api/products/${id}` as const,
    DELETE_MULTIPLE: "/api/products/delete-multiple" as const,
  },

  // –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏
  SUPPLIERS: {
    LIST: "/api/suppliers" as const,
    GET: (id: number) => `/api/suppliers/${id}` as const,
    CREATE: "/api/suppliers" as const,
    UPDATE: (id: number) => `/api/suppliers/${id}` as const,
    DELETE: (id: number) => `/api/suppliers/${id}` as const,
    DELETE_MULTIPLE: "/api/suppliers/delete-multiple" as const,
    IMPORT: "/api/suppliers/import" as const,
  },

  // –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã
  CONTRACTORS: {
    LIST: "/api/contractors" as const,
    GET: (id: number) => `/api/contractors/${id}` as const,
    CREATE: "/api/contractors" as const,
    UPDATE: (id: number) => `/api/contractors/${id}` as const,
    DELETE: (id: number) => `/api/contractors/${id}` as const,
    DELETE_MULTIPLE: "/api/contractors/delete-multiple" as const,
    IMPORT: "/api/contractors/import" as const,
  },

  // –°–∫–ª–∞–¥—ã
  WAREHOUSES: {
    LIST: "/api/warehouses" as const,
    GET: (id: number) => `/api/warehouses/${id}` as const,
    CREATE: "/api/warehouses" as const,
    UPDATE: (id: number) => `/api/warehouses/${id}` as const,
    DELETE: (id: number) => `/api/warehouses/${id}` as const,
    DELETE_MULTIPLE: "/api/warehouses/delete-multiple" as const,
    IMPORT: "/api/warehouses/import" as const,
  },

  // –î–æ–∫—É–º–µ–Ω—Ç—ã (–í–ù–ò–ú–ê–ù–ò–ï: –¢–æ–ª—å–∫–æ /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è!)
  DOCUMENTS: {
    LIST: "/api/documents" as const,
    GET: (id: number) => `/api/documents/${id}` as const,
    CREATE: "/api/documents/create" as const, // –ö–†–ò–¢–ò–ß–ù–û: –¢–æ–ª—å–∫–æ —ç—Ç–æ—Ç endpoint!
    UPDATE: (id: number) => `/api/documents/${id}` as const,
    DELETE: (id: number) => `/api/documents/${id}` as const,
    DELETE_MULTIPLE: "/api/documents/delete-multiple" as const,
  },

  // –ó–∞–∫–∞–∑—ã (–í–ù–ò–ú–ê–ù–ò–ï: –¢–æ–ª—å–∫–æ /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è!)
  ORDERS: {
    LIST: "/api/orders" as const,
    GET: (id: number) => `/api/orders/${id}` as const,
    CREATE: "/api/orders/create" as const, // –ö–†–ò–¢–ò–ß–ù–û: –¢–æ–ª—å–∫–æ —ç—Ç–æ—Ç endpoint!
    UPDATE: (id: number) => `/api/orders/${id}` as const,
    DELETE: (id: number) => `/api/orders/${id}` as const,
    DELETE_MULTIPLE: "/api/orders/delete-multiple" as const,
    
    // –û—Ç–≥—Ä—É–∑–∫–∏ –ø–æ –∑–∞–∫–∞–∑–∞–º
    SHIPMENTS: {
      LIST: (orderId: number) => `/api/orders/${orderId}/shipments` as const,
      CREATE: (orderId: number) => `/api/orders/${orderId}/shipments` as const,
      GET: (orderId: number, shipmentId: number) => `/api/orders/${orderId}/shipments/${shipmentId}` as const,
      UPDATE: (orderId: number, shipmentId: number) => `/api/orders/${orderId}/shipments/${shipmentId}` as const,
      DELETE: (orderId: number, shipmentId: number) => `/api/orders/${orderId}/shipments/${shipmentId}` as const,
    },
  },

  // –û—Ç–≥—Ä—É–∑–∫–∏ (–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ –æ—Ç –∑–∞–∫–∞–∑–æ–≤)
  SHIPMENTS: {
    LIST: "/api/shipments" as const,
    CREATE: "/api/shipments" as const,
    GET: (id: number) => `/api/shipments/${id}` as const,
    UPDATE: (id: number) => `/api/shipments/${id}` as const,
    DELETE: (id: number) => `/api/shipments/${id}` as const,
    DELETE_MULTIPLE: "/api/shipments/delete-multiple" as const,
  },

  // –û—Å—Ç–∞—Ç–∫–∏
  INVENTORY: {
    LIST: "/api/inventory" as const,
    AVAILABILITY: "/api/inventory/availability" as const,
  },

  // –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
  SYSTEM: {
    LOGS: {
      LIST: "/api/logs" as const,
      MODULES: "/api/logs/modules" as const,
      CLEAR: "/api/logs" as const, // DELETE method
    },
    METRICS: "/api/metrics" as const,
    CHANGELOG: "/api/changelog" as const,
    CLIENT_ERRORS: "/api/client-errors" as const,
    CACHE: {
      WARMUP: "/api/cache/warmup" as const,
      STATUS: "/api/cache/status" as const,
    },
  },
} as const;

// –¢–∏–ø—ã –¥–ª—è TypeScript
export type ApiRoute = typeof API_ROUTES;
export type ProductRoutes = typeof API_ROUTES.PRODUCTS;
export type SupplierRoutes = typeof API_ROUTES.SUPPLIERS;
export type ContractorRoutes = typeof API_ROUTES.CONTRACTORS;
export type WarehouseRoutes = typeof API_ROUTES.WAREHOUSES;
export type DocumentRoutes = typeof API_ROUTES.DOCUMENTS;
export type OrderRoutes = typeof API_ROUTES.ORDERS;
export type InventoryRoutes = typeof API_ROUTES.INVENTORY;
export type SystemRoutes = typeof API_ROUTES.SYSTEM;

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ—Å—Ç–∞—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–π —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
 */
export function validateApiRoute(route: string): boolean {
  const allRoutes = getAllApiRoutes();
  return allRoutes.includes(route);
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ API –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
export function getAllApiRoutes(): string[] {
  const routes: string[] = [];

  // –ë–∞–∑–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  Object.values(API_ROUTES).forEach((section) => {
    if (typeof section === "string") {
      routes.push(section);
    } else {
      Object.values(section).forEach((route) => {
        if (typeof route === "string") {
          routes.push(route);
        }
      });
    }
  });

  return routes;
}

/**
 * –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ï –ü–†–ê–í–ò–õ–ê:
 *
 * ‚ùå –ù–ï –î–ï–õ–ê–¢–¨:
 * - useQuery({ queryKey: ["/api/products"] })
 * - fetch("/api/documents/receipt")
 * - apiRequest("/api/orders")
 *
 * ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û:
 * - useQuery({ queryKey: [API_ROUTES.PRODUCTS.LIST] })
 * - fetch(API_ROUTES.DOCUMENTS.CREATE)
 * - apiRequest(API_ROUTES.ORDERS.CREATE)
 */
