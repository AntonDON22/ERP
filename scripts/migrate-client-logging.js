#!/usr/bin/env node
/**
 * üîß –ú–ê–°–°–û–í–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø –ö–õ–ò–ï–ù–¢–°–ö–û–ì–û –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
 * 
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ console.* –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
 * —á–µ—Ä–µ–∑ client/src/lib/clientLogger.ts –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/**
 * –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
 */
const filesToMigrate = [
  'client/src/pages/CreateOrder.tsx',
  'client/src/pages/EditOrder.tsx',
  'client/src/pages/Dashboard.tsx'
];

/**
 * –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∑–∞–º–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */
const logReplacements = [
  // CreateOrder.tsx - —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
  {
    pattern: /console\.log\(`üöÄ Starting order submission #\$\{currentSubmissionId\}`\);/g,
    replacement: `logFormOperation("CreateOrder", \`Starting order submission #\${currentSubmissionId}\`);`
  },
  {
    pattern: /console\.log\(`‚ùå Blocked duplicate submission #\$\{currentSubmissionId\} - isSubmitting = true`\);/g,
    replacement: `logBlockDuplicate("CreateOrder", currentSubmissionId, "isSubmitting = true");`
  },
  {
    pattern: /console\.log\(`‚ùå Blocked duplicate submission #\$\{currentSubmissionId\} - mutation pending`\);/g,
    replacement: `logBlockDuplicate("CreateOrder", currentSubmissionId, "mutation pending");`
  },
  {
    pattern: /console\.log\(\s*`‚ùå Blocked duplicate submission #\$\{currentSubmissionId\} - form validation failed`.*?\);/gs,
    replacement: `logBlockDuplicate("CreateOrder", currentSubmissionId, "form validation failed");`
  },
  {
    pattern: /console\.log\(`‚úÖ Processing order submission #\$\{currentSubmissionId\}`\);/g,
    replacement: `logFormOperation("CreateOrder", \`Processing order submission #\${currentSubmissionId}\`);`
  },
  {
    pattern: /console\.log\(`üìÑ Creating new order`\);/g,
    replacement: `logFormOperation("CreateOrder", "Creating new order");`
  },
  {
    pattern: /console\.log\(`‚úÖ Submission #\$\{currentSubmissionId\} completed successfully`\);/g,
    replacement: `logOperationSuccess("CreateOrder", \`Submission #\${currentSubmissionId} completed\`);`
  },
  {
    pattern: /console\.log\(`‚ùå Submission #\$\{currentSubmissionId\} failed:`, error\);/g,
    replacement: `logOperationError("CreateOrder", \`Submission #\${currentSubmissionId}\`, error);`
  },
  {
    pattern: /console\.log\(`üîì Released submission lock for #\$\{currentSubmissionId\}`\);/g,
    replacement: `logFormOperation("CreateOrder", \`Released submission lock for #\${currentSubmissionId}\`);`
  },
  {
    pattern: /console\.log\("‚ùå Form validation failed:", errors\);/g,
    replacement: `logValidationError("CreateOrder", errors);`
  },

  // EditOrder.tsx - —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
  {
    pattern: /console\.log\("üîÑ EditOrder - –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞:", orderData\);/g,
    replacement: `logFormOperation("EditOrder", "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞", orderData);`
  },
  {
    pattern: /console\.log\("üì¶ EditOrder - items –∏–∑ –¥–∞–Ω–Ω—ã—Ö:", orderData\.items\);/g,
    replacement: `logFormOperation("EditOrder", "Items –∏–∑ –¥–∞–Ω–Ω—ã—Ö", orderData.items);`
  },
  {
    pattern: /console\.log\(`üöÄ Starting order update #\$\{currentSubmissionId\}`\);/g,
    replacement: `logFormOperation("EditOrder", \`Starting order update #\${currentSubmissionId}\`);`
  },
  {
    pattern: /console\.log\(`üìù Form errors:\`, form\.formState\.errors\);/g,
    replacement: `logValidationError("EditOrder", form.formState.errors);`
  },
  {
    pattern: /console\.log\(`üìù Form values:\`, data\);/g,
    replacement: `logFormOperation("EditOrder", "Form values", data);`
  },
  {
    pattern: /console\.log\(`‚ùå Blocked duplicate submission #\$\{currentSubmissionId\} - isSubmitting = true`\);/g,
    replacement: `logBlockDuplicate("EditOrder", currentSubmissionId, "isSubmitting = true");`
  },
  {
    pattern: /console\.log\(`‚ùå Blocked duplicate submission #\$\{currentSubmissionId\} - mutation pending`\);/g,
    replacement: `logBlockDuplicate("EditOrder", currentSubmissionId, "mutation pending");`
  },
  {
    pattern: /console\.log\(\s*`‚ùå Blocked duplicate submission #\$\{currentSubmissionId\} - form validation failed`.*?\);/gs,
    replacement: `logBlockDuplicate("EditOrder", currentSubmissionId, "form validation failed");`
  },
  {
    pattern: /console\.log\(`‚úÖ Processing order update #\$\{currentSubmissionId\}`\);/g,
    replacement: `logFormOperation("EditOrder", \`Processing order update #\${currentSubmissionId}\`);`
  },
  {
    pattern: /console\.log\(`üìÑ Updating order \$\{orderId\}`\);/g,
    replacement: `logFormOperation("EditOrder", \`Updating order \${orderId}\`);`
  },
  {
    pattern: /console\.log\(`‚úÖ Update #\$\{currentSubmissionId\} completed successfully`\);/g,
    replacement: `logOperationSuccess("EditOrder", \`Update #\${currentSubmissionId} completed\`);`
  },
  {
    pattern: /console\.log\(`‚ùå Update #\$\{currentSubmissionId\} failed:`, error\);/g,
    replacement: `logOperationError("EditOrder", \`Update #\${currentSubmissionId}\`, error);`
  },
  {
    pattern: /console\.log\(`üîì Released submission lock for #\$\{currentSubmissionId\}`\);/g,
    replacement: `logFormOperation("EditOrder", \`Released submission lock for #\${currentSubmissionId}\`);`
  },

  // Dashboard.tsx - –æ–±—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
  {
    pattern: /console\.error\("–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:", err\);/g,
    replacement: `logOperationError("Dashboard", "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞", err);`
  },

  // –û–±—â–∏–µ —É—Å–ª–æ–≤–Ω—ã–µ –±–ª–æ–∫–∏ - —É–±–∏—Ä–∞–µ–º —É—Å–ª–æ–≤–∏–µ –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  {
    pattern: /\/\/ ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£—Å–ª–æ–≤–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–º–µ—Å—Ç–æ console\.log\s*if \(import\.meta\.env\.DEV\) \{\s*(console\.[^}]+)\s*\}/gs,
    replacement: '$1'
  },
  {
    pattern: /\/\/ ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£—Å–ª–æ–≤–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–º–µ—Å—Ç–æ console\.(log|error|warn|info)\s*if \(import\.meta\.env\.DEV\) \{\s*(console\.[^}]+)\s*\}/gs,
    replacement: '$2'
  }
];

/**
 * –§—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
 */
function migrateFile(filePath) {
  const fullPath = path.join(__dirname, '..', filePath);
  
  if (!fs.existsSync(fullPath)) {
    console.warn(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    return false;
  }

  let content = fs.readFileSync(fullPath, 'utf8');
  let changesMade = 0;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –ª–æ–≥–≥–µ—Ä–∞
  const hasLoggerImport = content.includes('from "@/lib/clientLogger"');
  
  if (!hasLoggerImport) {
    console.log(`üì¶ –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –ª–æ–≥–≥–µ—Ä–∞ –≤ ${filePath}`);
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–º–ø–æ—Ä—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –Ω–µ–≥–æ
    const lastImportMatch = content.match(/import.*from.*["'];(\n|$)/);
    if (lastImportMatch) {
      const insertPosition = lastImportMatch.index + lastImportMatch[0].length;
      const loggerImport = `import { 
  logFormOperation, 
  logBlockDuplicate, 
  logOperationSuccess, 
  logOperationError, 
  logValidationError 
} from "@/lib/clientLogger";\n`;
      content = content.slice(0, insertPosition) + loggerImport + content.slice(insertPosition);
      changesMade++;
    }
  }

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–º–µ–Ω—ã
  logReplacements.forEach(({ pattern, replacement }) => {
    const matches = content.match(pattern);
    if (matches) {
      console.log(`üîÑ –ó–∞–º–µ–Ω–∞ –≤ ${filePath}: ${matches.length} –≤—Ö–æ–∂–¥–µ–Ω–∏–π`);
      content = content.replace(pattern, replacement);
      changesMade += matches.length;
    }
  });

  if (changesMade > 0) {
    fs.writeFileSync(fullPath, content, 'utf8');
    console.log(`‚úÖ –§–∞–π–ª ${filePath} –æ–±–Ω–æ–≤–ª–µ–Ω (${changesMade} –∏–∑–º–µ–Ω–µ–Ω–∏–π)`);
    return true;
  } else {
    console.log(`‚ÑπÔ∏è  –§–∞–π–ª ${filePath} –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π`);
    return false;
  }
}

/**
 * –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
 */
function runMigration() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –º–∞—Å—Å–æ–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...\n');
  
  let totalFiles = 0;
  let migratedFiles = 0;

  filesToMigrate.forEach(filePath => {
    totalFiles++;
    if (migrateFile(filePath)) {
      migratedFiles++;
    }
  });

  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏:`);
  console.log(`   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${totalFiles}`);
  console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${migratedFiles}`);
  console.log(`   –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${totalFiles - migratedFiles}`);
  
  if (migratedFiles > 0) {
    console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìù –í—Å–µ console.* –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ');
  } else {
    console.log('\n‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ');
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
runMigration();