import { db } from "../db";
import { sql } from "drizzle-orm";
import fs from "fs/promises";
import path from "path";
import { normalizeInventoryArray, type NormalizedInventoryItem } from "@shared/apiNormalizer";

export class MaterializedViewService {
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π
   */
  async initializeMaterializedViews(): Promise<void> {
    console.log("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π...");

    try {
      const sqlPath = path.join(__dirname, "../db/materialized-views.sql");
      const sqlScript = await fs.readFile(sqlPath, "utf-8");

      // –í—ã–ø–æ–ª–Ω—è–µ–º SQL —Å–∫—Ä–∏–ø—Ç –ø–æ —á–∞—Å—Ç—è–º
      const statements = sqlScript
        .split(";")
        .map((s) => s.trim())
        .filter((s) => s.length > 0 && !s.startsWith("--"));

      for (const statement of statements) {
        if (statement.trim()) {
          await db.execute(sql.raw(statement + ";"));
        }
      }

      console.log("‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π:", error);
      throw error;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π
   */
  async refreshAllViews(): Promise<void> {
    console.log("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π...");

    try {
      await db.execute(sql`SELECT refresh_materialized_views()`);
      console.log("‚úÖ –í—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π:", error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º API —Ñ–æ—Ä–º–∞—Ç–µ
   */
  async getInventorySummary(): Promise<NormalizedInventoryItem[]> {
    console.log("[MATERIALIZED] Starting getInventorySummary query...");
    const startTime = Date.now();

    try {
      const result = await db.execute(sql`
        SELECT 
          id,
          name,
          sku,
          quantity::text as total_quantity
        FROM inventory_summary
        ORDER BY name
      `);

      const duration = Date.now() - startTime;
      console.log(
        `[MATERIALIZED] getInventorySummary completed in ${duration}ms, returned ${result.rows.length} items`
      );

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
      const rawData = result.rows.map((row: any) => ({
        id: row.id as number,
        name: row.name as string,
        total_quantity: row.total_quantity as string,
      }));

      return normalizeInventoryArray(rawData);
    } catch (error) {
      console.error("[MATERIALIZED] Error in getInventorySummary:", error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ —Å–∫–ª–∞–¥–∞–º –∏–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
   */
  async getInventoryByWarehouse(warehouseId?: number): Promise<
    Array<{
      product_id: number;
      product_name: string;
      warehouse_id: number;
      warehouse_name: string;
      quantity: string;
      movement_count: number;
      last_movement_date: Date | null;
    }>
  > {
    console.log("[MATERIALIZED] Starting getInventoryByWarehouse query...");
    const startTime = Date.now();

    try {
      const whereClause = warehouseId ? sql`WHERE warehouse_id = ${warehouseId}` : sql``;

      const result = await db.execute(sql`
        SELECT 
          product_id,
          product_name,
          warehouse_id,
          warehouse_name,
          quantity::text,
          movement_count,
          last_movement_date
        FROM inventory_by_warehouse
        ${whereClause}
        ORDER BY product_name, warehouse_name
      `);

      const duration = Date.now() - startTime;
      console.log(
        `[MATERIALIZED] getInventoryByWarehouse completed in ${duration}ms, returned ${result.rows.length} items`
      );

      return result.rows as any;
    } catch (error) {
      console.error("[MATERIALIZED] Error in getInventoryByWarehouse:", error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º API —Ñ–æ—Ä–º–∞—Ç–µ
   */
  async getInventoryAvailability(): Promise<NormalizedInventoryItem[]> {
    console.log("[MATERIALIZED] Starting getInventoryAvailability query...");
    const startTime = Date.now();

    try {
      const result = await db.execute(sql`
        SELECT 
          id,
          name,
          quantity::text as total_quantity,
          reserved::text as reserved_quantity,
          available::text as available_quantity
        FROM inventory_availability
        ORDER BY name
      `);

      const duration = Date.now() - startTime;
      console.log(
        `[MATERIALIZED] getInventoryAvailability completed in ${duration}ms, returned ${result.rows.length} items`
      );

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
      const rawData = result.rows.map((row: any) => ({
        id: row.id as number,
        name: row.name as string,
        total_quantity: row.total_quantity as string,
        reserved_quantity: row.reserved_quantity as string,
        available_quantity: row.available_quantity as string,
      }));

      return normalizeInventoryArray(rawData);
    } catch (error) {
      console.error("[MATERIALIZED] Error in getInventoryAvailability:", error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π
   */
  async getViewsStatus(): Promise<
    Array<{
      view_name: string;
      size_bytes: number;
      last_refresh: Date | null;
      is_populated: boolean;
    }>
  > {
    try {
      const result = await db.execute(sql`
        SELECT 
          schemaname||'.'||matviewname as view_name,
          pg_total_relation_size(schemaname||'.'||matviewname) as size_bytes,
          ispopulated as is_populated
        FROM pg_matviews 
        WHERE matviewname IN ('inventory_summary', 'inventory_by_warehouse', 'inventory_availability')
      `);

      return result as any;
    } catch (error) {
      console.error("Error getting views status:", error);
      throw error;
    }
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
   */
  async refreshSpecificView(viewName: string): Promise<void> {
    console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è ${viewName}...`);

    try {
      await db.execute(sql.raw(`REFRESH MATERIALIZED VIEW CONCURRENTLY ${viewName}`));
      console.log(`‚úÖ –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ ${viewName} –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è ${viewName}:`, error);
      throw error;
    }
  }
}

export const materializedViewService = new MaterializedViewService();
