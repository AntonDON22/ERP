/**
 * üîß –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Å—Ö–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç—Ä–æ–∫
 * 
 * –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –∫–æ–≥–¥–∞ HTML —Ñ–æ—Ä–º—ã –ø–µ—Ä–µ–¥–∞—é—Ç —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏,
 * –∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ö–µ–º—ã –æ–∂–∏–¥–∞—é—Ç —á–∏—Å–ª–∞. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–∞
 * —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –æ–± –æ—à–∏–±–∫–∞—Ö –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
 */

import { z } from "zod";

/**
 * –ë–∞–∑–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π —Å –∞–≤—Ç–æ–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç—Ä–æ–∫
 * 
 * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏–ª–∏ —á–∏—Å–ª–æ, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ
 * –í—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–æ–Ω—è—Ç–Ω—É—é –æ—à–∏–±–∫—É –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
 */
const createNumberField = (fieldName: string = "–ü–æ–ª–µ") => {
  return z.union([z.string(), z.number()])
    .transform((val, ctx) => {
      // –ï—Å–ª–∏ —É–∂–µ —á–∏—Å–ª–æ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
      if (typeof val === 'number') {
        return val;
      }
      
      // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è –∏–ª–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã - –æ—à–∏–±–∫–∞
      if (typeof val === 'string' && val.trim() === '') {
        ctx.addIssue({
          code: z.ZodIssueCode.custom,
          message: `${fieldName} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º`,
        });
        return z.NEVER;
      }
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ
      const parsed = Number(val);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
      if (isNaN(parsed)) {
        ctx.addIssue({
          code: z.ZodIssueCode.custom,
          message: `${fieldName} –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º`,
        });
        return z.NEVER;
      }
      
      return parsed;
    });
};

/**
 * –°—Ö–µ–º–∞ –¥–ª—è –¥–µ–Ω–µ–∂–Ω—ã—Ö –ø–æ–ª–µ–π (—Ü–µ–Ω—ã, —Å—Ç–æ–∏–º–æ—Å—Ç–∏)
 * 
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ
 * –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–∑—É–º–Ω—ã–º –ø—Ä–µ–¥–µ–ª–æ–º
 */
export const zPrice = createNumberField("–¶–µ–Ω–∞")
  .refine((val) => val >= 0, "–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π")
  .refine((val) => val <= 999999999.99, "–¶–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è")
  .refine((val) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π (–º–∞–∫—Å–∏–º—É–º 2)
    const decimalPlaces = (val.toString().split('.')[1] || '').length;
    return decimalPlaces <= 2;
  }, "–¶–µ–Ω–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 2 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π");

/**
 * –°—Ö–µ–º–∞ –¥–ª—è –ø–æ–ª–µ–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (—Ç–æ–≤–∞—Ä—ã, –æ—Å—Ç–∞—Ç–∫–∏)
 * 
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ (–≤–∫–ª—é—á–∞—è 0)
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥—Ä–æ–±–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ 3 –∑–Ω–∞–∫–æ–≤
 */
export const zQuantity = createNumberField("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
  .refine((val) => val >= 0, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
  .refine((val) => val <= 999999, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ")
  .refine((val) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π (–º–∞–∫—Å–∏–º—É–º 3)
    const decimalPlaces = (val.toString().split('.')[1] || '').length;
    return decimalPlaces <= 3;
  }, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 3 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π");

/**
 * –°—Ö–µ–º–∞ –¥–ª—è —Ü–µ–ª—ã—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤ (–∑–∞–∫–∞–∑—ã, —à—Ç—É—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã)
 */
export const zQuantityInteger = createNumberField("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
  .refine((val) => val > 0, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è")
  .refine((val) => val <= 999999, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ")
  .refine((val) => Number.isInteger(val), "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º");

/**
 * –°—Ö–µ–º–∞ –¥–ª—è –ø–æ–ª–µ–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω—É–ª–µ–≤—ã–º
 * 
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Å—Ç–∞—Ç–∫–æ–≤, —Ä–µ–∑–µ—Ä–≤–æ–≤ –≥–¥–µ –Ω–æ–ª—å - –≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
 */
export const zQuantityNullable = createNumberField("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
  .refine((val) => val >= 0, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
  .refine((val) => val <= 999999, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ")
  .refine((val) => {
    const decimalPlaces = (val.toString().split('.')[1] || '').length;
    return decimalPlaces <= 3;
  }, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 3 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π");

/**
 * –°—Ö–µ–º–∞ –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã—Ö –ø–æ–ª–µ–π (—Å–∫–∏–¥–∫–∏, –Ω–∞—Ü–µ–Ω–∫–∏)
 * 
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–∞
 * –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç 0 –¥–æ 100 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
 */
export const zPercent = createNumberField("–ü—Ä–æ—Ü–µ–Ω—Ç")
  .refine((val) => val >= 0, "–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
  .refine((val) => val <= 100, "–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 100")
  .refine((val) => {
    const decimalPlaces = (val.toString().split('.')[1] || '').length;
    return decimalPlaces <= 2;
  }, "–ü—Ä–æ—Ü–µ–Ω—Ç –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 2 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π");

/**
 * –°—Ö–µ–º–∞ –¥–ª—è ID –ø–æ–ª–µ–π
 * 
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ ID –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
 */
export const zId = createNumberField("ID")
  .refine((val) => val > 0, "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
  .refine((val) => Number.isInteger(val), "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")
  .refine((val) => val <= 2147483647, "ID —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π"); // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ INTEGER –≤ PostgreSQL

/**
 * –°—Ö–µ–º–∞ –¥–ª—è –≤–µ—Å–∞ —Ç–æ–≤–∞—Ä–æ–≤
 * 
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–∞
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥—Ä–æ–±–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è
 */
export const zWeight = createNumberField("–í–µ—Å")
  .refine((val) => val >= 0, "–í–µ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
  .refine((val) => val <= 999999, "–í–µ—Å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π")
  .refine((val) => {
    const decimalPlaces = (val.toString().split('.')[1] || '').length;
    return decimalPlaces <= 3;
  }, "–í–µ—Å –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 3 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π");

/**
 * –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ö–µ–º
 * 
 * –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–æ–≥–¥–∞ –ø–æ–ª–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ undefined
 */
export const zPriceOptional = zPrice.optional();
export const zQuantityOptional = zQuantity.optional();
export const zPercentOptional = zPercent.optional();
export const zWeightOptional = zWeight.optional();

/**
 * –°—Ö–µ–º—ã –¥–ª—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π —á–∏—Å–µ–ª (legacy –ø–æ–¥–¥–µ—Ä–∂–∫–∞)
 * 
 * –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —Å–ª—É—á–∞—è—Ö –∫–æ–≥–¥–∞ API –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å—Ç—Ä–æ–∫–∏
 * –Ω–æ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —á—Ç–æ –æ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞
 */
export const zPriceString = z.string()
  .refine((val) => val === "" || (!isNaN(Number(val)) && Number(val) >= 0), "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã")
  .refine((val) => val === "" || Number(val) <= 999999999.99, "–¶–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è");

export const zQuantityString = z.string()
  .refine((val) => val === "" || (!isNaN(Number(val)) && Number(val) >= 0), "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
  .refine((val) => val === "" || Number(val) <= 999999, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ");

export const zWeightString = z.string()
  .refine((val) => !val || (!isNaN(Number(val)) && Number(val) >= 0), "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Å–∞")
  .refine((val) => !val || Number(val) <= 999999, "–í–µ—Å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π");

export const zDimensionString = z.string()
  .refine((val) => !val || (!isNaN(Number(val)) && Number(val) >= 0), "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞")
  .refine((val) => !val || Number(val) <= 999999, "–†–∞–∑–º–µ—Ä —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π");

/**
 * –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
 */
export const parsePrice = (value: string | number): number => {
  const parsed = typeof value === 'number' ? value : Number(value);
  if (isNaN(parsed)) throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã');
  return parsed;
};

export const parseQuantity = (value: string | number): number => {
  const parsed = typeof value === 'number' ? value : Number(value);
  if (isNaN(parsed)) throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞');
  return parsed;
};

/**
 * –¢–∏–ø—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ TypeScript
 */
export type Price = z.infer<typeof zPrice>;
export type Quantity = z.infer<typeof zQuantity>;
export type Percent = z.infer<typeof zPercent>;
export type Weight = z.infer<typeof zWeight>;