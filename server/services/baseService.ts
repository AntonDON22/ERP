import { apiLogger } from "@shared/logger";
import { storage } from "../storage";
import { z } from "zod";

/**
 * üèóÔ∏è BaseService - —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–∞–∑–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è CRUD –æ–ø–µ—Ä–∞—Ü–∏–π
 * 
 * –£–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –æ–±—â—É—é –ª–æ–≥–∏–∫—É —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç type safety –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
 * 
 * @template T - –¢–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏ (Supplier, Contractor, Warehouse)
 * @template InsertT - –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è (InsertSupplier, etc.)
 * @template UpdateT - –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é Partial<InsertT>)
 */
export abstract class BaseService<T, InsertT, UpdateT = Partial<InsertT>> {
  protected abstract entityName: string;
  protected abstract pluralName: string;
  protected abstract storageMethodPrefix: string;
  
  // –°—Ö–µ–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö
  protected abstract insertSchema: z.ZodSchema<InsertT>;
  protected abstract updateSchema: z.ZodSchema<UpdateT>;

  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ storage –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Å OrderService
  protected storage = storage;

  /**
   * üìã –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
   */
  async getAll(): Promise<T[]> {
    try {
      const methodName = `get${this.pluralName}`;
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–∏–ø–∏–∑–∞—Ü–∏—è –≤–º–µ—Å—Ç–æ any —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º casting
      const result = await (storage as unknown as Record<string, () => Promise<T[]>>)[methodName]();
      
      apiLogger.info(`Retrieved all ${this.pluralName.toLowerCase()}`, {
        count: result?.length || 0,
        entity: this.entityName,
      });
      
      return result || [];
    } catch (error) {
      apiLogger.error(`Error getting all ${this.pluralName.toLowerCase()}`, {
        entity: this.entityName,
        error: error instanceof Error ? error.message : String(error),
      });
      throw error;
    }
  }

  /**
   * üîç –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–æ ID —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
   */
  async getById(id: number): Promise<T | undefined> {
    try {
      this.validateId(id);
      
      const methodName = `get${this.entityName}`;
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–∏–ø–∏–∑–∞—Ü–∏—è –≤–º–µ—Å—Ç–æ any –¥–ª—è getById —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º casting
      const result = await (storage as unknown as Record<string, (id: number) => Promise<T | undefined>>)[methodName](id);
      
      apiLogger.debug(`Retrieved ${this.entityName.toLowerCase()} by ID`, {
        id,
        found: !!result,
        entity: this.entityName,
      });
      
      return result;
    } catch (error) {
      apiLogger.error(`Error getting ${this.entityName.toLowerCase()} by ID`, {
        id,
        entity: this.entityName,
        error: error instanceof Error ? error.message : String(error),
      });
      throw error;
    }
  }

  /**
   * ‚úÖ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
   */
  async create(data: InsertT): Promise<T> {
    try {
      const validatedData = this.insertSchema.parse(data);
      
      const methodName = `create${this.entityName}`;
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–∏–ø–∏–∑–∞—Ü–∏—è –≤–º–µ—Å—Ç–æ any –¥–ª—è create —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º casting
      const result = await (storage as unknown as Record<string, (data: InsertT) => Promise<T>>)[methodName](validatedData);
      
      apiLogger.info(`Created new ${this.entityName.toLowerCase()}`, {
        id: (result as { id?: number })?.id,
        entity: this.entityName,
      });
      
      return result;
    } catch (error) {
      apiLogger.error(`Error creating ${this.entityName.toLowerCase()}`, {
        data,
        entity: this.entityName,
        error: error instanceof Error ? error.message : String(error),
      });
      throw error;
    }
  }

  /**
   * üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
   */
  async update(id: number, data: UpdateT): Promise<T | undefined> {
    try {
      this.validateId(id);
      const validatedData = this.updateSchema.parse(data);
      
      const methodName = `update${this.entityName}`;
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–∏–ø–∏–∑–∞—Ü–∏—è –≤–º–µ—Å—Ç–æ any –¥–ª—è update —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º casting
      const result = await (storage as unknown as Record<string, (id: number, data: UpdateT) => Promise<T | undefined>>)[methodName](id, validatedData);
      
      if (!result) {
        apiLogger.warn(`${this.entityName} not found for update`, {
          id,
          entity: this.entityName,
        });
        return undefined;
      }
      
      apiLogger.info(`Updated ${this.entityName.toLowerCase()}`, {
        id,
        entity: this.entityName,
      });
      
      return result;
    } catch (error) {
      apiLogger.error(`Error updating ${this.entityName.toLowerCase()}`, {
        id,
        data,
        entity: this.entityName,
        error: error instanceof Error ? error.message : String(error),
      });
      throw error;
    }
  }

  /**
   * üìä –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
   */
  async getCount(): Promise<number> {
    try {
      const allRecords = await this.getAll();
      return allRecords.length;
    } catch (error) {
      apiLogger.error(`Error getting ${this.entityName.toLowerCase()} count`, {
        entity: this.entityName,
        error: error instanceof Error ? error.message : String(error),
      });
      throw error;
    }
  }

  /**
   * üìÑ –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
   */
  async getAllPaginated(params: any): Promise<T[]> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ BaseService
      const allRecords = await this.getAll();

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
      const sortedRecords = this.sortRecords(
        allRecords,
        params.sort || 'id',
        params.order || 'asc'
      );

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é –≤ –ø–∞–º—è—Ç–∏
      const startIndex = params.offset || 0;
      const endIndex = startIndex + (params.limit || 20);
      const data = sortedRecords.slice(startIndex, endIndex);

      return data;
    } catch (error) {
      apiLogger.error(`Error getting paginated ${this.entityName.toLowerCase()}`, {
        entity: this.entityName,
        params,
        error: error instanceof Error ? error.message : String(error),
      });
      throw error;
    }
  }

  /**
   * üîÑ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–ø–∏—Å–µ–π
   */
  protected sortRecords(records: T[], sortField: string, order: 'asc' | 'desc'): T[] {
    return records.sort((a, b) => {
      const aValue = (a as any)[sortField];
      const bValue = (b as any)[sortField];
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ null/undefined –∑–Ω–∞—á–µ–Ω–∏–π
      if (aValue == null && bValue == null) return 0;
      if (aValue == null) return order === 'asc' ? 1 : -1;
      if (bValue == null) return order === 'asc' ? -1 : 1;
      
      // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
      if (aValue < bValue) return order === 'asc' ? -1 : 1;
      if (aValue > bValue) return order === 'asc' ? 1 : -1;
      return 0;
    });
  }



  /**
   * üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
   */
  async delete(id: number): Promise<boolean> {
    try {
      this.validateId(id);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
      const existing = await this.getById(id);
      if (!existing) {
        apiLogger.warn(`${this.entityName} not found for deletion`, {
          id,
          entity: this.entityName,
        });
        return false;
      }
      
      const methodName = `delete${this.entityName}`;
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–∏–ø–∏–∑–∞—Ü–∏—è –≤–º–µ—Å—Ç–æ any –¥–ª—è delete —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º casting
      const result = await (storage as unknown as Record<string, (id: number) => Promise<boolean>>)[methodName](id);
      
      if (result) {
        apiLogger.info(`Deleted ${this.entityName.toLowerCase()}`, {
          id,
          entity: this.entityName,
        });
      }
      
      return result;
    } catch (error) {
      apiLogger.error(`Error deleting ${this.entityName.toLowerCase()}`, {
        id,
        entity: this.entityName,
        error: error instanceof Error ? error.message : String(error),
      });
      throw error;
    }
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–æ ID (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥)
   */
  async deleteById(id: number): Promise<boolean> {
    return await this.delete(id);
  }

  /**
   * –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
   */
  async deleteMultiple(ids: number[]): Promise<{ deletedCount: number; results: Array<{ id: number; status: string }> }> {
    let deletedCount = 0;
    const results: Array<{ id: number; status: string }> = [];

    for (const id of ids) {
      try {
        const success = await this.delete(id);
        if (success) {
          deletedCount++;
          results.push({ id, status: "deleted" });
        } else {
          results.push({ id, status: "not_found" });
        }
      } catch (error) {
        apiLogger.error(`Error deleting ${this.entityName.toLowerCase()} ${id}`, {
          [`${this.entityName.toLowerCase()}Id`]: id,
          error: error instanceof Error ? error.message : String(error),
        });
        results.push({ id, status: "error" });
        throw error;
      }
    }

    return { deletedCount, results };
  }

  /**
   * –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
   */
  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–∏–ø–∏–∑–∞—Ü–∏—è –≤–º–µ—Å—Ç–æ any –¥–ª—è import –º–∞—Å—Å–∏–≤–∞
  async import(items: unknown[]): Promise<T[]> {
    if (!Array.isArray(items)) {
      throw new Error(`Expected array for ${this.entityName.toLowerCase()} import`);
    }

    const results: T[] = [];

    for (const itemData of items) {
      try {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö)
        const validatedData = await this.validateImportData(itemData);
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
        const item = await this.create(validatedData);
        results.push(item);
      } catch (error) {
        apiLogger.error(`Error importing ${this.entityName.toLowerCase()}`, {
          [`${this.entityName.toLowerCase()}Data`]: itemData,
          error: error instanceof Error ? error.message : String(error),
        });
        throw error;
      }
    }

    return results;
  }

  /**
   * üîß –í–∞–ª–∏–¥–∞—Ü–∏—è ID –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
   */
  protected validateId(id: number): void {
    if (!id || id <= 0 || !Number.isInteger(id)) {
      throw new Error(`Invalid ID: ${id}. ID must be a positive integer.`);
    }
    
    if (id > 2147483647) {
      throw new Error(`ID too large: ${id}. Maximum value is 2147483647.`);
    }
  }

  /**
   * üîß –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞ ID –¥–ª—è batch –æ–ø–µ—Ä–∞—Ü–∏–π
   */
  protected validateIds(ids: number[]): void {
    if (!Array.isArray(ids) || ids.length === 0) {
      throw new Error("IDs array must be non-empty array");
    }
    
    if (ids.length > 100) {
      throw new Error("Too many IDs. Maximum 100 items per batch operation");
    }
    
    for (const id of ids) {
      this.validateId(id);
    }
  }

  /**
   * üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–ø–µ—Ä–∞—Ü–∏–π (–¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)
   */
  protected getOperationStats(operation: string, startTime: number, success: boolean): object {
    return {
      entity: this.entityName,
      operation,
      duration: Date.now() - startTime,
      success,
      timestamp: new Date().toISOString(),
    };
  }

  /**
   * üéØ –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
   */
  protected handleError(operation: string, error: unknown, context: object = {}): never {
    const errorMessage = error instanceof Error ? error.message : String(error);
    
    apiLogger.error(`${this.entityName} ${operation} failed`, {
      entity: this.entityName,
      operation,
      error: errorMessage,
      ...context,
    });
    
    // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ HTTP —Å—Ç–∞—Ç—É—Å–∞
    throw error;
  }

  /**
   * üì¶ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö)
   */
  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–∏–ø–∏–∑–∞—Ü–∏—è –≤–º–µ—Å—Ç–æ any –¥–ª—è abstract –º–µ—Ç–æ–¥–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  protected abstract validateImportData(data: unknown): Promise<InsertT>;
}