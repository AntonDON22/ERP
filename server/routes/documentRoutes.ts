import { Router } from "express";
import { DocumentService } from "../services/documentService";
import { cacheService } from "../services/cacheService";
import { z } from "zod";
import { fromZodError } from "zod-validation-error";
import { apiLogger } from "../../shared/logger";
import { insertDocumentSchema, receiptDocumentSchema } from "../../shared/schema";
import type { CreateDocumentItem } from "../../shared/schema";
import { storage } from "../storage";

const router = Router();
const documentService = new DocumentService();

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º
const createDocumentSchema = z.object({
  type: z.string().refine((val) => {
    return val === "income" || val === "outcome" || val === "return";
  }, "–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'income', 'outcome' –∏–ª–∏ 'return'"),
  status: z.enum(["draft", "posted"], { required_error: "–°—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" }),
  name: z.string().optional().default(""),
  warehouseId: z.number().min(1, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥"),
  items: z
    .array(
      z.object({
        productId: z.number().min(1, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä"),
        quantity: z.union([
          z.string().min(1, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"),
          z.number().min(0, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º"),
        ]),
        price: z.union([z.string(), z.number()]).optional(),
      })
    )
    .min(1, "–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä"),
});
const updateDocumentSchema = z.object({
  document: insertDocumentSchema.partial(),
  items: z
    .array(
      z.object({
        productId: z.number().min(1, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä"),
        quantity: z.union([
          z.string().min(1, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"),
          z.number().min(0, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º"),
        ]),
      })
    )
    .optional(),
});
const deleteDocumentsSchema = z.object({
  documentIds: z.array(z.number()).min(1, "–£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"),
});
const getDocumentSchema = z.object({
  id: z
    .string()
    .transform((val) => parseInt(val))
    .refine((val) => !isNaN(val), "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º"),
});

// GET /api/documents
router.get("/", async (req, res) => {
  try {
    const documents = await documentService.getAll();
    res.json(documents);
  } catch (error) {
    apiLogger.error("Failed to get documents", {
      error: error instanceof Error ? error.message : String(error),
    });
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤" });
  }
});

// GET /api/documents/:id
router.get("/:id", async (req, res) => {
  try {
    const { id } = getDocumentSchema.parse(req.params);

    const document = await documentService.getById(id);
    if (!document) {
      return res.status(404).json({ error: "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    res.json(document);
  } catch (error) {
    if (error instanceof z.ZodError) {
      const validationError = fromZodError(error);
      return res.status(400).json({ error: validationError.message });
    }
    apiLogger.error("Failed to get document", {
      documentId: req.params.id,
      error: error instanceof Error ? error.message : String(error),
    });
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞" });
  }
});

// POST /api/documents/create
router.post("/create", async (req, res) => {
  try {
    const validatedData = receiptDocumentSchema.parse(req.body);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ receiptDocumentSchema
    const documentData = {
      type: validatedData.type,
      status: validatedData.status,
      name: validatedData.name || "",
      warehouseId: validatedData.warehouseId,
    };

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è storage (–≤—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ª–æ–≥–∏–∫–∏)
    const processedItems: any[] = validatedData.items.map((item) => ({
      productId: item.productId,
      quantity: typeof item.quantity === "string" ? parseFloat(item.quantity) : item.quantity,
      price: item.price
        ? typeof item.price === "string"
          ? parseFloat(item.price)
          : item.price
        : undefined,
    }));

    const document = await storage.createReceiptDocument(documentData, processedItems);
    res.status(201).json(document);

    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    await cacheService.invalidatePattern("inventory:*");
    apiLogger.info("Inventory cache invalidated after receipt document creation", {
      documentId: document.id,
    });
  } catch (error) {
    if (error instanceof z.ZodError) {
      const validationError = fromZodError(error);
      return res.status(400).json({ error: validationError.message });
    }
    apiLogger.error("Failed to create receipt document", {
      body: req.body,
      error: error instanceof Error ? error.message : String(error),
    });
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞" });
  }
});

// PUT /api/documents/:id
router.put("/:id", async (req, res) => {
  try {
    const { id } = getDocumentSchema.parse(req.params);
    const validatedData = updateDocumentSchema.parse(req.body);
    


    const document = await documentService.update(
      id,
      validatedData.document,
      validatedData.items
    );
    if (!document) {
      return res.status(404).json({ error: "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    await cacheService.invalidatePattern("inventory:*");
    apiLogger.info("Inventory cache invalidated after document update", { documentId: id });

    res.json(document);
  } catch (error) {
    if (error instanceof z.ZodError) {
      const validationError = fromZodError(error);
      return res.status(400).json({ error: validationError.message });
    }
    
    console.error('üí• Route error details:', error);
    console.error('üí• Error stack:', error instanceof Error ? error.stack : 'No stack');
    
    apiLogger.error("Failed to update document", {
      documentId: req.params.id,
      body: req.body,
      error: error instanceof Error ? error.message : String(error),
    });
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞" });
  }
});

// DELETE /api/documents/:id
router.delete("/:id", async (req, res) => {
  try {
    const { id } = getDocumentSchema.parse(req.params);

    const success = await documentService.deleteById(id);
    if (!success) {
      return res.status(404).json({ error: "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –≤–µ—Å—å –∫–µ—à –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    await cacheService.invalidatePattern("inventory:*");
    apiLogger.info("Inventory cache invalidated after document deletion", { documentId: id });

    res.json({ success: true });
  } catch (error) {
    if (error instanceof z.ZodError) {
      const validationError = fromZodError(error);
      return res.status(400).json({ error: validationError.message });
    }
    apiLogger.error("Failed to delete document", {
      documentId: req.params.id,
      error: error instanceof Error ? error.message : String(error),
    });
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞" });
  }
});

// POST /api/documents/delete-multiple
router.post("/delete-multiple", async (req, res) => {
  try {
    const validatedData = deleteDocumentsSchema.parse(req.body);
    const result = await documentService.deleteMultiple(validatedData.documentIds);

    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –≤–µ—Å—å –∫–µ—à –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ—Å–ª–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    await cacheService.invalidatePattern("inventory:*");
    apiLogger.info("Inventory cache invalidated after multiple document deletion", {
      deletedCount: result.deletedCount,
    });

    res.json(result);
  } catch (error) {
    if (error instanceof z.ZodError) {
      const validationError = fromZodError(error);
      return res.status(400).json({ error: validationError.message });
    }
    apiLogger.error("Failed to delete multiple documents", {
      body: req.body,
      error: error instanceof Error ? error.message : String(error),
    });
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤" });
  }
});

export default router;
