/**
 * –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ API endpoints
 * –ò–∑–º–µ—Ä—è–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö API –º–∞—Ä—à—Ä—É—Ç–æ–≤ ERP-—Å–∏—Å—Ç–µ–º—ã
 */

import { describe, it, expect, beforeAll } from 'vitest';
import request from 'supertest';
import express from 'express';
import { registerRoutes } from '../../server/routes';

interface ResponseTimeResult {
  endpoint: string;
  method: string;
  responseTime: number;
  status: 'excellent' | 'warning' | 'error';
  statusCode: number;
}

// –ü–æ—Ä–æ–≥–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
const PERFORMANCE_THRESHOLDS = {
  EXCELLENT: 100,
  WARNING: 500,
} as const;

// –¶–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const COLORS = {
  GREEN: '\x1b[32m',
  YELLOW: '\x1b[33m',
  RED: '\x1b[31m',
  RESET: '\x1b[0m',
  BOLD: '\x1b[1m',
} as const;

describe('API Response Time Performance Tests', () => {
  let app: express.Application;
  const results: ResponseTimeResult[] = [];

  beforeAll(async () => {
    app = express();
    app.use(express.json());
    await registerRoutes(app as any);
  });

  /**
   * –ò–∑–º–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ API endpoint
   */
  async function measureResponseTime(
    endpoint: string,
    method: 'GET' | 'POST' = 'GET',
    body?: any
  ): Promise<ResponseTimeResult> {
    const startTime = Date.now();
    
    let response;
    if (method === 'GET') {
      response = await request(app).get(endpoint);
    } else {
      response = await request(app).post(endpoint).send(body);
    }
    
    const responseTime = Date.now() - startTime;
    
    let status: ResponseTimeResult['status'];
    if (responseTime <= PERFORMANCE_THRESHOLDS.EXCELLENT) {
      status = 'excellent';
    } else if (responseTime <= PERFORMANCE_THRESHOLDS.WARNING) {
      status = 'warning';
    } else {
      status = 'error';
    }

    const result: ResponseTimeResult = {
      endpoint,
      method,
      responseTime,
      status,
      statusCode: response.status,
    };

    results.push(result);
    return result;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ü–≤–µ—Ç–æ–≤–æ–π –≥—Ä–∞–¥–∞—Ü–∏–µ–π
   */
  function formatResult(result: ResponseTimeResult): string {
    const { endpoint, method, responseTime, status } = result;
    
    let color: string;
    let statusText: string;
    
    switch (status) {
      case 'excellent':
        color = COLORS.GREEN;
        statusText = '–û–¢–õ–ò–ß–ù–û';
        break;
      case 'warning':
        color = COLORS.YELLOW;
        statusText = '–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï';
        break;
      case 'error':
        color = COLORS.RED;
        statusText = '–û–®–ò–ë–ö–ê';
        break;
    }

    return `${color}${COLORS.BOLD}${method} ${endpoint}${COLORS.RESET}${color} - ${responseTime}ms [${statusText}]${COLORS.RESET}`;
  }

  describe('–ö–ª—é—á–µ–≤—ã–µ API endpoints', () => {
    it('–¥–æ–ª–∂–µ–Ω –∏–∑–º–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ /api/products', async () => {
      const result = await measureResponseTime('/api/products');
      
      console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–º–µ—Ä–∞:');
      console.log(formatResult(result));
      
      expect(result.statusCode).toBe(200);
      expect(result.responseTime).toBeGreaterThan(0);
      
      // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –º–µ–¥–ª–µ–Ω–Ω–æ, –Ω–æ –Ω–µ —Ñ–µ–π–ª–∏–º —Ç–µ—Å—Ç
      if (result.status === 'error') {
        console.warn(`‚ö†Ô∏è  –ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: ${result.responseTime}ms –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥ ${PERFORMANCE_THRESHOLDS.WARNING}ms`);
      }
    });

    it('–¥–æ–ª–∂–µ–Ω –∏–∑–º–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ /api/inventory/availability', async () => {
      const result = await measureResponseTime('/api/inventory/availability');
      
      console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–º–µ—Ä–∞:');
      console.log(formatResult(result));
      
      expect(result.statusCode).toBe(200);
      expect(result.responseTime).toBeGreaterThan(0);
      
      if (result.status === 'error') {
        console.warn(`‚ö†Ô∏è  –ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: ${result.responseTime}ms –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥ ${PERFORMANCE_THRESHOLDS.WARNING}ms`);
      }
    });

    it('–¥–æ–ª–∂–µ–Ω –∏–∑–º–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ /api/documents', async () => {
      const result = await measureResponseTime('/api/documents');
      
      console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–º–µ—Ä–∞:');
      console.log(formatResult(result));
      
      expect(result.statusCode).toBe(200);
      expect(result.responseTime).toBeGreaterThan(0);
      
      if (result.status === 'error') {
        console.warn(`‚ö†Ô∏è  –ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: ${result.responseTime}ms –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥ ${PERFORMANCE_THRESHOLDS.WARNING}ms`);
      }
    });

    it('–¥–æ–ª–∂–µ–Ω –∏–∑–º–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ /api/warehouses', async () => {
      const result = await measureResponseTime('/api/warehouses');
      
      console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–º–µ—Ä–∞:');
      console.log(formatResult(result));
      
      expect(result.statusCode).toBe(200);
      expect(result.responseTime).toBeGreaterThan(0);
      
      if (result.status === 'error') {
        console.warn(`‚ö†Ô∏è  –ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: ${result.responseTime}ms –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥ ${PERFORMANCE_THRESHOLDS.WARNING}ms`);
      }
    });

    it('–¥–æ–ª–∂–µ–Ω –∏–∑–º–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ /api/inventory', async () => {
      const result = await measureResponseTime('/api/inventory');
      
      console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–º–µ—Ä–∞:');
      console.log(formatResult(result));
      
      expect(result.statusCode).toBe(200);
      expect(result.responseTime).toBeGreaterThan(0);
      
      if (result.status === 'error') {
        console.warn(`‚ö†Ô∏è  –ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: ${result.responseTime}ms –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥ ${PERFORMANCE_THRESHOLDS.WARNING}ms`);
      }
    });
  });

  describe('–°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç', () => {
    it('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', () => {
      const totalTests = results.length;
      const excellentCount = results.filter(r => r.status === 'excellent').length;
      const warningCount = results.filter(r => r.status === 'warning').length;
      const errorCount = results.filter(r => r.status === 'error').length;
      
      const averageTime = results.reduce((sum, r) => sum + r.responseTime, 0) / totalTests;
      const maxTime = Math.max(...results.map(r => r.responseTime));
      const minTime = Math.min(...results.map(r => r.responseTime));

      console.log('\n' + '='.repeat(60));
      console.log(`${COLORS.BOLD}üìà –°–í–û–î–ù–´–ô –û–¢–ß–ï–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò API${COLORS.RESET}`);
      console.log('='.repeat(60));
      console.log(`üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${totalTests}`);
      console.log(`${COLORS.GREEN}‚úÖ –û—Ç–ª–∏—á–Ω—ã—Ö: ${excellentCount} (<${PERFORMANCE_THRESHOLDS.EXCELLENT}ms)${COLORS.RESET}`);
      console.log(`${COLORS.YELLOW}‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${warningCount} (${PERFORMANCE_THRESHOLDS.EXCELLENT}-${PERFORMANCE_THRESHOLDS.WARNING}ms)${COLORS.RESET}`);
      console.log(`${COLORS.RED}‚ùå –û—à–∏–±–æ–∫: ${errorCount} (>${PERFORMANCE_THRESHOLDS.WARNING}ms)${COLORS.RESET}`);
      console.log(`‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${averageTime.toFixed(1)}ms`);
      console.log(`üèÉ –ë—ã—Å—Ç—Ä–µ–π—à–∏–π: ${minTime}ms`);
      console.log(`üêå –ú–µ–¥–ª–µ–Ω–Ω–µ–π—à–∏–π: ${maxTime}ms`);
      console.log('='.repeat(60));

      // –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      console.log('\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
      results.forEach(result => {
        console.log(`  ${formatResult(result)}`);
      });

      expect(totalTests).toBeGreaterThan(0);
      expect(averageTime).toBeGreaterThan(0);
    });
  });
});