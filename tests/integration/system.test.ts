/**
 * üß™ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã ERP
 * 
 * –ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:
 * - –°–æ–∑–¥–∞–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π (–ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã, —Å–∫–ª–∞–¥—ã)
 * - FIFO –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å (–ø—Ä–∏—Ö–æ–¥–Ω—ã–µ –∏ —Ä–∞—Å—Ö–æ–¥–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã)
 * - –ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
 * - –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
 */

import { describe, it, expect } from 'vitest';
import { testConfig } from '../config';
import { logger } from '../logger';
import { ErrorAggregator } from '../errorAggregator';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
interface TestProduct {
  id?: number;
  name: string;
  sku: string;
  price: string;
}

interface TestContractor {
  id?: number;
  name: string;
  website: string;
}

interface TestWarehouse {
  id?: number;
  name: string;
  address: string;
}

interface TestDocument {
  id?: number;
  name: string;
  type: string;
  status: 'draft' | 'posted';
  warehouseId: number;
}

interface InventoryItem {
  id: number;
  name: string;
  quantity: number;
  reserved?: number;
  available?: number;
}

interface TestData {
  product: TestProduct | null;
  contractor: TestContractor | null;
  warehouse: TestWarehouse | null;
  receiptDocument: TestDocument | null;
  writeoffDocument: TestDocument | null;
}

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
 */
class TestAPI {
  constructor(private baseUrl: string) {}

  async request(method: string, endpoint: string, body?: any) {
    const response = await fetch(`${this.baseUrl}${endpoint}`, {
      method,
      headers: {
        'Content-Type': 'application/json',
      },
      body: body ? JSON.stringify(body) : undefined,
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`${method} ${endpoint} failed: ${response.status} ${errorText}`);
    }

    return response.json();
  }

  // –ü—Ä–æ–¥—É–∫—Ç—ã
  async createProduct(product: Omit<TestProduct, 'id'>): Promise<TestProduct> {
    return this.request('POST', '/products', product);
  }

  async deleteProduct(id: number): Promise<void> {
    await this.request('DELETE', `/products/${id}`);
  }

  // –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã
  async createContractor(contractor: Omit<TestContractor, 'id'>): Promise<TestContractor> {
    return this.request('POST', '/contractors', contractor);
  }

  async deleteContractor(id: number): Promise<void> {
    await this.request('DELETE', `/contractors/${id}`);
  }

  // –°–∫–ª–∞–¥—ã
  async createWarehouse(warehouse: Omit<TestWarehouse, 'id'>): Promise<TestWarehouse> {
    return this.request('POST', '/warehouses', warehouse);
  }

  async deleteWarehouse(id: number): Promise<void> {
    await this.request('DELETE', `/warehouses/${id}`);
  }

  // –î–æ–∫—É–º–µ–Ω—Ç—ã
  async createDocument(document: { 
    type: string; 
    name: string; 
    warehouseId: number; 
    status: 'draft' | 'posted'; 
    items: Array<{ productId: number; quantity: string; price?: string }> 
  }): Promise<TestDocument> {
    return this.request('POST', '/documents/create-receipt', document);
  }

  async updateDocumentStatus(id: number, status: 'draft' | 'posted'): Promise<TestDocument> {
    return this.request('PUT', `/documents/${id}`, { status });
  }

  async deleteDocument(id: number): Promise<void> {
    await this.request('DELETE', `/documents/${id}`);
  }

  // –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
  async getInventory(): Promise<InventoryItem[]> {
    return this.request('GET', '/inventory');
  }

  async getInventoryAvailability(): Promise<InventoryItem[]> {
    return this.request('GET', '/inventory/availability');
  }

  // –ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
  async checkMaterializedViews(): Promise<{ status: string; views: any[] }> {
    return this.request('GET', '/materialized-views/status');
  }
}

/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
class SystemTester {
  private api: TestAPI;
  private errorAggregator: ErrorAggregator;
  private testData: TestData;

  constructor() {
    this.api = new TestAPI(testConfig.baseUrl);
    this.errorAggregator = new ErrorAggregator();
    this.testData = {
      product: null,
      contractor: null,
      warehouse: null,
      receiptDocument: null,
      writeoffDocument: null,
    };
  }

  /**
   * üîπ –≠—Ç–∞–ø 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
   */
  private async createTestEntities(): Promise<void> {
    logger.step('–≠—Ç–∞–ø 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π');

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    this.testData.product = await this.errorAggregator.safeExecute(
      '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞',
      async () => {
        const product = await this.api.createProduct({
          name: `TEST-–ü—Ä–æ–¥—É–∫—Ç-${Date.now()}`,
          sku: `TEST-SKU-${Date.now()}`,
          price: '150.50'
        });
        logger.success(`–ü—Ä–æ–¥—É–∫—Ç —Å–æ–∑–¥–∞–Ω: ${product.name} (ID: ${product.id})`);
        return product;
      }
    );

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
    this.testData.contractor = await this.errorAggregator.safeExecute(
      '–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞',
      async () => {
        const contractor = await this.api.createContractor({
          name: `TEST-–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç-${Date.now()}`,
          website: 'https://test-contractor.example.com'
        });
        logger.success(`–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: ${contractor.name} (ID: ${contractor.id})`);
        return contractor;
      }
    );

    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞
    this.testData.warehouse = await this.errorAggregator.safeExecute(
      '–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞',
      async () => {
        const warehouse = await this.api.createWarehouse({
          name: `TEST-–°–∫–ª–∞–¥-${Date.now()}`,
          address: '–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å —Å–∫–ª–∞–¥–∞'
        });
        logger.success(`–°–∫–ª–∞–¥ —Å–æ–∑–¥–∞–Ω: ${warehouse.name} (ID: ${warehouse.id})`);
        return warehouse;
      }
    );

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
    this.errorAggregator.check(
      '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π',
      !!(this.testData.product && this.testData.contractor && this.testData.warehouse),
      '–ù–µ –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ'
    );
  }

  /**
   * üîπ –≠—Ç–∞–ø 2: –ü—Ä–∏—Ö–æ–¥–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç (FIFO - –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞)
   */
  private async createReceiptDocument(): Promise<void> {
    logger.step('–≠—Ç–∞–ø 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞');

    if (!this.testData.product || !this.testData.warehouse) {
      this.errorAggregator.addError('–ü—Ä–∏—Ö–æ–¥–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç', '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞');
      return;
    }

    this.testData.receiptDocument = await this.errorAggregator.safeExecute(
      '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞',
      async () => {
        const document = await this.api.createDocument({
          type: '–û–ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω–∏–µ',
          name: `TEST-–ü—Ä–∏—Ö–æ–¥-${Date.now()}`,
          warehouseId: this.testData.warehouse!.id!,
          status: 'posted',
          items: [
            {
              productId: this.testData.product!.id!,
              quantity: '100',
              price: '150.50'
            }
          ]
        });
        logger.success(`–ü—Ä–∏—Ö–æ–¥–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: ${document.name} (ID: ${document.id})`);
        return document;
      }
    );

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ—Å–ª–µ –ø—Ä–∏—Ö–æ–¥–∞
    await this.errorAggregator.safeExecute(
      '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ—Å–ª–µ –ø—Ä–∏—Ö–æ–¥–∞',
      async () => {
        await new Promise(resolve => setTimeout(resolve, 500)); // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const inventory = await this.api.getInventory();
        const productInventory = inventory.find(item => item.id === this.testData.product!.id);
        
        if (productInventory && productInventory.quantity >= 100) {
          logger.success(`–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –æ–±–Ω–æ–≤–ª–µ–Ω: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ${productInventory.quantity}`);
        } else {
          throw new Error(`–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ: –æ–∂–∏–¥–∞–ª–æ—Å—å >= 100, –ø–æ–ª—É—á–µ–Ω–æ ${productInventory?.quantity || 0}`);
        }
      }
    );
  }

  /**
   * üîπ –≠—Ç–∞–ø 3: –†–∞—Å—Ö–æ–¥–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç (FIFO - —Å–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞)
   */
  private async createWriteoffDocument(): Promise<void> {
    logger.step('–≠—Ç–∞–ø 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞');

    if (!this.testData.product || !this.testData.warehouse) {
      this.errorAggregator.addError('–†–∞—Å—Ö–æ–¥–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç', '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞');
      return;
    }

    this.testData.writeoffDocument = await this.errorAggregator.safeExecute(
      '–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞',
      async () => {
        const document = await this.api.createDocument({
          type: '–°–ø–∏—Å–∞–Ω–∏–µ',
          name: `TEST-–°–ø–∏—Å–∞–Ω–∏–µ-${Date.now()}`,
          warehouseId: this.testData.warehouse!.id!,
          status: 'posted',
          items: [
            {
              productId: this.testData.product!.id!,
              quantity: '30'
            }
          ]
        });
        logger.success(`–†–∞—Å—Ö–æ–¥–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: ${document.name} (ID: ${document.id})`);
        return document;
      }
    );

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ FIFO –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è
    await this.errorAggregator.safeExecute(
      '–ü—Ä–æ–≤–µ—Ä–∫–∞ FIFO –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è',
      async () => {
        await new Promise(resolve => setTimeout(resolve, 500)); // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const inventory = await this.api.getInventory();
        const productInventory = inventory.find(item => item.id === this.testData.product!.id);
        
        const expectedQuantity = 70; // 100 - 30
        if (productInventory && productInventory.quantity === expectedQuantity) {
          logger.success(`FIFO –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: –æ—Å—Ç–∞—Ç–æ–∫ ${productInventory.quantity}`);
        } else {
          throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π FIFO —Ä–∞—Å—á–µ—Ç: –æ–∂–∏–¥–∞–ª–æ—Å—å ${expectedQuantity}, –ø–æ–ª—É—á–µ–Ω–æ ${productInventory?.quantity || 0}`);
        }
      }
    );
  }

  /**
   * üîπ –≠—Ç–∞–ø 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π
   */
  private async checkMaterializedViews(): Promise<void> {
    logger.step('–≠—Ç–∞–ø 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π');

    await this.errorAggregator.safeExecute(
      '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π',
      async () => {
        const startTime = Date.now();
        const status = await this.api.checkMaterializedViews();
        const duration = Date.now() - startTime;
        
        logger.success(`–ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã (${duration}ms)`);
        logger.debug(`–°—Ç–∞—Ç—É—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π: ${JSON.stringify(status, null, 2)}`);
      }
    );

    await this.errorAggregator.safeExecute(
      '–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è',
      async () => {
        const startTime = Date.now();
        const availability = await this.api.getInventoryAvailability();
        const duration = Date.now() - startTime;
        
        if (duration < 100) {
          logger.success(`–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—Ä–æ—Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è: ${duration}ms`);
        } else {
          logger.warn(`–ú–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è: ${duration}ms`);
        }
        
        logger.debug(`–ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è: ${availability.length}`);
      }
    );
  }

  /**
   * üîπ –≠—Ç–∞–ø 5: –¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞
   */
  private async testDocumentReversal(): Promise<void> {
    logger.step('–≠—Ç–∞–ø 5: –¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞');

    if (!this.testData.writeoffDocument) {
      this.errorAggregator.addError('–û—Ç–º–µ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞', '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –æ—Ç–º–µ–Ω—ã');
      return;
    }

    await this.errorAggregator.safeExecute(
      '–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Ö–æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞',
      async () => {
        await this.api.deleteDocument(this.testData.writeoffDocument!.id!);
        logger.success(`–î–æ–∫—É–º–µ–Ω—Ç ${this.testData.writeoffDocument!.name} –æ—Ç–º–µ–Ω–µ–Ω`);
      }
    );

    await this.errorAggregator.safeExecute(
      '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è',
      async () => {
        await new Promise(resolve => setTimeout(resolve, 500)); // –ü–∞—É–∑–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const inventory = await this.api.getInventory();
        const productInventory = inventory.find(item => item.id === this.testData.product!.id);
        
        const expectedQuantity = 100; // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        if (productInventory && productInventory.quantity === expectedQuantity) {
          logger.success(`–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${productInventory.quantity}`);
        } else {
          throw new Error(`–ù–µ–≤–µ—Ä–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: –æ–∂–∏–¥–∞–ª–æ—Å—å ${expectedQuantity}, –ø–æ–ª—É—á–µ–Ω–æ ${productInventory?.quantity || 0}`);
        }
      }
    );
  }

  /**
   * üîπ –≠—Ç–∞–ø 6: –¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
   */
  private async checkSystemHealth(): Promise<void> {
    logger.step('–≠—Ç–∞–ø 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã');

    await this.errorAggregator.safeExecute(
      '–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API',
      async () => {
        const startTime = Date.now();
        await this.api.request('GET', '/products');
        const duration = Date.now() - startTime;
        
        if (duration < 200) {
          logger.success(`API –æ—Ç–≤–µ—á–∞–µ—Ç –±—ã—Å—Ç—Ä–æ: ${duration}ms`);
        } else {
          logger.warn(`API –æ—Ç–≤–µ—á–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ: ${duration}ms`);
        }
      }
    );

    await this.errorAggregator.safeExecute(
      '–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö',
      async () => {
        const inventory = await this.api.getInventory();
        const availability = await this.api.getInventoryAvailability();
        
        const inventoryCount = inventory.length;
        const availabilityCount = availability.length;
        
        if (inventoryCount === availabilityCount) {
          logger.success(`–î–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã: ${inventoryCount} –∑–∞–ø–∏—Å–µ–π`);
        } else {
          throw new Error(`–ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: inventory=${inventoryCount}, availability=${availabilityCount}`);
        }
      }
    );
  }

  /**
   * üîπ –≠—Ç–∞–ø 7: –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  private async cleanup(): Promise<void> {
    logger.step('–≠—Ç–∞–ø 7: –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö');

    // –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    if (this.testData.receiptDocument) {
      await this.errorAggregator.safeExecute(
        '–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞',
        async () => {
          await this.api.deleteDocument(this.testData.receiptDocument!.id!);
          logger.success(`–ü—Ä–∏—Ö–æ–¥–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω`);
        }
      );
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π
    if (this.testData.product) {
      await this.errorAggregator.safeExecute(
        '–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞',
        async () => {
          await this.api.deleteProduct(this.testData.product!.id!);
          logger.success(`–ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª–µ–Ω`);
        }
      );
    }

    if (this.testData.contractor) {
      await this.errorAggregator.safeExecute(
        '–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞',
        async () => {
          await this.api.deleteContractor(this.testData.contractor!.id!);
          logger.success(`–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç —É–¥–∞–ª–µ–Ω`);
        }
      );
    }

    if (this.testData.warehouse) {
      await this.errorAggregator.safeExecute(
        '–£–¥–∞–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞',
        async () => {
          await this.api.deleteWarehouse(this.testData.warehouse!.id!);
          logger.success(`–°–∫–ª–∞–¥ —É–¥–∞–ª–µ–Ω`);
        }
      );
    }
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
   */
  async runAllTests(): Promise<void> {
    const startTime = Date.now();
    
    logger.header('üß™ –ó–ê–ü–£–°–ö –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ERP –°–ò–°–¢–ï–ú–´');
    logger.info(`–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${testConfig.baseUrl}`);
    logger.info(`–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: ${testConfig.logLevel}`);

    try {
      // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      await this.createTestEntities();
      await this.createReceiptDocument();
      await this.createWriteoffDocument();
      await this.checkMaterializedViews();
      await this.testDocumentReversal();
      await this.checkSystemHealth();
      await this.cleanup();

      // –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
      const duration = Date.now() - startTime;
      logger.header('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
      logger.info(`–û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms`);
      logger.info(this.errorAggregator.getSummary());
      
      if (this.errorAggregator.hasErrors() || this.errorAggregator.hasWarnings()) {
        logger.info(this.errorAggregator.getDetailedReport());
      }

      // –ö–æ–¥ –≤—ã—Ö–æ–¥–∞
      process.exit(this.errorAggregator.hasErrors() ? 1 : 0);

    } catch (error) {
      logger.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : String(error)}`);
      process.exit(1);
    } finally {
      logger.info(`–õ–æ–≥ —Ñ–∞–π–ª: ${logger.getLogFile()}`);
      logger.close();
    }
  }
}

// –í–∏test —Ç–µ—Å—Ç—ã
describe('System Integration Tests', () => {
  it('should run full ERP system test', async () => {
    const tester = new SystemTester();
    
    // –ú–æ–∫–∏—Ä—É–µ–º process.exit –¥–ª—è vitest
    const originalExit = process.exit;
    let exitCode: number | undefined;
    process.exit = ((code?: string | number) => {
      exitCode = typeof code === 'number' ? code : Number(code) || 0;
      return {} as never;
    }) as typeof process.exit;

    try {
      await tester.runAllTests();
      expect(exitCode).toBe(0); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    } finally {
      process.exit = originalExit;
    }
  }, 30000); // 30 —Å–µ–∫—É–Ω–¥ timeout
});

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ CLI
if (import.meta.url === `file://${process.argv[1]}`) {
  const tester = new SystemTester();
  tester.runAllTests().catch(error => {
    console.error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}