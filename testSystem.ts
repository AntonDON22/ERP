#!/usr/bin/env tsx
/**
 * üß™ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã ERP
 * 
 * –ó–∞–ø—É—Å–∫: npx tsx testSystem.ts
 * –ò–ª–∏: node --loader tsx/esm testSystem.ts
 */

// import { apiLogger } from './shared/logger.js';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
interface TestProduct {
  id?: number;
  name: string;
  sku: string;
  price: string;
}

interface TestContractor {
  id?: number;
  name: string;
  website: string;
}

interface TestWarehouse {
  id?: number;
  name: string;
  address: string;
}

interface TestDocument {
  id?: number;
  name: string;
  type: string;
  status: 'draft' | 'posted';
  warehouseId: number;
}

interface InventoryItem {
  id: number;
  name: string;
  quantity: number;
  reserved?: number;
  available?: number;
}

// –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
class TestAPI {
  private baseUrl = 'http://localhost:5000/api';

  async request(method: string, endpoint: string, body?: any) {
    const response = await fetch(`${this.baseUrl}${endpoint}`, {
      method,
      headers: {
        'Content-Type': 'application/json',
      },
      body: body ? JSON.stringify(body) : undefined,
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`${method} ${endpoint} failed: ${response.status} ${errorText}`);
    }

    return response.json();
  }

  // –ü—Ä–æ–¥—É–∫—Ç—ã
  async createProduct(product: Omit<TestProduct, 'id'>): Promise<TestProduct> {
    return this.request('POST', '/products', product);
  }

  async deleteProduct(id: number): Promise<void> {
    await this.request('DELETE', `/products/${id}`);
  }

  // –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã
  async createContractor(contractor: Omit<TestContractor, 'id'>): Promise<TestContractor> {
    return this.request('POST', '/contractors', contractor);
  }

  async deleteContractor(id: number): Promise<void> {
    await this.request('DELETE', `/contractors/${id}`);
  }

  // –°–∫–ª–∞–¥—ã
  async createWarehouse(warehouse: Omit<TestWarehouse, 'id'>): Promise<TestWarehouse> {
    return this.request('POST', '/warehouses', warehouse);
  }

  async deleteWarehouse(id: number): Promise<void> {
    await this.request('DELETE', `/warehouses/${id}`);
  }

  // –î–æ–∫—É–º–µ–Ω—Ç—ã
  async createDocument(document: { type: string; warehouseId: number; status: 'draft' | 'posted'; items: Array<{ productId: number; quantity: number; price: number }> }): Promise<TestDocument> {
    return this.request('POST', '/documents/create-receipt', document);
  }

  async updateDocumentStatus(id: number, status: 'draft' | 'posted'): Promise<TestDocument> {
    return this.request('PUT', `/documents/${id}`, { status });
  }

  async deleteDocument(id: number): Promise<void> {
    await this.request('DELETE', `/documents/${id}`);
  }

  // –û—Å—Ç–∞—Ç–∫–∏
  async getInventory(): Promise<InventoryItem[]> {
    return this.request('GET', '/inventory');
  }

  async getInventoryAvailability(): Promise<InventoryItem[]> {
    return this.request('GET', '/inventory/availability');
  }
}

// –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class SystemIntegrationTest {
  private api = new TestAPI();
  private testData = {
    product: null as TestProduct | null,
    contractor: null as TestContractor | null,
    warehouse: null as TestWarehouse | null,
    documents: [] as TestDocument[],
  };
  private errors: string[] = [];
  private startTime = Date.now();

  async run(): Promise<void> {
    console.log('\nüöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å–∏—Å—Ç–µ–º—ã ERP');
    console.log('=====================================');
    
    try {
      await this.step1_CreateTestEntities();
      await this.step2_CreateReceiptDocument();
      await this.step3_CreateWriteoffDocument();
      await this.step4_WriteoffToNegative();
      await this.step5_CancelDocument();
      await this.step6_CheckMaterializedViews();
      await this.step7_CheckSystemHealth();
      
      await this.cleanup();
      this.printResults();
      
    } catch (error) {
      this.errors.push(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error}`);
      console.error('‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω:', error);
      await this.cleanup();
      process.exit(1);
    }
  }

  private async step1_CreateTestEntities(): Promise<void> {
    console.log('\n1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π...');
    const timestamp = Date.now();

    try {
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä
      this.testData.product = await this.api.createProduct({
        name: `TEST-–¢–æ–≤–∞—Ä-${timestamp}`,
        sku: `TEST-SKU-${timestamp}`,
        price: '10.00'
      });
      console.log(`   ‚úÖ –¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω: ID ${this.testData.product.id}`);

      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞  
      this.testData.contractor = await this.api.createContractor({
        name: `TEST-–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç-${timestamp}`,
        website: `https://test-${timestamp}.com`
      });
      console.log(`   ‚úÖ –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: ID ${this.testData.contractor.id}`);

      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫–ª–∞–¥
      this.testData.warehouse = await this.api.createWarehouse({
        name: `TEST-–°–∫–ª–∞–¥-${timestamp}`,
        address: `–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å ${timestamp}`
      });
      console.log(`   ‚úÖ –°–∫–ª–∞–¥ —Å–æ–∑–¥–∞–Ω: ID ${this.testData.warehouse.id}`);
      
    } catch (error) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏: ${error}`);
    }
  }

  private async step2_CreateReceiptDocument(): Promise<void> {
    console.log('\n2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞...');
    
    if (!this.testData.product?.id || !this.testData.warehouse?.id) {
      throw new Error('–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã');
    }

    try {
      const receiptDoc = await this.api.createDocument({
        type: '–û–ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω–∏–µ',
        warehouseId: this.testData.warehouse.id,
        status: 'posted',
        items: [{
          productId: this.testData.product.id,
          quantity: 100,
          price: 10.00
        }]
      });

      this.testData.documents.push(receiptDoc);
      console.log(`   ‚úÖ –ü—Ä–∏—Ö–æ–¥–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: ID ${receiptDoc.id}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫
      const inventory = await this.api.getInventory();
      const testProductInventory = inventory.find(item => item.id === this.testData.product.id);
      
      if (!testProductInventory || testProductInventory.quantity !== 100) {
        throw new Error(`–û—Å—Ç–∞—Ç–æ–∫ –Ω–µ–≤–µ—Ä–Ω—ã–π: –æ–∂–∏–¥–∞–ª–æ—Å—å 100, –ø–æ–ª—É—á–µ–Ω–æ ${testProductInventory?.quantity || 0}`);
      }
      
      console.log(`   ‚úÖ –û—Å—Ç–∞—Ç–æ–∫ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: ${testProductInventory.quantity}`);
      
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –≤ –ø—Ä–∏—Ö–æ–¥–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ: ${error}`);
    }
  }

  private async step3_CreateWriteoffDocument(): Promise<void> {
    console.log('\n3Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (FIFO)...');
    
    if (!this.testData.product?.id || !this.testData.warehouse?.id) {
      throw new Error('–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã');
    }

    try {
      const writeoffDoc = await this.api.createDocument({
        type: '–°–ø–∏—Å–∞–Ω–∏–µ',
        warehouseId: this.testData.warehouse.id,
        status: 'posted',
        items: [{
          productId: this.testData.product.id,
          quantity: 40,
          price: 10.00
        }]
      });

      this.testData.documents.push(writeoffDoc);
      console.log(`   ‚úÖ –†–∞—Å—Ö–æ–¥–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: ID ${writeoffDoc.id}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ—Å–ª–µ FIFO
      const inventory = await this.api.getInventory();
      const testProductInventory = inventory.find(item => item.id === this.testData.product.id);
      
      if (!testProductInventory || testProductInventory.quantity !== 60) {
        throw new Error(`FIFO —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–≤–µ—Ä–Ω–æ: –æ–∂–∏–¥–∞–ª–æ—Å—å 60, –ø–æ–ª—É—á–µ–Ω–æ ${testProductInventory?.quantity || 0}`);
      }
      
      console.log(`   ‚úÖ FIFO —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: –æ—Å—Ç–∞—Ç–æ–∫ ${testProductInventory.quantity}`);
      
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –≤ —Ä–∞—Å—Ö–æ–¥–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ: ${error}`);
    }
  }

  private async step4_WriteoffToNegative(): Promise<void> {
    console.log('\n4Ô∏è‚É£ –°–ø–∏—Å–∞–Ω–∏–µ –≤ –º–∏–Ω—É—Å...');
    
    if (!this.testData.product?.id || !this.testData.warehouse?.id) {
      throw new Error('–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã');
    }

    try {
      const minusWriteoffDoc = await this.api.createDocument({
        type: '–°–ø–∏—Å–∞–Ω–∏–µ',
        warehouseId: this.testData.warehouse.id,
        status: 'posted',
        items: [{
          productId: this.testData.product.id,
          quantity: 80, // –ë–æ–ª—å—à–µ –æ—Å—Ç–∞—Ç–∫–∞
          price: 10.00
        }]
      });

      this.testData.documents.push(minusWriteoffDoc);
      console.log(`   ‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å–ø–∏—Å–∞–Ω–∏—è –≤ –º–∏–Ω—É—Å —Å–æ–∑–¥–∞–Ω: ID ${minusWriteoffDoc.id}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫
      const inventory = await this.api.getInventory();
      const testProductInventory = inventory.find(item => item.id === this.testData.product.id);
      
      if (!testProductInventory || testProductInventory.quantity !== -20) {
        throw new Error(`–°–ø–∏—Å–∞–Ω–∏–µ –≤ –º–∏–Ω—É—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–≤–µ—Ä–Ω–æ: –æ–∂–∏–¥–∞–ª–æ—Å—å -20, –ø–æ–ª—É—á–µ–Ω–æ ${testProductInventory?.quantity || 0}`);
      }
      
      console.log(`   ‚úÖ –°–ø–∏—Å–∞–Ω–∏–µ –≤ –º–∏–Ω—É—Å —Ä–∞–±–æ—Ç–∞–µ—Ç: –æ—Å—Ç–∞—Ç–æ–∫ ${testProductInventory.quantity}`);
      
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –≤ –º–∏–Ω—É—Å: ${error}`);
    }
  }

  private async step5_CancelDocument(): Promise<void> {
    console.log('\n5Ô∏è‚É£ –û—Ç–º–µ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (—Å–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞)...');
    
    if (this.testData.documents.length === 0) {
      throw new Error('–ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã');
    }

    try {
      const lastDoc = this.testData.documents[this.testData.documents.length - 1];
      if (!lastDoc.id) {
        throw new Error('ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      await this.api.updateDocumentStatus(lastDoc.id, 'draft');
      console.log(`   ‚úÖ –î–æ–∫—É–º–µ–Ω—Ç ${lastDoc.id} –æ—Ç–º–µ–Ω–µ–Ω`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞
      const inventory = await this.api.getInventory();
      const testProductInventory = inventory.find(item => item.id === this.testData.product!.id);
      
      if (!testProductInventory || testProductInventory.quantity !== 60) {
        throw new Error(`–û—Ç–º–µ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–≤–µ—Ä–Ω–æ: –æ–∂–∏–¥–∞–ª–æ—Å—å 60, –ø–æ–ª—É—á–µ–Ω–æ ${testProductInventory?.quantity || 0}`);
      }
      
      console.log(`   ‚úÖ –û—Å—Ç–∞—Ç–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${testProductInventory.quantity}`);
      
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${error}`);
    }
  }

  private async step6_CheckMaterializedViews(): Promise<void> {
    console.log('\n6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π...');
    
    try {
      const startTime = Date.now();
      const availability = await this.api.getInventoryAvailability();
      const responseTime = Date.now() - startTime;
      
      if (responseTime > 1000) {
        this.errors.push(`–ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–ª–µ–Ω–Ω—ã–µ: ${responseTime}–º—Å`);
      }
      
      console.log(`   ‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ ${responseTime}–º—Å`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
      const testProductAvailability = availability.find(item => item.id === this.testData.product!.id);
      if (!testProductAvailability) {
        throw new Error('–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö availability');
      }
      
      if (testProductAvailability.quantity !== 60) {
        throw new Error(`–î–∞–Ω–Ω—ã–µ availability –Ω–µ–≤–µ—Ä–Ω—ã: –æ–∂–∏–¥–∞–ª–æ—Å—å 60, –ø–æ–ª—É—á–µ–Ω–æ ${testProductAvailability.quantity}`);
      }
      
      console.log(`   ‚úÖ –î–∞–Ω–Ω—ã–µ availability –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã: –æ—Å—Ç–∞—Ç–æ–∫ ${testProductAvailability.quantity}`);
      
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π: ${error}`);
    }
  }

  private async step7_CheckSystemHealth(): Promise<void> {
    console.log('\n7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã...');
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:
    // - –õ–æ–≥–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫
    // - –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    // - –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    const totalTime = Date.now() - this.startTime;
    if (totalTime > 5000) {
      this.errors.push(`–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ: ${totalTime}–º—Å`);
    }
    
    console.log(`   ‚úÖ –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${totalTime}–º—Å`);
    console.log(`   ‚úÖ –û—à–∏–±–æ–∫ —Å–∏—Å—Ç–µ–º—ã: ${this.errors.length}`);
    
    console.log(`   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞: ${this.testData.documents.length} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`);
  }

  private async cleanup(): Promise<void> {
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    let cleanupErrors = 0;

    // –£–¥–∞–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
    for (const doc of this.testData.documents) {
      if (doc.id) {
        try {
          await this.api.deleteDocument(doc.id);
          console.log(`   ‚úÖ –î–æ–∫—É–º–µ–Ω—Ç ${doc.id} —É–¥–∞–ª–µ–Ω`);
        } catch (error) {
          console.warn(`   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç ${doc.id}: ${error}`);
          cleanupErrors++;
        }
      }
    }

    // –£–¥–∞–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
    if (this.testData.product?.id) {
      try {
        await this.api.deleteProduct(this.testData.product.id);
        console.log(`   ‚úÖ –¢–æ–≤–∞—Ä ${this.testData.product.id} —É–¥–∞–ª–µ–Ω`);
      } catch (error) {
        console.warn(`   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä: ${error}`);
        cleanupErrors++;
      }
    }

    if (this.testData.contractor?.id) {
      try {
        await this.api.deleteContractor(this.testData.contractor.id);
        console.log(`   ‚úÖ –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç ${this.testData.contractor.id} —É–¥–∞–ª–µ–Ω`);
      } catch (error) {
        console.warn(`   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞: ${error}`);
        cleanupErrors++;
      }
    }

    if (this.testData.warehouse?.id) {
      try {
        await this.api.deleteWarehouse(this.testData.warehouse.id);
        console.log(`   ‚úÖ –°–∫–ª–∞–¥ ${this.testData.warehouse.id} —É–¥–∞–ª–µ–Ω`);
      } catch (error) {
        console.warn(`   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–∫–ª–∞–¥: ${error}`);
        cleanupErrors++;
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫ –æ—á–∏—Å—Ç–∫–∏
    if (cleanupErrors > 0) {
      console.log(`\n‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: ${cleanupErrors}`);
    } else {
      console.log(`\n‚ú® –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑ –æ—à–∏–±–æ–∫`);
    }
  }

  private printResults(): void {
    const totalTime = Date.now() - this.startTime;
    
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ê');
    console.log('=====================================');
    console.log(`‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${totalTime}–º—Å`);
    console.log(`üìÑ –°–æ–∑–¥–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${this.testData.documents.length}`);
    console.log(`‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${this.errors.length}`);
    
    if (this.errors.length > 0) {
      console.log('\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:');
      this.errors.forEach(error => console.log(`   - ${error}`));
    }
    
    if (this.errors.length === 0 && totalTime < 5000) {
      console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!');
      console.log('   –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } else {
      console.log('\n‚ö†Ô∏è –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò');
    }
    
    console.log('\n');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
async function main() {
  const test = new SystemIntegrationTest();
  await test.run();
}

if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}

export { SystemIntegrationTest };