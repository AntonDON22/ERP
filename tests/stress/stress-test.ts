/**
 * üî• –°–¢–†–ï–°–°-–¢–ï–°–¢ ERP –°–ò–°–¢–ï–ú–´
 * 
 * –°–æ–∑–¥–∞–µ—Ç –±–æ–ª—å—à—É—é –Ω–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:
 * - 1000+ —Ç–æ–≤–∞—Ä–æ–≤
 * - 500+ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–≤–∏–∂–µ–Ω–∏—è
 * - 200+ –∑–∞–∫–∞–∑–æ–≤ —Å —Ä–µ–∑–µ—Ä–≤–∞–º–∏
 * - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞ API
 */

import { expect, describe, it, beforeAll, afterAll } from 'vitest';

const BASE_URL = 'http://localhost:5000/api';

interface StressTestResults {
  products: {
    created: number;
    avgTime: number;
    errors: number;
  };
  documents: {
    created: number;
    avgTime: number;
    errors: number;
  };
  orders: {
    created: number;
    avgTime: number;
    errors: number;
  };
  performance: {
    apiResponseTimes: number[];
    inventoryCheckTime: number;
    cacheHitRate: number;
  };
}

describe('üî• –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç ERP —Å–∏—Å—Ç–µ–º—ã', () => {
  let testResults: StressTestResults;
  let createdProductIds: number[] = [];
  let createdWarehouseIds: number[] = [];
  let createdContractorIds: number[] = [];

  beforeAll(async () => {
    console.log('\nüî• –ó–ê–ü–£–°–ö –°–¢–†–ï–°–°-–¢–ï–°–¢–ê ERP –°–ò–°–¢–ï–ú–´');
    console.log('================================');
    
    testResults = {
      products: { created: 0, avgTime: 0, errors: 0 },
      documents: { created: 0, avgTime: 0, errors: 0 },
      orders: { created: 0, avgTime: 0, errors: 0 },
      performance: { apiResponseTimes: [], inventoryCheckTime: 0, cacheHitRate: 0 }
    };

    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
    await setupBaseEntities();
  });

  afterAll(async () => {
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–¢–†–ï–°–°-–¢–ï–°–¢–ê:');
    console.log('============================');
    console.log(`‚úÖ –¢–æ–≤–∞—Ä—ã: ${testResults.products.created} (${testResults.products.avgTime.toFixed(2)}ms —Å—Ä–µ–¥–Ω–µ–µ)`);
    console.log(`‚úÖ –î–æ–∫—É–º–µ–Ω—Ç—ã: ${testResults.documents.created} (${testResults.documents.avgTime.toFixed(2)}ms —Å—Ä–µ–¥–Ω–µ–µ)`);
    console.log(`‚úÖ –ó–∞–∫–∞–∑—ã: ${testResults.orders.created} (${testResults.orders.avgTime.toFixed(2)}ms —Å—Ä–µ–¥–Ω–µ–µ)`);
    console.log(`üìà API Response Time: ${(testResults.performance.apiResponseTimes.reduce((a,b) => a+b, 0) / testResults.performance.apiResponseTimes.length).toFixed(2)}ms`);
    console.log(`üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤: ${testResults.performance.inventoryCheckTime}ms`);
    console.log(`üéØ Cache Hit Rate: ${testResults.performance.cacheHitRate}%`);
    
    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await cleanupTestData();
  });

  it('–°–æ–∑–¥–∞–Ω–∏–µ 1000+ —Ç–æ–≤–∞—Ä–æ–≤', async () => {
    console.log('\nüè≠ –°–æ–∑–¥–∞–Ω–∏–µ 1000+ —Ç–æ–≤–∞—Ä–æ–≤...');
    
    const startTime = Date.now();
    const batchSize = 50;
    const totalProducts = 1000;
    
    for (let batch = 0; batch < totalProducts / batchSize; batch++) {
      const promises = [];
      
      for (let i = 0; i < batchSize; i++) {
        const productIndex = batch * batchSize + i + 1;
        const productData = {
          name: `–°—Ç—Ä–µ—Å—Å-–¢–æ–≤–∞—Ä-${productIndex}`,
          sku: `STRESS-${productIndex.toString().padStart(4, '0')}`,
          price: Math.floor(Math.random() * 10000) + 100,
          purchasePrice: Math.floor(Math.random() * 5000) + 50,
          weight: Math.floor(Math.random() * 1000) + 10,
          barcode: `123456789${productIndex.toString().padStart(4, '0')}`,
          dimensions: `${Math.floor(Math.random() * 50) + 1}x${Math.floor(Math.random() * 50) + 1}x${Math.floor(Math.random() * 50) + 1}`
        };

        promises.push(createProduct(productData));
      }
      
      const results = await Promise.allSettled(promises);
      
      results.forEach((result, index) => {
        if (result.status === 'fulfilled') {
          testResults.products.created++;
          createdProductIds.push(result.value.id);
        } else {
          testResults.products.errors++;
          console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ${batch * batchSize + index + 1}:`, result.reason);
        }
      });
      
      console.log(`   Batch ${batch + 1}/${totalProducts / batchSize} –∑–∞–≤–µ—Ä—à–µ–Ω (${testResults.products.created} —Ç–æ–≤–∞—Ä–æ–≤)`);
    }
    
    const totalTime = Date.now() - startTime;
    testResults.products.avgTime = totalTime / testResults.products.created;
    
    expect(testResults.products.created).toBeGreaterThan(900);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${testResults.products.created} —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ ${totalTime}ms`);
  });

  it('–°–æ–∑–¥–∞–Ω–∏–µ 500+ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–≤–∏–∂–µ–Ω–∏—è', async () => {
    console.log('\nüìÑ –°–æ–∑–¥–∞–Ω–∏–µ 500+ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–≤–∏–∂–µ–Ω–∏—è...');
    
    const startTime = Date.now();
    const documentsToCreate = 500;
    const batchSize = 25;
    
    // –ë–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö
    const selectedProducts = createdProductIds.slice(0, 100);
    
    for (let batch = 0; batch < documentsToCreate / batchSize; batch++) {
      const promises = [];
      
      for (let i = 0; i < batchSize; i++) {
        const documentType = Math.random() > 0.7 ? 'writeoff' : 'receipt';
        const productId = selectedProducts[Math.floor(Math.random() * selectedProducts.length)];
        const warehouseId = createdWarehouseIds[Math.floor(Math.random() * createdWarehouseIds.length)];
        
        const documentData = {
          type: documentType,
          warehouseId: warehouseId,
          items: [{
            productId: productId,
            quantity: Math.floor(Math.random() * 100) + 1,
            price: Math.floor(Math.random() * 1000) + 100
          }]
        };

        promises.push(createDocument(documentData));
      }
      
      const results = await Promise.allSettled(promises);
      
      results.forEach((result) => {
        if (result.status === 'fulfilled') {
          testResults.documents.created++;
        } else {
          testResults.documents.errors++;
        }
      });
      
      console.log(`   –î–æ–∫—É–º–µ–Ω—Ç—ã batch ${batch + 1}: ${testResults.documents.created} —Å–æ–∑–¥–∞–Ω–æ`);
    }
    
    const totalTime = Date.now() - startTime;
    testResults.documents.avgTime = totalTime / testResults.documents.created;
    
    expect(testResults.documents.created).toBeGreaterThan(400);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${testResults.documents.created} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞ ${totalTime}ms`);
  });

  it('–°–æ–∑–¥–∞–Ω–∏–µ 200+ –∑–∞–∫–∞–∑–æ–≤ —Å —Ä–µ–∑–µ—Ä–≤–∞–º–∏', async () => {
    console.log('\nüõí –°–æ–∑–¥–∞–Ω–∏–µ 200+ –∑–∞–∫–∞–∑–æ–≤ —Å —Ä–µ–∑–µ—Ä–≤–∞–º–∏...');
    
    const startTime = Date.now();
    const ordersToCreate = 200;
    const batchSize = 20;
    
    const selectedProducts = createdProductIds.slice(0, 50);
    
    for (let batch = 0; batch < ordersToCreate / batchSize; batch++) {
      const promises = [];
      
      for (let i = 0; i < batchSize; i++) {
        const contractorId = createdContractorIds[Math.floor(Math.random() * createdContractorIds.length)];
        const productId = selectedProducts[Math.floor(Math.random() * selectedProducts.length)];
        
        const orderData = {
          customerId: contractorId,
          isReserved: Math.random() > 0.5, // 50% –∑–∞–∫–∞–∑–æ–≤ —Å —Ä–µ–∑–µ—Ä–≤–æ–º
          items: [{
            productId: productId,
            quantity: Math.floor(Math.random() * 10) + 1,
            price: Math.floor(Math.random() * 1000) + 100
          }]
        };

        promises.push(createOrder(orderData));
      }
      
      const results = await Promise.allSettled(promises);
      
      results.forEach((result) => {
        if (result.status === 'fulfilled') {
          testResults.orders.created++;
        } else {
          testResults.orders.errors++;
        }
      });
      
      console.log(`   –ó–∞–∫–∞–∑—ã batch ${batch + 1}: ${testResults.orders.created} —Å–æ–∑–¥–∞–Ω–æ`);
    }
    
    const totalTime = Date.now() - startTime;
    testResults.orders.avgTime = totalTime / testResults.orders.created;
    
    expect(testResults.orders.created).toBeGreaterThan(150);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${testResults.orders.created} –∑–∞–∫–∞–∑–æ–≤ –∑–∞ ${totalTime}ms`);
  });

  it('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π', async () => {
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π...');
    
    // –¢–µ—Å—Ç 1: –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö API
    const apiTests = [
      { name: 'GET /products', url: '/products' },
      { name: 'GET /inventory', url: '/inventory' },
      { name: 'GET /inventory/availability', url: '/inventory/availability' },
      { name: 'GET /documents', url: '/documents' },
      { name: 'GET /orders', url: '/orders' }
    ];
    
    for (const test of apiTests) {
      const startTime = Date.now();
      const response = await fetch(`${BASE_URL}${test.url}`);
      const responseTime = Date.now() - startTime;
      
      testResults.performance.apiResponseTimes.push(responseTime);
      
      expect(response.ok).toBe(true);
      console.log(`   ${test.name}: ${responseTime}ms`);
    }
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–∞–Ω–Ω—ã—Ö
    console.log('\n   –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤...');
    const inventoryStart = Date.now();
    const inventoryResponse = await fetch(`${BASE_URL}/inventory/availability`);
    testResults.performance.inventoryCheckTime = Date.now() - inventoryStart;
    
    expect(inventoryResponse.ok).toBe(true);
    const inventoryData = await inventoryResponse.json();
    console.log(`   –û—Å—Ç–∞—Ç–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –¥–ª—è ${inventoryData.length} —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ ${testResults.performance.inventoryCheckTime}ms`);
    
    // –¢–µ—Å—Ç 3: Cache Hit Rate
    const metricsResponse = await fetch(`${BASE_URL}/metrics`);
    if (metricsResponse.ok) {
      const metrics = await metricsResponse.json();
      testResults.performance.cacheHitRate = metrics.overview?.cacheHitRate || 0;
      console.log(`   Cache Hit Rate: ${testResults.performance.cacheHitRate}%`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const avgApiTime = testResults.performance.apiResponseTimes.reduce((a,b) => a+b, 0) / testResults.performance.apiResponseTimes.length;
    expect(avgApiTime).toBeLessThan(5000); // API –¥–æ–ª–∂–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å –±—ã—Å—Ç—Ä–µ–µ 5 —Å–µ–∫—É–Ω–¥
    expect(testResults.performance.inventoryCheckTime).toBeLessThan(10000); // –û—Å—Ç–∞—Ç–∫–∏ –¥–æ–ª–∂–Ω—ã —Å—á–∏—Ç–∞—Ç—å—Å—è –±—ã—Å—Ç—Ä–µ–µ 10 —Å–µ–∫—É–Ω–¥
    
    console.log(`‚úÖ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è API: ${avgApiTime.toFixed(2)}ms`);
  });

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  async function setupBaseEntities() {
    console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π...');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–∫–ª–∞–¥—ã
    for (let i = 1; i <= 5; i++) {
      const warehouse = await createWarehouse({
        name: `–°—Ç—Ä–µ—Å—Å-–°–∫–ª–∞–¥-${i}`,
        location: `–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å ${i}`
      });
      createdWarehouseIds.push(warehouse.id);
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
    for (let i = 1; i <= 10; i++) {
      const contractor = await createContractor({
        name: `–°—Ç—Ä–µ—Å—Å-–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç-${i}`,
        website: `https://test${i}.example.com`
      });
      createdContractorIds.push(contractor.id);
    }
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${createdWarehouseIds.length} —Å–∫–ª–∞–¥–æ–≤ –∏ ${createdContractorIds.length} –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤`);
  }

  async function cleanupTestData() {
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    try {
      // –£–¥–∞–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (batch delete)
      if (createdProductIds.length > 0) {
        const response = await fetch(`${BASE_URL}/products/batch-delete`, {
          method: 'DELETE',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ ids: createdProductIds })
        });
        if (response.ok) {
          console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${createdProductIds.length} —Ç–æ–≤–∞—Ä–æ–≤`);
        }
      }
    } catch (error) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞)');
    }
  }

  // API –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  async function createProduct(data: any) {
    const response = await fetch(`${BASE_URL}/products`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data)
    });
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`);
    }
    
    return response.json();
  }

  async function createWarehouse(data: any) {
    const response = await fetch(`${BASE_URL}/warehouses`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data)
    });
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`);
    }
    
    return response.json();
  }

  async function createContractor(data: any) {
    const response = await fetch(`${BASE_URL}/contractors`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data)
    });
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`);
    }
    
    return response.json();
  }

  async function createDocument(data: any) {
    const response = await fetch(`${BASE_URL}/documents/receipt`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data)
    });
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`);
    }
    
    return response.json();
  }

  async function createOrder(data: any) {
    const response = await fetch(`${BASE_URL}/orders`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data)
    });
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`);
    }
    
    return response.json();
  }
});