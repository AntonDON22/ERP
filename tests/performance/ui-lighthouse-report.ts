/**
 * Lighthouse –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ UI
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Playwright –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
 */

import { test, expect, chromium } from '@playwright/test';
import { writeFileSync, mkdirSync, existsSync } from 'fs';
import { join } from 'path';
import lighthouse from 'lighthouse';
import * as chromeLauncher from 'chrome-launcher';

interface LighthouseResult {
  url: string;
  performanceScore: number;
  fcp: number; // First Contentful Paint
  lcp: number; // Largest Contentful Paint
  cls: number; // Cumulative Layout Shift
  tbt: number; // Total Blocking Time
  status: 'excellent' | 'good' | 'needs-improvement' | 'poor';
}

// –ü–æ—Ä–æ–≥–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Lighthouse
const LIGHTHOUSE_THRESHOLDS = {
  EXCELLENT: 90,
  GOOD: 70,
  NEEDS_IMPROVEMENT: 50,
} as const;

// –¶–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const COLORS = {
  GREEN: '\x1b[32m',
  YELLOW: '\x1b[33m',
  ORANGE: '\x1b[38;5;208m',
  RED: '\x1b[31m',
  RESET: '\x1b[0m',
  BOLD: '\x1b[1m',
} as const;

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —Å–∫–æ—Ä—É
 */
function getPerformanceStatus(score: number): LighthouseResult['status'] {
  if (score >= LIGHTHOUSE_THRESHOLDS.EXCELLENT) return 'excellent';
  if (score >= LIGHTHOUSE_THRESHOLDS.GOOD) return 'good';
  if (score >= LIGHTHOUSE_THRESHOLDS.NEEDS_IMPROVEMENT) return 'needs-improvement';
  return 'poor';
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ü–≤–µ—Ç–æ–≤–æ–π –≥—Ä–∞–¥–∞—Ü–∏–µ–π
 */
function formatLighthouseResult(result: LighthouseResult): string {
  const { url, performanceScore, status } = result;
  
  let color: string;
  let statusText: string;
  
  switch (status) {
    case 'excellent':
      color = COLORS.GREEN;
      statusText = '–û–¢–õ–ò–ß–ù–û';
      break;
    case 'good':
      color = COLORS.YELLOW;
      statusText = '–•–û–†–û–®–û';
      break;
    case 'needs-improvement':
      color = COLORS.ORANGE;
      statusText = '–¢–†–ï–ë–£–ï–¢ –£–õ–£–ß–®–ï–ù–ò–Ø';
      break;
    case 'poor':
      color = COLORS.RED;
      statusText = '–ü–õ–û–•–û';
      break;
  }

  return `${color}${COLORS.BOLD}${url}${COLORS.RESET}${color} - Score: ${performanceScore} [${statusText}]${COLORS.RESET}`;
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç Lighthouse –∞–Ω–∞–ª–∏–∑ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ URL
 */
async function runLighthouseAnalysis(url: string): Promise<LighthouseResult> {
  let chrome;
  
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º Chrome
    chrome = await chromeLauncher.launch({
      chromeFlags: ['--headless', '--disable-gpu', '--no-sandbox'],
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º Lighthouse
    const runnerResult = await lighthouse(url, {
      port: chrome.port,
      onlyCategories: ['performance'],
      formFactor: 'desktop',
      throttling: {
        rttMs: 40,
        throughputKbps: 10240,
        cpuSlowdownMultiplier: 1,
      },
    });

    if (!runnerResult || !runnerResult.lhr) {
      throw new Error('Lighthouse –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã');
    }

    const lhr = runnerResult.lhr;
    const performanceScore = Math.round((lhr.categories.performance.score || 0) * 100);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    const metrics = lhr.audits;
    const fcp = metrics['first-contentful-paint']?.numericValue || 0;
    const lcp = metrics['largest-contentful-paint']?.numericValue || 0;
    const cls = metrics['cumulative-layout-shift']?.numericValue || 0;
    const tbt = metrics['total-blocking-time']?.numericValue || 0;

    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const reportsDir = join(process.cwd(), 'lighthouse-reports');
    if (!existsSync(reportsDir)) {
      mkdirSync(reportsDir, { recursive: true });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON –æ—Ç—á–µ—Ç
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const reportName = `lighthouse-${url.replace(/[^\w]/g, '_')}-${timestamp}`;
    
    writeFileSync(
      join(reportsDir, `${reportName}.json`),
      JSON.stringify(lhr, null, 2)
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –æ—Ç—á–µ—Ç
    const html = runnerResult.report;
    if (html) {
      const htmlContent = Array.isArray(html) ? html.join('') : html;
      writeFileSync(join(reportsDir, `${reportName}.html`), htmlContent);
    }

    const result: LighthouseResult = {
      url,
      performanceScore,
      fcp: Math.round(fcp),
      lcp: Math.round(lcp),
      cls: Math.round(cls * 1000) / 1000,
      tbt: Math.round(tbt),
      status: getPerformanceStatus(performanceScore),
    };

    console.log(`\nüìä Lighthouse –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è ${url}`);
    console.log(`üìÅ –û—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${reportName}.json, ${reportName}.html`);

    return result;

  } finally {
    if (chrome) {
      await chrome.kill();
    }
  }
}

test.describe('Lighthouse Performance Analysis', () => {
  const results: LighthouseResult[] = [];
  const BASE_URL = 'http://localhost:5000';

  test.beforeAll(async () => {
    // –ñ–¥–µ–º —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä —Ç–æ—á–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
    await new Promise(resolve => setTimeout(resolve, 2000));
  });

  test('–¥–æ–ª–∂–µ–Ω –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã /products', async () => {
    const url = `${BASE_URL}/products`;
    const result = await runLighthouseAnalysis(url);
    
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç Lighthouse –∞–Ω–∞–ª–∏–∑–∞:');
    console.log(formatLighthouseResult(result));
    console.log(`üé® First Contentful Paint: ${result.fcp}ms`);
    console.log(`üñºÔ∏è  Largest Contentful Paint: ${result.lcp}ms`);
    console.log(`üìè Cumulative Layout Shift: ${result.cls}`);
    console.log(`‚è≥ Total Blocking Time: ${result.tbt}ms`);
    
    results.push(result);
    
    expect(result.performanceScore).toBeGreaterThan(0);
    
    if (result.status === 'poor') {
      console.warn(`‚ö†Ô∏è  –ù–∏–∑–∫–∏–π Performance Score: ${result.performanceScore} —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è`);
    }
  });

  test('–¥–æ–ª–∂–µ–Ω –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã /documents', async () => {
    const url = `${BASE_URL}/documents`;
    const result = await runLighthouseAnalysis(url);
    
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç Lighthouse –∞–Ω–∞–ª–∏–∑–∞:');
    console.log(formatLighthouseResult(result));
    console.log(`üé® First Contentful Paint: ${result.fcp}ms`);
    console.log(`üñºÔ∏è  Largest Contentful Paint: ${result.lcp}ms`);
    console.log(`üìè Cumulative Layout Shift: ${result.cls}`);
    console.log(`‚è≥ Total Blocking Time: ${result.tbt}ms`);
    
    results.push(result);
    
    expect(result.performanceScore).toBeGreaterThan(0);
    
    if (result.status === 'poor') {
      console.warn(`‚ö†Ô∏è  –ù–∏–∑–∫–∏–π Performance Score: ${result.performanceScore} —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è`);
    }
  });

  test('–¥–æ–ª–∂–µ–Ω –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã /', async () => {
    const url = `${BASE_URL}/`;
    const result = await runLighthouseAnalysis(url);
    
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç Lighthouse –∞–Ω–∞–ª–∏–∑–∞:');
    console.log(formatLighthouseResult(result));
    console.log(`üé® First Contentful Paint: ${result.fcp}ms`);
    console.log(`üñºÔ∏è  Largest Contentful Paint: ${result.lcp}ms`);
    console.log(`üìè Cumulative Layout Shift: ${result.cls}`);
    console.log(`‚è≥ Total Blocking Time: ${result.tbt}ms`);
    
    results.push(result);
    
    expect(result.performanceScore).toBeGreaterThan(0);
    
    if (result.status === 'poor') {
      console.warn(`‚ö†Ô∏è  –ù–∏–∑–∫–∏–π Performance Score: ${result.performanceScore} —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è`);
    }
  });

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç Lighthouse', async () => {
    const totalTests = results.length;
    const excellentCount = results.filter(r => r.status === 'excellent').length;
    const goodCount = results.filter(r => r.status === 'good').length;
    const needsImprovementCount = results.filter(r => r.status === 'needs-improvement').length;
    const poorCount = results.filter(r => r.status === 'poor').length;

    const averageScore = results.reduce((sum, r) => sum + r.performanceScore, 0) / totalTests;
    const averageFCP = results.reduce((sum, r) => sum + r.fcp, 0) / totalTests;
    const averageLCP = results.reduce((sum, r) => sum + r.lcp, 0) / totalTests;

    console.log('\n' + '='.repeat(70));
    console.log(`${COLORS.BOLD}üöÄ –°–í–û–î–ù–´–ô –û–¢–ß–ï–¢ LIGHTHOUSE –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò${COLORS.RESET}`);
    console.log('='.repeat(70));
    console.log(`üìä –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${totalTests}`);
    console.log(`${COLORS.GREEN}üåü –û—Ç–ª–∏—á–Ω—ã—Ö: ${excellentCount} (‚â•90)${COLORS.RESET}`);
    console.log(`${COLORS.YELLOW}‚úÖ –•–æ—Ä–æ—à–∏—Ö: ${goodCount} (70-89)${COLORS.RESET}`);
    console.log(`${COLORS.ORANGE}‚ö†Ô∏è  –¢—Ä–µ–±—É—é—Ç —É–ª—É—á—à–µ–Ω–∏—è: ${needsImprovementCount} (50-69)${COLORS.RESET}`);
    console.log(`${COLORS.RED}‚ùå –ü–ª–æ—Ö–∏—Ö: ${poorCount} (<50)${COLORS.RESET}`);
    console.log(`üéØ –°—Ä–µ–¥–Ω–∏–π Performance Score: ${averageScore.toFixed(1)}`);
    console.log(`üé® –°—Ä–µ–¥–Ω–∏–π FCP: ${averageFCP.toFixed(0)}ms`);
    console.log(`üñºÔ∏è  –°—Ä–µ–¥–Ω–∏–π LCP: ${averageLCP.toFixed(0)}ms`);
    console.log('='.repeat(70));

    // –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log('\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    results.forEach(result => {
      console.log(`  ${formatLighthouseResult(result)}`);
      console.log(`    FCP: ${result.fcp}ms | LCP: ${result.lcp}ms | CLS: ${result.cls} | TBT: ${result.tbt}ms`);
    });

    expect(totalTests).toBeGreaterThan(0);
    expect(averageScore).toBeGreaterThan(0);
  });
});