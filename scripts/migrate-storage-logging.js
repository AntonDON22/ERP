#!/usr/bin/env node
/**
 * üîß –ú–ê–°–°–û–í–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –í storage.ts
 * 
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ console.log –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
 * —á–µ—Ä–µ–∑ shared/logger.ts –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É storage.ts
const storageFilePath = path.join(__dirname, '..', 'server', 'storage.ts');

// –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∑–∞–º–µ–Ω—ã console.log
const logReplacements = [
  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  {
    pattern: /console\.log\(`üìù –î–æ–∫—É–º–µ–Ω—Ç \$\{id\} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —á–µ—Ä–Ω–æ–≤–∏–∫, –¥–≤–∏–∂–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –æ—Ç–º–µ–Ω–µ–Ω—ã`\);/g,
    replacement: `dbLogger.info("Document status changed", {
      operation: "updateDocument",
      module: "storage",
      documentId: id,
      oldStatus: "draft",
      newStatus: "posted",
      message: "–î–æ–∫—É–º–µ–Ω—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —á–µ—Ä–Ω–æ–≤–∏–∫, –¥–≤–∏–∂–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –æ—Ç–º–µ–Ω–µ–Ω—ã"
    });`
  },
  {
    pattern: /console\.log\(`‚úÖ –î–æ–∫—É–º–µ–Ω—Ç \$\{id\} –ø—Ä–æ–≤–µ–¥–µ–Ω, –¥–≤–∏–∂–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è —Å–æ–∑–¥–∞–Ω—ã`\);/g,
    replacement: `dbLogger.info("Document status changed", {
      operation: "updateDocument",
      module: "storage",
      documentId: id,
      oldStatus: "draft",
      newStatus: "posted",
      message: "–î–æ–∫—É–º–µ–Ω—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω, –¥–≤–∏–∂–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è —Å–æ–∑–¥–∞–Ω—ã"
    });`
  },
  {
    pattern: /console\.error\("Error updating document:", error\);/g,
    replacement: `dbLogger.error("Error updating document", {
      operation: "updateDocument",
      module: "storage",
      error: getErrorMessage(error)
    });`
  },
  // –î–æ–∫—É–º–µ–Ω—Ç—ã deleteDocument
  {
    pattern: /console\.log\(`\[DB\] Starting deleteDocument for ID \$\{id\}\.\.\.`\);/g,
    replacement: ``
  },
  {
    pattern: /console\.log\(\s*`\[DB\] Deleted \$\{itemsResult\.rowCount \?\? 0\} document items for document \$\{id\}`\s*\);/g,
    replacement: `dbLogger.debug("Document items deleted", {
      operation: "deleteDocument",
      module: "storage",
      documentId: id,
      itemsDeleted: itemsResult.rowCount ?? 0
    });`
  },
  {
    pattern: /console\.log\(`\[DB\] deleteDocument completed in \$\{endTime - startTime\}ms, success: \$\{success\}`\);/g,
    replacement: ``
  },
  {
    pattern: /console\.error\(`\[DB\] deleteDocument failed in \$\{endTime - startTime\}ms:`, error\);/g,
    replacement: `dbLogger.error("Database operation failed", {
      operation: "deleteDocument",
      module: "storage",
      error: getErrorMessage(error)
    });`
  },
  // FIFO –ª–æ–≥–∏
  {
    pattern: /console\.log\(`üîÑ FIFO-—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ \$\{productId\}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: \$\{quantityToWriteoff\}`\);/g,
    replacement: `dbLogger.debug("FIFO writeoff started", {
      operation: "processWriteoffFIFO",
      module: "storage",
      productId,
      quantityToWriteoff
    });`
  },
  {
    pattern: /console\.log\(`üì¶ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏—Ö–æ–¥–æ–≤: \$\{availableStock\.length\}`\);/g,
    replacement: `dbLogger.debug("Available stock found", {
      operation: "processWriteoffFIFO",
      module: "storage",
      productId,
      availableStockCount: availableStock.length
    });`
  },
  {
    pattern: /console\.log\(\s*`‚ö†Ô∏è –°–ø–∏—Å–∞–Ω–∏–µ –≤ –º–∏–Ω—É—Å: \$\{remainingToWriteoff\} –µ–¥–∏–Ω–∏—Ü`\s*\);/g,
    replacement: `dbLogger.warn("Negative inventory writeoff", {
      operation: "processWriteoffFIFO",
      module: "storage",
      productId,
      remainingToWriteoff
    });`
  },
  {
    pattern: /console\.log\(`‚úÖ FIFO-—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ`\);/g,
    replacement: `dbLogger.info("FIFO writeoff completed", {
      operation: "processWriteoffFIFO",
      module: "storage",
      productId
    });`
  },
  // –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã
  {
    pattern: /console\.error\("Error creating receipt document:", error\);/g,
    replacement: `dbLogger.error("Error creating receipt document", {
      operation: "createReceiptDocument",
      module: "storage",
      error: getErrorMessage(error)
    });`
  },
  {
    pattern: /console\.error\("Error fetching logs:", error\);/g,
    replacement: `dbLogger.error("Error fetching logs", {
      operation: "getLogs",
      module: "storage",
      error: getErrorMessage(error)
    });`
  },
  {
    pattern: /console\.error\("Error fetching log modules:", error\);/g,
    replacement: `dbLogger.error("Error fetching log modules", {
      operation: "getLogModules",
      module: "storage",
      error: getErrorMessage(error)
    });`
  },
  {
    pattern: /console\.log\(`\[DB\] Cleared \$\{result\.rowCount \|\| 0\} log entries`\);/g,
    replacement: `dbLogger.info("Log entries cleared", {
      operation: "clearAllLogs",
      module: "storage",
      clearedCount: result.rowCount || 0
    });`
  },
  {
    pattern: /console\.error\("Error clearing logs:", error\);/g,
    replacement: `dbLogger.error("Error clearing logs", {
      operation: "clearAllLogs",
      module: "storage",
      error: getErrorMessage(error)
    });`
  },
  // –ó–∞–∫–∞–∑—ã
  {
    pattern: /console\.log\(`\[DB\] Starting getOrder for ID \$\{id\}\.\.\.`\);/g,
    replacement: ``
  },
  {
    pattern: /console\.log\(`\[DB\] Order \$\{id\} not found`\);/g,
    replacement: `dbLogger.info("Order not found", {
      operation: "getOrder",
      module: "storage",
      orderId: id
    });`
  },
  {
    pattern: /console\.log\(`\[DB\] getOrder completed for order \$\{id\} with \$\{itemsResult\.length\} items`\);/g,
    replacement: `dbLogger.info("Database operation completed", {
      operation: "getOrder",
      module: "storage",
      orderId: id,
      itemsCount: itemsResult.length
    });`
  }
];

function migrateStorageLogging() {
  try {
    console.log('üîß Starting storage.ts logging migration...');
    
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    let content = fs.readFileSync(storageFilePath, 'utf8');
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–º–µ–Ω—ã
    let changesCount = 0;
    logReplacements.forEach((replacement, index) => {
      const beforeLength = content.length;
      content = content.replace(replacement.pattern, replacement.replacement);
      const afterLength = content.length;
      
      if (beforeLength !== afterLength) {
        changesCount++;
        console.log(`‚úÖ Applied replacement ${index + 1}/${logReplacements.length}`);
      }
    });
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ç–æ–ª—å–∫–æ startTime/endTime —Ä–∞—Å—á–µ—Ç–∞–º–∏ –µ—Å–ª–∏ –æ–Ω–∏ –æ—Å—Ç–∞–ª–∏—Å—å
    content = content.replace(/const startTime = Date\.now\(\);\n/g, '');
    content = content.replace(/const endTime = Date\.now\(\);\n/g, '');
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    fs.writeFileSync(storageFilePath, content, 'utf8');
    
    console.log(`üéâ Storage logging migration completed: ${changesCount} replacements applied`);
    
  } catch (error) {
    console.error('‚ùå Migration failed:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
migrateStorageLogging();