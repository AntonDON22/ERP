#!/usr/bin/env node

import { spawn } from 'child_process';
import { promisify } from 'util';
import lighthouse from 'lighthouse';
import * as chromeLauncher from 'chrome-launcher';
import { chromium, Browser, Page, BrowserContext } from 'playwright';
import fs from 'fs/promises';
import path from 'path';

const exec = promisify(require('child_process').exec);

interface ResponsiveIssue {
  page: string;
  viewport: string;
  issue: string;
  severity: 'critical' | 'warning' | 'info';
  element?: string;
}

interface StylelintIssue {
  file: string;
  line: number;
  column: number;
  rule: string;
  severity: string;
  text: string;
}

interface LighthouseIssue {
  category: string;
  score: number;
  issues: string[];
}

class AdaptiveTest {
  private issues: ResponsiveIssue[] = [];
  private stylelintIssues: StylelintIssue[] = [];
  private lighthouseIssues: LighthouseIssue[] = [];
  private baseUrl = 'http://localhost:5000';

  // –ö—Ä–∏—Ç–∏—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  private readonly viewports = [
    { name: 'iPhone SE', width: 375, height: 667, critical: true },
    { name: 'iPhone 12', width: 390, height: 844, critical: true },
    { name: 'iPhone Mini', width: 360, height: 640, critical: true },
    { name: 'Samsung Galaxy S8', width: 360, height: 740, critical: true },
    { name: 'iPad Mini', width: 768, height: 1024, critical: false },
    { name: 'Desktop Small', width: 1024, height: 768, critical: false }
  ];

  private readonly testPages = [
    { path: '/', name: '–ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å', critical: true },
    { path: '/products', name: '–¢–æ–≤–∞—Ä—ã', critical: true },
    { path: '/documents', name: '–î–æ–∫—É–º–µ–Ω—Ç—ã', critical: true },
    { path: '/inventory', name: '–û—Å—Ç–∞—Ç–∫–∏', critical: true },
    { path: '/orders', name: '–ó–∞–∫–∞–∑—ã', critical: false },
    { path: '/suppliers', name: '–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏', critical: false },
    { path: '/contractors', name: '–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã', critical: false },
    { path: '/warehouses', name: '–°–∫–ª–∞–¥—ã', critical: false },
    { path: '/responsive-test', name: '–¢–µ—Å—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏', critical: true }
  ];

  async runStylelintCheck(): Promise<void> {
    console.log('üîç –ó–∞–ø—É—Å–∫ Stylelint –ø—Ä–æ–≤–µ—Ä–∫–∏...');
    
    try {
      const { stdout, stderr } = await exec('npx stylelint "**/*.css" "**/*.tsx" --formatter json --ignore-path .gitignore');
      
      if (stderr) {
        console.warn('‚ö†Ô∏è Stylelint –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:', stderr);
      }

      if (stdout.trim()) {
        const results = JSON.parse(stdout);
        
        results.forEach((fileResult: any) => {
          fileResult.warnings.forEach((warning: any) => {
            this.stylelintIssues.push({
              file: fileResult.source,
              line: warning.line,
              column: warning.column,
              rule: warning.rule,
              severity: warning.severity,
              text: warning.text
            });
          });
        });
      }

      console.log(`‚úÖ Stylelint –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ ${this.stylelintIssues.length} –ø—Ä–æ–±–ª–µ–º.`);
    } catch (error: any) {
      if (error.stdout) {
        try {
          const results = JSON.parse(error.stdout);
          results.forEach((fileResult: any) => {
            fileResult.warnings.forEach((warning: any) => {
              this.stylelintIssues.push({
                file: fileResult.source,
                line: warning.line,
                column: warning.column,
                rule: warning.rule,
                severity: warning.severity,
                text: warning.text
              });
            });
          });
        } catch (parseError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Stylelint —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', parseError);
        }
      }
      console.log(`‚ö†Ô∏è Stylelint –∑–∞–≤–µ—Ä—à–µ–Ω —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏. –ù–∞–π–¥–µ–Ω–æ ${this.stylelintIssues.length} –ø—Ä–æ–±–ª–µ–º.`);
    }
  }

  async runLighthouseCheck(): Promise<void> {
    console.log('üö® –ó–∞–ø—É—Å–∫ Lighthouse –∞–Ω–∞–ª–∏–∑–∞...');
    
    const chrome = await chromeLauncher.launch({ chromeFlags: ['--headless'] });
    
    try {
      const categories = ['performance', 'accessibility', 'best-practices', 'seo'];
      
      for (const category of categories) {
        const options = {
          logLevel: 'silent' as const,
          output: 'json' as const,
          onlyCategories: [category] as string[],
          port: chrome.port,
          emulatedFormFactor: 'mobile' as const,
          throttlingMethod: 'simulate' as const
        };

        const runnerResult = await lighthouse(`${this.baseUrl}/`, options);
        
        if (runnerResult && runnerResult.report) {
          const report = JSON.parse(runnerResult.report);
          const categoryResult = report.categories[category];
          
          if (categoryResult) {
            const issues: string[] = [];
            
            // –°–æ–±–∏—Ä–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ –∞—É–¥–∏—Ç—ã
            Object.values(report.audits).forEach((audit: any) => {
              if (audit.score !== null && audit.score < 0.9 && categoryResult.auditRefs.some((ref: any) => ref.id === audit.id)) {
                issues.push(`${audit.title}: ${audit.displayValue || audit.description}`);
              }
            });

            this.lighthouseIssues.push({
              category: category,
              score: Math.round(categoryResult.score * 100),
              issues: issues
            });
          }
        }
      }

      console.log(`‚úÖ Lighthouse –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π.`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ Lighthouse –∞–Ω–∞–ª–∏–∑–∞:', error);
    } finally {
      await chrome.kill();
    }
  }

  async runResponsiveTests(): Promise<void> {
    console.log('üì± –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏...');
    
    const browser = await chromium.launch();
    
    try {
      for (const viewport of this.viewports) {
        console.log(`   –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${viewport.name} (${viewport.width}x${viewport.height})`);
        
        const context = await browser.newContext({
          viewport: { width: viewport.width, height: viewport.height }
        });
        const page = await context.newPage();

        for (const testPage of this.testPages) {
          try {
            await page.goto(`${this.baseUrl}${testPage.path}`, { 
              waitUntil: 'networkidle',
              timeout: 10000 
            });

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            await this.checkHorizontalScroll(page, testPage, viewport);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            if (viewport.width < 768) {
              await this.checkMobileNavigation(page, testPage, viewport);
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
            if (testPage.path !== '/' && testPage.path !== '/responsive-test') {
              await this.checkTableResponsiveness(page, testPage, viewport);
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º
            await this.checkFormElements(page, testPage, viewport);

            // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω–æ —É–∑–∫–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤ (< 375px)
            if (viewport.width < 375) {
              await this.checkCriticalWidthIssues(page, testPage, viewport);
            }

          } catch (error) {
            this.issues.push({
              page: testPage.name,
              viewport: viewport.name,
              issue: `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${error}`,
              severity: 'critical'
            });
          }
        }

        await context.close();
      }

      console.log(`‚úÖ –¢–µ—Å—Ç—ã –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –ù–∞–π–¥–µ–Ω–æ ${this.issues.length} –ø—Ä–æ–±–ª–µ–º.`);
    } finally {
      await browser.close();
    }
  }

  private async checkHorizontalScroll(page: Page, testPage: any, viewport: any): Promise<void> {
    const bodyWidth = await page.evaluate(() => document.body.scrollWidth);
    const viewportWidth = await page.evaluate(() => window.innerWidth);
    
    if (bodyWidth > viewportWidth + 1) { // +1 –¥–ª—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏
      this.issues.push({
        page: testPage.name,
        viewport: viewport.name,
        issue: `–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞: —à–∏—Ä–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ${bodyWidth}px > —à–∏—Ä–∏–Ω–∞ —ç–∫—Ä–∞–Ω–∞ ${viewportWidth}px`,
        severity: viewport.critical ? 'critical' : 'warning'
      });
    }
  }

  private async checkMobileNavigation(page: Page, testPage: any, viewport: any): Promise<void> {
    const mobileMenuButton = page.locator('button[class*="md:hidden"]');
    
    if (!(await mobileMenuButton.isVisible())) {
      this.issues.push({
        page: testPage.name,
        viewport: viewport.name,
        issue: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–Ω–æ–ø–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –º–µ–Ω—é',
        severity: 'critical',
        element: 'navigation'
      });
    }
  }

  private async checkTableResponsiveness(page: Page, testPage: any, viewport: any): Promise<void> {
    const overflowContainer = page.locator('[class*="overflow-x-auto"]').first();
    
    if (!(await overflowContainer.isVisible())) {
      this.issues.push({
        page: testPage.name,
        viewport: viewport.name,
        issue: '–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –∏–º–µ–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å overflow-x-auto',
        severity: 'critical',
        element: 'table'
      });
      return;
    }

    const table = overflowContainer.locator('table').first();
    if (!(await table.isVisible())) {
      this.issues.push({
        page: testPage.name,
        viewport: viewport.name,
        issue: '–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤–Ω—É—Ç—Ä–∏ overflow –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞',
        severity: 'warning',
        element: 'table'
      });
    }
  }

  private async checkFormElements(page: Page, testPage: any, viewport: any): Promise<void> {
    const inputs = await page.locator('input, select, textarea').all();
    
    for (let i = 0; i < inputs.length; i++) {
      const boundingBox = await inputs[i].boundingBox();
      if (boundingBox && boundingBox.x + boundingBox.width > viewport.width) {
        this.issues.push({
          page: testPage.name,
          viewport: viewport.name,
          issue: `–ü–æ–ª–µ –≤–≤–æ–¥–∞ ${i + 1} –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —ç–∫—Ä–∞–Ω–∞`,
          severity: 'warning',
          element: 'form'
        });
      }
    }
  }

  private async checkCriticalWidthIssues(page: Page, testPage: any, viewport: any): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –Ω–µ –ø–æ–º–µ—Å—Ç–∏—Ç—å—Å—è
    const longTexts = await page.locator('text=/[–ê-–Ø–∞-—è\\s]{50,}/').all();
    for (const textElement of longTexts) {
      const boundingBox = await textElement.boundingBox();
      if (boundingBox && boundingBox.width > viewport.width * 0.9) {
        this.issues.push({
          page: testPage.name,
          viewport: viewport.name,
          issue: '–î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –º–æ–∂–µ—Ç –Ω–µ –ø–æ–º–µ—Å—Ç–∏—Ç—å—Å—è –Ω–∞ —É–∑–∫–æ–º —ç–∫—Ä–∞–Ω–µ',
          severity: 'critical',
          element: 'text'
        });
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏
    const buttons = await page.locator('button').all();
    for (let i = 0; i < buttons.length; i++) {
      const boundingBox = await buttons[i].boundingBox();
      if (boundingBox && boundingBox.width > viewport.width * 0.8) {
        this.issues.push({
          page: testPage.name,
          viewport: viewport.name,
          issue: `–ö–Ω–æ–ø–∫–∞ ${i + 1} —Å–ª–∏—à–∫–æ–º —à–∏—Ä–æ–∫–∞—è –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω–æ —É–∑–∫–æ–≥–æ —ç–∫—Ä–∞–Ω–∞`,
          severity: 'critical',
          element: 'button'
        });
      }
    }
  }

  private generateReport(): string {
    let report = '\n';
    report += '========================================\n';
    report += 'üîç –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –ê–î–ê–ü–¢–ò–í–ù–û–°–¢–ò\n';
    report += '========================================\n\n';

    // –°—É–º–º–∞—Ä–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const criticalIssues = this.issues.filter(i => i.severity === 'critical').length;
    const warningIssues = this.issues.filter(i => i.severity === 'warning').length;
    const stylelintErrors = this.stylelintIssues.filter(i => i.severity === 'error').length;
    const stylelintWarnings = this.stylelintIssues.filter(i => i.severity === 'warning').length;

    report += 'üìä –°–í–û–î–ö–ê:\n';
    report += `   –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${criticalIssues}\n`;
    report += `   –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${warningIssues}\n`;
    report += `   –û—à–∏–±–∫–∏ Stylelint: ${stylelintErrors}\n`;
    report += `   –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è Stylelint: ${stylelintWarnings}\n`;
    report += `   Lighthouse –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: ${this.lighthouseIssues.length}\n\n`;

    // –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if (criticalIssues > 0) {
      report += 'üö® –ö–†–ò–¢–ò–ß–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ –ê–î–ê–ü–¢–ò–í–ù–û–°–¢–ò:\n';
      this.issues.filter(i => i.severity === 'critical').forEach((issue, index) => {
        report += `   ${index + 1}. [${issue.viewport}] ${issue.page}\n`;
        report += `      ${issue.issue}\n`;
        if (issue.element) report += `      –≠–ª–µ–º–µ–Ω—Ç: ${issue.element}\n`;
        report += '\n';
      });
    }

    // –ü—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ —à–∏—Ä–∏–Ω–µ < 375px
    const narrowIssues = this.issues.filter(i => 
      i.viewport.includes('360') || i.viewport.includes('Galaxy')
    );
    if (narrowIssues.length > 0) {
      report += 'üì± –ü–†–û–ë–õ–ï–ú–´ –ü–†–ò –®–ò–†–ò–ù–ï < 375px:\n';
      narrowIssues.forEach((issue, index) => {
        report += `   ${index + 1}. [${issue.viewport}] ${issue.page}\n`;
        report += `      ${issue.issue}\n`;
        if (issue.element) report += `      –≠–ª–µ–º–µ–Ω—Ç: ${issue.element}\n`;
        report += '\n';
      });
    }

    // Stylelint –ø—Ä–æ–±–ª–µ–º—ã
    if (this.stylelintIssues.length > 0) {
      report += 'üé® STYLELINT –ü–†–û–ë–õ–ï–ú–´:\n';
      this.stylelintIssues.slice(0, 10).forEach((issue, index) => {
        report += `   ${index + 1}. ${path.basename(issue.file)}:${issue.line}:${issue.column}\n`;
        report += `      ${issue.text} (${issue.rule})\n\n`;
      });
      if (this.stylelintIssues.length > 10) {
        report += `   ... –∏ –µ—â–µ ${this.stylelintIssues.length - 10} –ø—Ä–æ–±–ª–µ–º\n\n`;
      }
    }

    // Lighthouse —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if (this.lighthouseIssues.length > 0) {
      report += 'üö® LIGHTHOUSE –ê–ù–ê–õ–ò–ó:\n';
      this.lighthouseIssues.forEach(category => {
        report += `   ${category.category.toUpperCase()}: ${category.score}/100\n`;
        if (category.issues.length > 0) {
          category.issues.slice(0, 3).forEach(issue => {
            report += `      - ${issue}\n`;
          });
        }
        report += '\n';
      });
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    report += 'üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n';
    if (criticalIssues > 0) {
      report += '   1. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å\n';
    }
    if (narrowIssues.length > 0) {
      report += '   2. –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —É–¥–µ–ª–∏—Ç–µ —ç–∫—Ä–∞–Ω–∞–º —à–∏—Ä–∏–Ω–æ–π < 375px\n';
    }
    if (stylelintErrors > 0) {
      report += '   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npx stylelint "**/*.css" "**/*.tsx" --fix\n';
    }
    if (this.lighthouseIssues.some(i => i.score < 80)) {
      report += '   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞\n';
    }
    
    report += '\n========================================\n';
    
    return report;
  }

  async run(): Promise<void> {
    const startTime = Date.now();
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏...\n');

    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    await Promise.allSettled([
      this.runStylelintCheck(),
      this.runLighthouseCheck(),
      this.runResponsiveTests()
    ]);

    const report = this.generateReport();
    console.log(report);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
    const reportPath = `test_results_adaptive_${new Date().toISOString().replace(/[:.]/g, '-')}.log`;
    await fs.writeFile(reportPath, report);
    console.log(`üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${reportPath}`);

    const duration = (Date.now() - startTime) / 1000;
    console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration.toFixed(1)}—Å`);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    const hasErrors = this.issues.some(i => i.severity === 'critical') || 
                      this.stylelintIssues.some(i => i.severity === 'error');
    
    if (hasErrors) {
      console.log('\n‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏');
      process.exit(1);
    } else {
      console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      process.exit(0);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const test = new AdaptiveTest();
  test.run().catch(console.error);
}

export default AdaptiveTest;