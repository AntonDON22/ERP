#!/bin/bash

# üîç –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
# –ù–∞ –æ—Å–Ω–æ–≤–µ docs/ENTERPRISE_ARCHITECTURE.md, docs/NAMING_GUIDE.md –∏ –¥—Ä—É–≥–∏—Ö —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤

echo "üèóÔ∏è –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ô –ê–£–î–ò–¢ ERP –°–ò–°–¢–ï–ú–´ - $(date)"
echo "========================================================"

VIOLATIONS=0
TOTAL_CHECKS=0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–π
count_violation() {
    local count=$1
    local description="$2"
    
    TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
    
    if [ $count -gt 0 ]; then
        VIOLATIONS=$((VIOLATIONS + count))
        echo "‚ùå $description: $count –Ω–∞—Ä—É—à–µ–Ω–∏–π"
        return $count
    else
        echo "‚úÖ $description: —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º"
        return 0
    fi
}

echo ""
echo "üìç 1. –ü–†–û–í–ï–†–ö–ê API –ú–ê–†–®–†–£–¢–û–í (shared/apiRoutes.ts)"
echo "----------------------------------------------------"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–∞—Ä–¥–∫–æ–¥–Ω—ã—Ö API –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–º –∫–æ–¥–µ
HARDCODED_API=$(grep -r '"/api/' client/src/ --include="*.ts" --include="*.tsx" 2>/dev/null | grep -v "API_ROUTES" | wc -l || echo 0)
count_violation $HARDCODED_API "–•–∞—Ä–¥–∫–æ–¥–Ω—ã–µ API –º–∞—Ä—à—Ä—É—Ç—ã –≤ –∫–ª–∏–µ–Ω—Ç–µ"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–∞—Ä–¥–∫–æ–¥–Ω—ã—Ö API –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤ hooks
HARDCODED_HOOKS=$(grep -r '"/api/' hooks/ --include="*.ts" 2>/dev/null | grep -v "API_ROUTES" | wc -l || echo 0)
count_violation $HARDCODED_HOOKS "–•–∞—Ä–¥–∫–æ–¥–Ω—ã–µ API –º–∞—Ä—à—Ä—É—Ç—ã –≤ hooks"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–∞—Ä–¥–∫–æ–¥–Ω—ã—Ö API –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–∞—Ö
HARDCODED_SERVER=$(grep -r '"/api/' server/routes/ --include="*.ts" 2>/dev/null | grep -v "API_ROUTES" | wc -l || echo 0)
count_violation $HARDCODED_SERVER "–•–∞—Ä–¥–∫–æ–¥–Ω—ã–µ API –º–∞—Ä—à—Ä—É—Ç—ã –≤ server/routes"

echo ""
echo "üîß 2. –ü–†–û–í–ï–†–ö–ê –¶–ï–ù–¢–†–ê–õ–ò–ó–û–í–ê–ù–ù–û–ô –í–ê–õ–ò–î–ê–¶–ò–ò (shared/zFields.ts)"
echo "-------------------------------------------------------------"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä—É—á–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–º–µ—Å—Ç–æ zFields
MANUAL_VALIDATION=$(grep -r 'z\.string()\.min\|z\.number()\.positive\|z\.coerce\.number()\.min' shared/ server/ 2>/dev/null | grep -v "zFields.ts" | wc -l || echo 0)
count_violation $MANUAL_VALIDATION "–†—É—á–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤–º–µ—Å—Ç–æ zFields"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è z.string() –±–µ–∑ zName
MANUAL_STRING=$(grep -r 'z\.string()' shared/schema.ts 2>/dev/null | grep -v "zName\|zPassword\|zBarcode" | wc -l || echo 0)
count_violation $MANUAL_STRING "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ z.string() –≤–º–µ—Å—Ç–æ zName"

echo ""
echo "‚öôÔ∏è 3. –ü–†–û–í–ï–†–ö–ê STATIC –ú–ï–¢–û–î–û–í –í –°–ï–†–í–ò–°–ê–•"
echo "----------------------------------------"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ-static –º–µ—Ç–æ–¥–æ–≤ –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö
NON_STATIC_METHODS=$(grep -r 'async [a-zA-Z].*(' server/services/ --include="*.ts" 2>/dev/null | grep -v "static\|constructor\|private\|protected" | wc -l || echo 0)
count_violation $NON_STATIC_METHODS "–ù–µ-static –º–µ—Ç–æ–¥—ã –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Å–µ—Ä–≤–∏—Å–æ–≤
SERVICE_INSTANCES=$(grep -r 'new.*Service(' server/ client/ --include="*.ts" --include="*.tsx" 2>/dev/null | wc -l || echo 0)
count_violation $SERVICE_INSTANCES "–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Å–µ—Ä–≤–∏—Å–æ–≤"

echo ""
echo "üö® 4. –ü–†–û–í–ï–†–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö"
echo "-------------------------------"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ catch –±–ª–æ–∫–æ–≤ –±–µ–∑ throw error
MISSING_THROW=$(grep -A 5 'catch.*{' server/services/ --include="*.ts" 2>/dev/null | grep -B 5 'console.log\|return null\|return false\|return undefined' | grep -c "catch" || echo 0)
count_violation $MISSING_THROW "Catch –±–ª–æ–∫–∏ –±–µ–∑ throw error"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è console.* –≤–º–µ—Å—Ç–æ logger
CONSOLE_USAGE=$(grep -r 'console\.' server/ --include="*.ts" 2>/dev/null | grep -v "logger" | wc -l || echo 0)
count_violation $CONSOLE_USAGE "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ console.* –≤–º–µ—Å—Ç–æ logger"

echo ""
echo "üìù 5. –ü–†–û–í–ï–†–ö–ê –¢–ò–ü–ò–ó–ê–¶–ò–ò"
echo "------------------------"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–∏–ø–∞ any
ANY_USAGE=$(grep -r ': any\|<any>\|as any' server/ client/ shared/ --include="*.ts" --include="*.tsx" 2>/dev/null | grep -v "// @ts-ignore\|eslint-disable" | wc -l || echo 0)
count_violation $ANY_USAGE "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ any"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ @ts-ignore
TS_IGNORE=$(grep -r '@ts-ignore' server/ client/ shared/ --include="*.ts" --include="*.tsx" 2>/dev/null | wc -l || echo 0)
count_violation $TS_IGNORE "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ @ts-ignore"

echo ""
echo "üè∑Ô∏è 6. –ü–†–û–í–ï–†–ö–ê –°–¢–ê–ù–î–ê–†–¢–û–í –ò–ú–ï–ù–û–í–ê–ù–ò–Ø"
echo "------------------------------------"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ snake_case –≤ API –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å camelCase)
SNAKE_IN_API=$(grep -r 'interface.*{' shared/ client/ --include="*.ts" 2>/dev/null -A 20 | grep -E '[a-z_]+:' | grep '_' | wc -l || echo 0)
count_violation $SNAKE_IN_API "snake_case –≤ API –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ camelCase –≤ SQL —Å—Ö–µ–º–∞—Ö (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å snake_case)  
CAMEL_IN_SQL=$(grep -r 'varchar\|integer\|decimal\|boolean' shared/schema.ts 2>/dev/null | grep -E '[a-z][A-Z]' | wc -l || echo 0)
count_violation $CAMEL_IN_SQL "camelCase –≤ SQL —Å—Ö–µ–º–∞—Ö"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—É–ª–µ–≤—ã—Ö –ø–æ–ª–µ–π –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ is/has/can
BOOLEAN_NO_PREFIX=$(grep -r ': boolean' shared/ --include="*.ts" 2>/dev/null | grep -v -E '(is|has|can)[A-Z]' | wc -l || echo 0)
count_violation $BOOLEAN_NO_PREFIX "–ë—É–ª–µ–≤—ã –ø–æ–ª—è –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ is/has/can"

echo ""
echo "üß™ 7. –ü–†–û–í–ï–†–ö–ê –¢–ï–°–¢–û–í–û–ì–û –ü–û–ö–†–´–¢–ò–Ø"
echo "---------------------------------"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤
SERVICES_COUNT=$(find server/services/ -name "*.ts" 2>/dev/null | grep -v ".test.ts" | wc -l || echo 0)
TESTS_COUNT=$(find tests/ -name "*service*.test.ts" 2>/dev/null | wc -l || echo 0)
MISSING_TESTS=$((SERVICES_COUNT > TESTS_COUNT ? SERVICES_COUNT - TESTS_COUNT : 0))
count_violation $MISSING_TESTS "–°–µ—Ä–≤–∏—Å—ã –±–µ–∑ —Ç–µ—Å—Ç–æ–≤"

echo ""
echo "‚ö° 8. –ü–†–û–í–ï–†–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò"
echo "--------------------------------"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑ –º–µ–º–æ–∏–∑–∞—Ü–∏–∏
UNMEMOIZED_COMPONENTS=$(grep -r 'const.*= .*{' client/src/ --include="*.tsx" 2>/dev/null | grep -v "React.memo\|useMemo\|useCallback" | wc -l || echo 0)
count_violation $UNMEMOIZED_COMPONENTS "React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–µ–∑ –º–µ–º–æ–∏–∑–∞—Ü–∏–∏"

echo ""
echo "üîí 9. –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò"
echo "---------------------------"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints –±–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
ROUTES_COUNT=$(grep -r 'router\.\(get\|post\|put\|delete\)' server/routes/ --include="*.ts" 2>/dev/null | wc -l || echo 0)
VALIDATED_ROUTES=$(grep -r 'validateSchema\|validation' server/routes/ --include="*.ts" 2>/dev/null | wc -l || echo 0)
UNVALIDATED_ROUTES=$((ROUTES_COUNT > VALIDATED_ROUTES ? ROUTES_COUNT - VALIDATED_ROUTES : 0))
count_violation $UNVALIDATED_ROUTES "API endpoints –±–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"

echo ""
echo "üìä 10. –ü–†–û–í–ï–†–ö–ê –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò"
echo "----------------------------"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
REQUIRED_DOCS=("docs/ENTERPRISE_ARCHITECTURE.md" "docs/DEVELOPMENT_STANDARDS.md" "docs/CODE_REVIEW_GUIDE.md" "docs/SECURITY_PERFORMANCE_GUIDE.md" "docs/NAMING_GUIDE.md" "docs/README.md")
MISSING_DOCS=0

for doc in "${REQUIRED_DOCS[@]}"; do
    if [ ! -f "$doc" ]; then
        MISSING_DOCS=$((MISSING_DOCS + 1))
        echo "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç: $doc"
    fi
done

count_violation $MISSING_DOCS "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"

echo ""
echo "========================================================"
echo "üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–£–î–ò–¢–ê"
echo "========================================================"

if [ $TOTAL_CHECKS -gt 0 ]; then
    COMPLIANCE_RATE=$(echo "scale=2; (($TOTAL_CHECKS - $VIOLATIONS) * 100) / $TOTAL_CHECKS" | bc -l 2>/dev/null || echo "0")
else
    COMPLIANCE_RATE="100"
fi

echo "–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: $TOTAL_CHECKS"
echo "–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è: $VIOLATIONS"
echo "–£—Ä–æ–≤–µ–Ω—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: ${COMPLIANCE_RATE}%"

if [ $VIOLATIONS -eq 0 ]; then
    echo ""
    echo "üéâ –û–¢–õ–ò–ß–ù–û! –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º"
    echo "‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
    exit 0
elif [ $VIOLATIONS -le 5 ]; then
    echo ""
    echo "‚ö†Ô∏è –•–û–†–û–®–û. –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è"
    echo "üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"
    exit 1
elif [ $VIOLATIONS -le 15 ]; then
    echo ""
    echo "üîß –¢–†–ï–ë–£–ï–¢–°–Ø –£–õ–£–ß–®–ï–ù–ò–ï. –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è"
    echo "‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º"
    exit 2
else
    echo ""
    echo "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò. –°–∏—Å—Ç–µ–º–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤"
    echo "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∞—Å—à—Ç–∞–±–Ω—ã–π —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"
    exit 3
fi