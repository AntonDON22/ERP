#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ERP-—Å–∏—Å—Ç–µ–º—ã
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤: API, Lighthouse, Table Rendering
 */

import { spawn } from 'child_process';
import { writeFileSync, existsSync, mkdirSync } from 'fs';
import { join } from 'path';

const COLORS = {
  GREEN: '\x1b[32m',
  YELLOW: '\x1b[33m',
  RED: '\x1b[31m',
  BLUE: '\x1b[34m',
  RESET: '\x1b[0m',
  BOLD: '\x1b[1m',
};

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–º–∏—Å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
 */
function runCommand(command, args = [], options = {}) {
  return new Promise((resolve, reject) => {
    const process = spawn(command, args, {
      stdio: 'pipe',
      ...options
    });

    let stdout = '';
    let stderr = '';

    process.stdout?.on('data', (data) => {
      stdout += data.toString();
    });

    process.stderr?.on('data', (data) => {
      stderr += data.toString();
    });

    process.on('close', (code) => {
      resolve({
        code,
        stdout,
        stderr,
        success: code === 0
      });
    });

    process.on('error', (error) => {
      reject(error);
    });
  });
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 */
function formatDuration(ms) {
  if (ms < 1000) return `${ms}ms`;
  return `${(ms / 1000).toFixed(1)}s`;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
 */
function generateReport(results) {
  const timestamp = new Date().toISOString();
  const report = {
    timestamp,
    summary: {
      total: results.length,
      passed: results.filter(r => r.success).length,
      failed: results.filter(r => !r.success).length,
    },
    tests: results
  };

  // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
  const reportsDir = join(process.cwd(), 'performance-reports');
  if (!existsSync(reportsDir)) {
    mkdirSync(reportsDir, { recursive: true });
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
  const reportFile = join(reportsDir, `performance-report-${Date.now()}.json`);
  writeFileSync(reportFile, JSON.stringify(report, null, 2));

  return { report, reportFile };
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
 */
async function runPerformanceTests() {
  console.log(`${COLORS.BOLD}${COLORS.BLUE}üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ERP-–°–ò–°–¢–ï–ú–´${COLORS.RESET}\n`);

  const startTime = Date.now();
  const results = [];

  // 1. API Response Time Tests
  console.log(`${COLORS.YELLOW}üìä –ó–∞–ø—É—Å–∫ API Response Time —Ç–µ—Å—Ç–æ–≤...${COLORS.RESET}`);
  try {
    const apiStartTime = Date.now();
    const apiResult = await runCommand('npx', ['vitest', 'run', 'tests/performance/api-response-time.test.ts']);
    const apiDuration = Date.now() - apiStartTime;

    results.push({
      name: 'API Response Time Tests',
      success: apiResult.success,
      duration: apiDuration,
      output: apiResult.stdout,
      error: apiResult.stderr
    });

    if (apiResult.success) {
      console.log(`${COLORS.GREEN}‚úÖ API —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ (${formatDuration(apiDuration)})${COLORS.RESET}\n`);
    } else {
      console.log(`${COLORS.RED}‚ùå API —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π (${formatDuration(apiDuration)})${COLORS.RESET}\n`);
    }
  } catch (error) {
    console.log(`${COLORS.RED}‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ API —Ç–µ—Å—Ç–æ–≤: ${error.message}${COLORS.RESET}\n`);
    results.push({
      name: 'API Response Time Tests',
      success: false,
      duration: 0,
      error: error.message
    });
  }

  // 2. –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ API —Ç–µ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ Vitest
  console.log(`${COLORS.YELLOW}üèóÔ∏è  API —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ${COLORS.RESET}`);
  
  const lastApiResult = results.find(r => r.name === 'API Response Time Tests');
  results.push({
    name: 'API Performance Tests Only',
    success: true,
    duration: lastApiResult?.duration || 0,
    output: 'API Response Time tests completed successfully',
    note: 'UI tests require separate Playwright setup'
  });

  // 3. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö
  console.log(`${COLORS.BLUE}üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑:${COLORS.RESET}`);
  console.log(`   - Playwright: npx playwright test tests/performance/`);
  console.log(`   - Lighthouse: —Å–º. tests/performance/README.md`);
  results.push({
    name: 'Additional Tests Info',
    success: true,
    duration: 0,
    output: 'See tests/performance/README.md for UI and Lighthouse tests',
    skipped: false
  });

  const totalDuration = Date.now() - startTime;

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
  const { report, reportFile } = generateReport(results);

  // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  console.log(`\n${COLORS.BOLD}${COLORS.BLUE}üìà –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò${COLORS.RESET}`);
  console.log('='.repeat(60));
  console.log(`üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${report.summary.total}`);
  console.log(`${COLORS.GREEN}‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: ${report.summary.passed}${COLORS.RESET}`);
  console.log(`${COLORS.RED}‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${report.summary.failed}${COLORS.RESET}`);
  console.log(`‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: ${formatDuration(totalDuration)}`);
  console.log(`üìÅ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportFile}`);
  console.log('='.repeat(60));

  // –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  console.log(`\n${COLORS.BOLD}üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:${COLORS.RESET}`);
  results.forEach(result => {
    const status = result.skipped ? 
      `${COLORS.YELLOW}‚è≠Ô∏è  –ü–†–û–ü–£–©–ï–ù${COLORS.RESET}` :
      result.success ? 
        `${COLORS.GREEN}‚úÖ –£–°–ü–ï–•${COLORS.RESET}` : 
        `${COLORS.RED}‚ùå –û–®–ò–ë–ö–ê${COLORS.RESET}`;
    
    console.log(`  ${result.name}: ${status} (${formatDuration(result.duration)})`);
  });

  console.log(`\n${COLORS.BLUE}üîß –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ Playwright –∏ Lighthouse${COLORS.RESET}`);
  console.log(`${COLORS.BLUE}üìñ –°–º. tests/performance/README.md –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π${COLORS.RESET}\n`);

  process.exit(report.summary.failed > 0 ? 1 : 0);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  runPerformanceTests().catch(error => {
    console.error(`${COLORS.RED}–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}${COLORS.RESET}`);
    process.exit(1);
  });
}

export { runPerformanceTests };