/**
 * üö¢ API –•–£–ö–ò –î–õ–Ø –û–¢–ì–†–£–ó–û–ö
 * 
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ö—É–∫–∏ –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –æ—Ç–≥—Ä—É–∑–∫–∞–º–∏
 */

import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { API_ROUTES } from "@shared/apiRoutes";
import type {
  Shipment,
  CreateShipmentRequest,
  InsertShipment,
} from "@shared/schema";

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–≥—Ä—É–∑–æ–∫
export function useShipments() {
  return useQuery<Shipment[]>({
    queryKey: [API_ROUTES.SHIPMENTS.LIST],
    staleTime: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
    gcTime: 10 * 60 * 1000, // 10 –º–∏–Ω—É—Ç
  });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–π –æ—Ç–≥—Ä—É–∑–∫–∏
export function useShipment(id: number) {
  return useQuery<Shipment>({
    queryKey: [API_ROUTES.SHIPMENTS.LIST, id],
    enabled: !!id,
    staleTime: 5 * 60 * 1000,
  });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≥—Ä—É–∑–∫–∏
export function useCreateShipment() {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async (data: CreateShipmentRequest) => {
      return await apiRequest(API_ROUTES.SHIPMENTS.CREATE, {
        method: "POST",
        body: JSON.stringify(data),
        headers: { "Content-Type": "application/json" },
      });
    },
    onSuccess: () => {
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –æ—Ç–≥—Ä—É–∑–æ–∫
      queryClient.invalidateQueries({
        queryKey: [API_ROUTES.SHIPMENTS.LIST],
      });
      
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –æ—Å—Ç–∞—Ç–∫–æ–≤ (–æ—Ç–≥—Ä—É–∑–∫–∏ –≤–ª–∏—è—é—Ç –Ω–∞ –æ—Å—Ç–∞—Ç–∫–∏)
      queryClient.invalidateQueries({
        queryKey: [API_ROUTES.INVENTORY.LIST],
      });
      queryClient.invalidateQueries({
        queryKey: [API_ROUTES.INVENTORY.AVAILABILITY],
      });
    },
  });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–≥—Ä—É–∑–∫–∏
export function useUpdateShipment() {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async ({ id, data }: { id: number; data: Partial<InsertShipment> }) => {
      return await apiRequest(API_ROUTES.SHIPMENTS.UPDATE.replace(":id", id.toString()), {
        method: "PUT",
        body: JSON.stringify(data),
        headers: { "Content-Type": "application/json" },
      });
    },
    onSuccess: (_, { id }) => {
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ—Ç–≥—Ä—É–∑–∫—É
      queryClient.invalidateQueries({
        queryKey: [API_ROUTES.SHIPMENTS.LIST, id],
      });
      
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–≥—Ä—É–∑–æ–∫
      queryClient.invalidateQueries({
        queryKey: [API_ROUTES.SHIPMENTS.LIST],
      });
      
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –æ—Å—Ç–∞—Ç–∫–æ–≤
      queryClient.invalidateQueries({
        queryKey: [API_ROUTES.INVENTORY.LIST],
      });
      queryClient.invalidateQueries({
        queryKey: [API_ROUTES.INVENTORY.AVAILABILITY],
      });
    },
  });
}

// –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–≥—Ä—É–∑–∫–∏
export function useDeleteShipment() {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async (id: number) => {
      return await apiRequest(API_ROUTES.SHIPMENTS.DELETE.replace(":id", id.toString()), {
        method: "DELETE",
      });
    },
    onSuccess: () => {
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –æ—Ç–≥—Ä—É–∑–æ–∫
      queryClient.invalidateQueries({
        queryKey: [API_ROUTES.SHIPMENTS.LIST],
      });
      
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –æ—Å—Ç–∞—Ç–∫–æ–≤
      queryClient.invalidateQueries({
        queryKey: [API_ROUTES.INVENTORY.LIST],
      });
      queryClient.invalidateQueries({
        queryKey: [API_ROUTES.INVENTORY.AVAILABILITY],
      });
    },
  });
}

// –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–≥—Ä—É–∑–æ–∫
export function useDeleteShipments() {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async (ids: number[]) => {
      return await apiRequest(API_ROUTES.SHIPMENTS.DELETE_MULTIPLE, {
        method: "POST",
        body: JSON.stringify({ ids }),
        headers: { "Content-Type": "application/json" },
      });
    },
    onSuccess: () => {
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –æ—Ç–≥—Ä—É–∑–æ–∫
      queryClient.invalidateQueries({
        queryKey: [API_ROUTES.SHIPMENTS.LIST],
      });
      
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –æ—Å—Ç–∞—Ç–∫–æ–≤
      queryClient.invalidateQueries({
        queryKey: [API_ROUTES.INVENTORY.LIST],
      });
      queryClient.invalidateQueries({
        queryKey: [API_ROUTES.INVENTORY.AVAILABILITY],
      });
    },
  });
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
export function useExportShipments() {
  return useMutation({
    mutationFn: async () => {
      const response = await fetch(API_ROUTES.SHIPMENTS.EXPORT);
      if (!response.ok) {
        throw new Error("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç–≥—Ä—É–∑–æ–∫");
      }
      return response.blob();
    },
  });
}

// –ò–º–ø–æ—Ä—Ç –∏–∑ Excel
export function useImportShipments() {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async (file: File) => {
      const formData = new FormData();
      formData.append("file", file);

      return await apiRequest(API_ROUTES.SHIPMENTS.IMPORT, {
        method: "POST",
        body: formData,
      });
    },
    onSuccess: () => {
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –æ—Ç–≥—Ä—É–∑–æ–∫ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞
      queryClient.invalidateQueries({
        queryKey: [API_ROUTES.SHIPMENTS.LIST],
      });
      
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –æ—Å—Ç–∞—Ç–∫–æ–≤
      queryClient.invalidateQueries({
        queryKey: [API_ROUTES.INVENTORY.LIST],
      });
      queryClient.invalidateQueries({
        queryKey: [API_ROUTES.INVENTORY.AVAILABILITY],
      });
    },
  });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–≥—Ä—É–∑–æ–∫
export function useShipmentStats() {
  return useQuery({
    queryKey: [API_ROUTES.SHIPMENTS.LIST, "stats"],
    queryFn: async () => {
      const shipments = await apiRequest(API_ROUTES.SHIPMENTS.LIST);
      
      return {
        total: shipments.length,
        draft: shipments.filter((s: Shipment) => s.status === "draft").length,
        shipped: shipments.filter((s: Shipment) => s.status === "shipped").length,
        delivered: shipments.filter((s: Shipment) => s.status === "delivered").length,
      };
    },
    staleTime: 2 * 60 * 1000, // 2 –º–∏–Ω—É—Ç—ã
  });
}