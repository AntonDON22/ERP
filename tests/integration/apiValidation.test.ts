/**
 * üß™ –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã API –æ—Ç–≤–µ—Ç–æ–≤
 * 
 * –í–∞–ª–∏–¥–∞—Ü–∏—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª–µ–π API —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó:
 * - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–æ–ª–µ–π (id, name, quantity, reserved, available)
 * - –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–ª–µ–π –ë–î (product_id, product_name, total_quantity –∏ —Ç.–¥.)
 */

import { describe, it, expect } from 'vitest';
import { validateApiResponse } from '@shared/apiNormalizer';

describe('API Response Validation', () => {
  
  describe('GET /api/inventory/availability', () => {
    it('should return only normalized API fields', async () => {
      const response = await fetch('http://localhost:5000/api/inventory/availability');
      expect(response.ok).toBe(true);
      
      const data = await response.json();
      expect(Array.isArray(data)).toBe(true);
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é API
      validateApiResponse(data);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      for (const item of data) {
        expect(item).toHaveProperty('id');
        expect(item).toHaveProperty('name');
        expect(item).toHaveProperty('quantity');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        expect(typeof item.id).toBe('number');
        expect(typeof item.name).toBe('string');
        expect(typeof item.quantity).toBe('number');
        
        // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        if (item.hasOwnProperty('reserved')) {
          expect(typeof item.reserved).toBe('number');
        }
        if (item.hasOwnProperty('available')) {
          expect(typeof item.available).toBe('number');
        }
        
        // –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –ø–æ–ª—è –ë–î –Ω–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
        expect(item).not.toHaveProperty('product_id');
        expect(item).not.toHaveProperty('product_name');
        expect(item).not.toHaveProperty('total_quantity');
        expect(item).not.toHaveProperty('reserved_quantity');
        expect(item).not.toHaveProperty('available_quantity');
      }
    });
  });

  describe('GET /api/inventory', () => {
    it('should return only normalized API fields', async () => {
      const response = await fetch('http://localhost:5000/api/inventory');
      expect(response.ok).toBe(true);
      
      const data = await response.json();
      expect(Array.isArray(data)).toBe(true);
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é API
      validateApiResponse(data);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
      for (const item of data) {
        expect(item).toHaveProperty('id');
        expect(item).toHaveProperty('name');
        expect(item).toHaveProperty('quantity');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        expect(typeof item.id).toBe('number');
        expect(typeof item.name).toBe('string');
        expect(typeof item.quantity).toBe('number');
        
        // –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –ø–æ–ª—è –ë–î –Ω–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
        expect(item).not.toHaveProperty('product_id');
        expect(item).not.toHaveProperty('product_name');
        expect(item).not.toHaveProperty('total_quantity');
      }
    });
  });

  describe('API Response Format Consistency', () => {
    it('should maintain consistent field names across all inventory endpoints', async () => {
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ endpoints –Ω–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å
      const endpoints = [
        '/api/inventory',
        '/api/inventory/availability'
      ];
      
      for (const endpoint of endpoints) {
        const response = await fetch(`http://localhost:5000${endpoint}`);
        expect(response.ok).toBe(true);
        
        const data = await response.json();
        
        if (data.length > 0) {
          const item = data[0];
          
          // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–µ–∑–¥–µ
          expect(item).toHaveProperty('id');
          expect(item).toHaveProperty('name');
          expect(item).toHaveProperty('quantity');
          
          // ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º
          expect(typeof item.id).toBe('number');
          expect(item.id).toBeGreaterThan(0);
          
          // Name –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π
          expect(typeof item.name).toBe('string');
          expect(item.name.length).toBeGreaterThan(0);
          
          // Quantity –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º
          expect(typeof item.quantity).toBe('number');
          expect(item.quantity).toBeGreaterThanOrEqual(0);
        }
      }
    });
    
    it('should reject responses with forbidden database fields', () => {
      // –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      const invalidData = [
        {
          id: 1,
          name: 'Test Product',
          quantity: 10,
          product_id: 1, // –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ –ø–æ–ª–µ –ë–î
        },
        {
          id: 2,
          name: 'Test Product 2',
          quantity: 5,
          product_name: 'Another Name', // –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ –ø–æ–ª–µ –ë–î
        }
      ];
      
      expect(() => validateApiResponse(invalidData)).toThrow(/–∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ –ø–æ–ª–µ/);
    });
    
    it('should reject responses without required fields', () => {
      // –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏
      const invalidData = [
        {
          // –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç id
          name: 'Test Product',
          quantity: 10,
        },
        {
          id: 2,
          // –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç name
          quantity: 5,
        }
      ];
      
      expect(() => validateApiResponse(invalidData)).toThrow(/–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ/);
    });
  });
});