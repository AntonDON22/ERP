import { dbLogger, getErrorMessage } from "@shared/logger";

/**
 * üèóÔ∏è –ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ—Ö Storage –æ–ø–µ—Ä–∞—Ü–∏–π
 * –£–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 */
export interface BaseStorageInterface<T, InsertT> {
  getAll(): Promise<T[]>;
  getById(id: number): Promise<T | undefined>;
  create(data: InsertT): Promise<T>;
  update(id: number, data: Partial<InsertT>): Promise<T | undefined>;
  delete(id: number): Promise<boolean>;
  deleteMultiple?(ids: number[]): Promise<boolean>;
}

/**
 * üîß –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è Storage —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—â—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
 */
export abstract class BaseStorage<T, InsertT> implements BaseStorageInterface<T, InsertT> {
  protected readonly entityName: string;

  constructor(entityName: string) {
    this.entityName = entityName;
  }

  /**
   * –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  protected async executeWithLogging<R>(
    operationName: string,
    operation: () => Promise<R>
  ): Promise<R> {
    const endOperation = dbLogger.startOperation(`${operationName}${this.entityName}`);
    try {
      const result = await operation();
      endOperation();
      return result;
    } catch (error) {
      dbLogger.error(`Error in ${operationName}${this.entityName}`, {
        error: getErrorMessage(error),
      });
      endOperation();
      throw error;
    }
  }

  // –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö
  abstract getAll(): Promise<T[]>;
  abstract getById(id: number): Promise<T | undefined>;
  abstract create(data: InsertT): Promise<T>;
  abstract update(id: number, data: Partial<InsertT>): Promise<T | undefined>;
  abstract delete(id: number): Promise<boolean>;

  /**
   * –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
   * –ú–æ–∂–µ—Ç –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
   */
  async deleteMultiple(ids: number[]): Promise<boolean> {
    try {
      const results = await Promise.all(ids.map((id) => this.delete(id)));
      return results.every((result) => result === true);
    } catch (error) {
      dbLogger.error(`Error in deleteMultiple${this.entityName}`, {
        error: getErrorMessage(error),
        ids,
      });
      return false;
    }
  }
}

/**
 * üéØ –¢–∏–ø—ã –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ API
 */
export interface StorageOperationResult<T> {
  success: boolean;
  data?: T;
  message?: string;
}

export interface PaginationParams {
  limit?: number;
  offset?: number;
  sortBy?: string;
  sortOrder?: "asc" | "desc";
}

export interface PaginatedResult<T> {
  items: T[];
  total: number;
  hasMore: boolean;
  pagination: Required<PaginationParams>;
}

/**
 * üìä –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
 */
export class DataCleaningUtils {
  /**
   * –û—á–∏—Å—Ç–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –æ—Ç —Å–∏–º–≤–æ–ª–æ–≤ –≤–∞–ª—é—Ç—ã –∏ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
   */
  static cleanNumericValue(value: string | null | undefined): string | null {
    if (!value || value === "") return null;

    const cleaned = String(value)
      .replace(/[^\d.,]/g, "") // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä, —Ç–æ—á–µ–∫ –∏ –∑–∞–ø—è—Ç—ã—Ö
      .replace(",", ".") // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏
      .trim();

    return cleaned || null;
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
   */
  static cleanStringValue(value: string | null | undefined): string | null {
    if (!value || value === "") return null;
    return String(value).trim() || null;
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ SKU
   */
  static cleanSKU(sku: string | null | undefined): string | null {
    if (!sku || sku === "") return null;
    return (
      String(sku)
        .toUpperCase()
        .replace(/[^A-Z0-9-_]/g, "")
        .trim() || null
    );
  }
}

/**
 * üîí –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π
 */
export const STORAGE_CONSTANTS = {
  DEFAULT_PAGE_SIZE: 50,
  MAX_PAGE_SIZE: 1000,
  BATCH_SIZE: 100,
  CACHE_TTL: {
    SHORT: 60, // 1 –º–∏–Ω—É—Ç–∞ –¥–ª—è –∏–∑–º–µ–Ω—á–∏–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    MEDIUM: 300, // 5 –º–∏–Ω—É—Ç –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    LONG: 3600, // 1 —á–∞—Å –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
  },
} as const;
