Тема: Стандартизация использования схем валидации через zFields.ts

⸻

Цель:

Создать архитектурное правило и систему контроля, при которой все схемы валидации (цены, количества, процентов, размеров и др.) используются строго через центральный модуль zFields.ts. Запретить произвольное написание схем вне этого модуля и обеспечить консистентную валидацию на всех уровнях: вход, запись в базу, вывод в API.

⸻

Задачи:

⸻

1. Зафиксировать архитектурное правило:

В проекте должно использоваться только централизованное определение полей схем через файл shared/zFields.ts.
Любая схема, связанная с:

– числом
– строкой
– ценой
– количеством
– процентом
– весом
– размерами
должна быть определена один раз в zFields.ts и импортироваться в любые схемы: insert, input, output.

⸻

2. Обновить README документацию по схемам

В папке shared/ или в корне проекта создать файл SCHEMA_GUIDE.md (или README в shared/), в котором:

– Описать назначение файла zFields.ts
– Привести список всех стандартных полей и их описания
– Объяснить, как использовать эти поля в insertSchema, inputSchema, outputSchema
– Запретить писать свои .string() и .number() правила напрямую в схемах

⸻

3. Добавить автоматический тест для zFields.ts

Создать файл tests/zFields/zFieldsValidation.test.ts с тестами, которые:

– Проверяют, что каждое поле (например, zPriceString, zQuantityInteger) правильно валидирует и трансформирует
– Проверяют, что при передаче неправильного типа (например, строка в zQuantityInteger) схема выбрасывает ошибку
– Покрывают типичные случаи: пустая строка, null, undefined, число, строка с пробелами и т.д.

⸻

4. Добавить комментарии в проблемные схемы (например, insertOrderItemSchema)

В местах, где ранее происходила путаница (например, orderItem), вверху схемы вставить текстовый комментарий:

– “Данная схема использует поля из zFields.ts. Не изменяйте вручную правила валидации — только через zFields.”

⸻

5. Запретить прямое использование insertSchema в контроллерах

В каждом маршруте, который принимает данные от клиента, использовать только input-схемы (если они есть) или input-поля из zFields.ts.
Insert-схемы можно применять только после предварительной валидации, перед записью в базу данных.

⸻

Результат:

– Все поля схем централизованы и управляются в одном месте
– Новые разработчики используют zFields по шаблону
– Исключаются ошибки, при которых API ожидает строки, а фронтенд отправляет числа
– Структура insert/input/output-схем может сохраняться, но без лишней дубликации логики
– Ошибки с orderItemSchema и orderItemInsertSchema больше не повторяются

⸻

Проверка выполнения:

– README с правилами существует и понятен
– Все insert и input схемы используют только zFields
– Все API маршруты используют корректную схему
– Все zod-схемы проверены тестами
– Новые поля (например, zTaxPercent) добавляются строго через zFields

⸻

Вывод:

Система становится защищённой от повторяющихся проблем валидации. Поддержка схем и расширение проекта ускоряется и стандартизируется. Команда работает в едином стиле, что снижает вероятность критических ошибок при масштабировании.