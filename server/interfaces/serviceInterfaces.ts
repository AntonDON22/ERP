/**
 * üîß –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤ ERP —Å–∏—Å—Ç–µ–º—ã
 * 
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –µ–¥–∏–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç type safety –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—É—é —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å
 */

import { z } from "zod";

/**
 * üìã –ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π —Å–∏—Å—Ç–µ–º—ã
 */
export interface BaseEntity {
  id: number;
  createdAt?: string;
  updatedAt?: string;
}

/**
 * üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
 */
export interface BatchDeleteResult {
  deletedCount: number;
  results: Array<{
    id: number;
    status: "deleted" | "not_found" | "error";
    error?: string;
  }>;
}

/**
 * üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –∏–º–ø–æ—Ä—Ç–∞
 */
export interface ImportResult<T> {
  successCount: number;
  errorCount: number;
  results: T[];
  errors: Array<{
    row: number;
    data: any;
    error: string;
  }>;
}

/**
 * üéØ –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
 */
export interface SearchParams {
  query?: string;
  limit?: number;
  offset?: number;
  sortBy?: string;
  sortOrder?: "asc" | "desc";
  filters?: Record<string, any>;
}

/**
 * üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
 */
export interface OperationStats {
  entity: string;
  operation: string;
  duration: number;
  success: boolean;
  timestamp: string;
  metadata?: Record<string, any>;
}

/**
 * üèóÔ∏è –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π
 */
export interface ICRUDService<T extends BaseEntity, InsertT, UpdateT = Partial<InsertT>> {
  // –û—Å–Ω–æ–≤–Ω—ã–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏
  getAll(): Promise<T[]>;
  getById(id: number): Promise<T | undefined>;
  create(data: InsertT): Promise<T>;
  update(id: number, data: UpdateT): Promise<T | undefined>;
  delete(id: number): Promise<boolean>;
  
  // Batch –æ–ø–µ—Ä–∞—Ü–∏–∏
  deleteMultiple(ids: number[]): Promise<BatchDeleteResult>;
  
  // –ò–º–ø–æ—Ä—Ç/—ç–∫—Å–ø–æ—Ä—Ç
  import(data: any[]): Promise<ImportResult<T>>;
}