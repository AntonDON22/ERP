import {
  insertDocumentSchema,
  insertDocumentItemSchema,
  type InsertDocument,
  type DocumentRecord,
  type CreateDocumentItem,
} from "../../shared/schema";
import { z } from "zod";
import { zDocumentName, zId } from "../../shared/zFields";
import { transactionService } from "./transactionService";
import { getMoscowDateForDocument } from "../../shared/timeUtils";
import { logger, apiLogger } from "../../shared/logger";
import { toNumber } from "@shared/utils";
import { BaseService } from "./baseService";

// –°–æ–≤–º–µ—Å—Ç–∏–º–∞—è —Å—Ö–µ–º–∞ –¥–ª—è DocumentService –±–µ–∑ optional –ø–æ–ª–µ–π
const documentServiceInsertSchema = z.object({
  name: z.string().min(0).max(255, "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 255 —Å–∏–º–≤–æ–ª–æ–≤").trim(),
  type: z.enum(["income", "outcome", "return"], {
    errorMap: () => ({ message: "–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'income', 'outcome' –∏–ª–∏ 'return'" }),
  }),
  status: z.enum(["draft", "posted"], {
    errorMap: () => ({ message: "–°—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'draft' –∏–ª–∏ 'posted'" }),
  }),
  warehouseId: zId.optional(),
});

export class DocumentService extends BaseService<DocumentRecord, InsertDocument> {
  protected entityName = "Document";
  protected pluralName = "Documents";
  protected storageMethodPrefix = "Document";
  protected insertSchema = documentServiceInsertSchema as any;
  protected updateSchema = documentServiceInsertSchema.partial();

  protected async validateImportData(data: unknown): Promise<InsertDocument> {
    return insertDocumentSchema.parse(data);
  }

  // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ update –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ–∑–∏—Ü–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  async update(
    id: number,
    data: Partial<InsertDocument>,
    items?: Array<{ productId: number; quantity: string | number }>
  ): Promise<DocumentRecord | undefined> {
    const validatedData = this.updateSchema.parse(data);
    logger.info('üîç DocumentService.update validatedData:', { validatedData });

    if (items && items.length > 0) {
      const processedItems = items.map(item => ({
        productId: item.productId,
        quantity: toNumber(item.quantity),
      }));

      return await transactionService.updateDocumentWithInventory(id, validatedData, processedItems);
    } else {
      return await super.update(id, validatedData);
    }
  }

  // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ delete –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
  async delete(id: number): Promise<boolean> {
    return await transactionService.deleteDocumentWithInventory(id);
  }

  // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ deleteMultiple –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
  async deleteMultiple(
    ids: number[]
  ): Promise<{ deletedCount: number; results: Array<{ id: number; status: string }> }> {
    if (!Array.isArray(ids) || ids.length === 0) {
      throw new Error("–£–∫–∞–∂–∏—Ç–µ –º–∞—Å—Å–∏–≤ ID –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è");
    }

    const validIds = ids.filter((id) => Number.isInteger(id) && id > 0);
    if (validIds.length !== ids.length) {
      throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤");
    }

    let deletedCount = 0;
    const results = [];

    for (const id of validIds) {
      try {
        const success = await transactionService.deleteDocumentWithInventory(id);
        if (success) {
          deletedCount++;
          results.push({ id, status: "deleted" });
        } else {
          results.push({ id, status: "not_found" });
        }
      } catch (error) {
        logger.error(`Error deleting document ${id}`, {
          documentId: id,
          error: error instanceof Error ? error.message : String(error),
        });
        results.push({ id, status: "error" });
        throw error;
      }
    }

    return { deletedCount, results };
  }

  async createReceipt(
    documentData: InsertDocument,
    items: CreateDocumentItem[]
  ): Promise<DocumentRecord> {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
    const validatedDocument = insertDocumentSchema.parse(documentData);

    // –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–∏–ø–æ–º
    if (!validatedDocument.name || validatedDocument.name.trim().length === 0) {
      validatedDocument.name = this.generateDocumentName(validatedDocument.type);
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π
    const validatedItems = items.map((item) => insertDocumentItemSchema.parse(item));

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª–Ω–æ–π —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
    return await transactionService.createDocumentWithInventory(validatedDocument, validatedItems);
  }

  private getDocumentTypeName(type: string): string {
    const typeNames = {
      income: "–û–ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω–∏–µ",
      outcome: "–°–ø–∏—Å–∞–Ω–∏–µ",
      return: "–í–æ–∑–≤—Ä–∞—Ç",
    };
    return typeNames[type as keyof typeof typeNames] || type;
  }

  private generateDocumentName(type: string): string {
    const dateStr = getMoscowDateForDocument();
    const typeName = this.getDocumentTypeName(type);

    // –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –Ω—É–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å concurrent access)
    const number = Math.floor(Math.random() * 1000) + 1;

    return `${typeName} ${dateStr}-${number}`;
  }
}

export const documentService = new DocumentService();
