Тема: Оптимизация производительности и кеширования API в ERP-системе

⸻

Цель:

Повысить общую производительность API и интерфейса ERP-системы за счёт оптимизации SQL-запросов, кеширования и логирования. Уменьшить время отклика ключевых endpoints до целевых значений и обеспечить высокую стабильность кеша после перезапуска сервера.

⸻

Задачи:

⸻

1. Реализовать систему “разогрева кеша” при запуске сервера

– Создать отдельную функцию, которая вызывается при старте сервера
– Эта функция должна предварительно загружать в кеш часто используемые данные:
	1.	список всех товаров
	2.	список складов
	3.	список контрагентов
	4.	остатки товаров
– Установить TTL кеша для этих данных в пределах 60–600 секунд в зависимости от сущности
– Цель — повысить Cache Hit Rate при первом обращении после перезапуска сервера

⸻

2. Оптимизировать SQL-запрос для получения списка товаров

– Проверить, используются ли индексы по полям: product_id, name, sku, created_at
– Удалить лишние JOIN-операции или заменить их на предварительно кэшируемые значения
– Убедиться, что выбираются только нужные поля, а не вся таблица целиком
– Цель — сократить время выполнения запроса до 100 мс

⸻

3. Продлить время жизни кеша для справочников

– Установить TTL для кеша:
– список товаров: 5–10 минут
– склады и контрагенты: 10–15 минут
– остатки товаров: 30–60 секунд
– Это позволит сократить количество обращений к базе данных при стабильных данных

⸻

4. Добавить централизованное логирование статистики кеша

– При каждом использовании кеша выводить в лог, был ли это HIT или MISS
– Указывать ключ кеша, TTL, и источник (Redis или fallback)
– Раз в 5 минут выводить в лог общую статистику по Cache Hit Rate (например: 85 процентов из 100)

⸻

5. Включить постраничную загрузку по умолчанию для больших списков

– Для API endpoints, таких как /products, /inventory, /documents, задать стандартный лимит 50 записей
– Поддерживать параметры page и limit
– Обновить UI и хуки, чтобы подгрузка была постраничной
– Это снизит нагрузку на клиент и сервер при больших объёмах данных

⸻

Проверка результата:

– После запуска сервера кеш уже содержит основные справочники
– Первые запросы не нагружают базу данных
– /api/products работает быстрее 100 мс
– /api/inventory/availability отвечает менее чем за 80 мс
– Cache Hit Rate в логах стабильно выше 85 процентов
– В интерфейсе данные отображаются постранично, без полной загрузки больших списков

⸻

Итог:

После выполнения всех задач ERP-система получит стабильную и быструю работу API, предсказуемое поведение кеша и устойчивость к перезапускам. Производительность системы вырастет в 2–3 раза на реальных нагрузках, а нагрузка на базу данных значительно уменьшится.