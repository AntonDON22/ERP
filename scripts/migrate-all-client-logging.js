#!/usr/bin/env node
/**
 * üîß –§–ò–ù–ê–õ–¨–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø –í–°–ï–• –ö–õ–ò–ï–ù–¢–°–ö–ò–• –§–ê–ô–õ–û–í
 * 
 * –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ console.* –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const filesToMigrate = [
  'client/src/hooks/usePerformanceAudit.ts',
  'client/src/lib/errorLogger.ts',
  'client/src/pages/Dashboard.tsx',
  'client/src/pages/CreateOrder.tsx',
  'client/src/pages/EditOrder.tsx'
];

function migrateFile(filePath) {
  const fullPath = path.join(__dirname, '..', filePath);
  
  if (!fs.existsSync(fullPath)) {
    console.warn(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    return false;
  }

  let content = fs.readFileSync(fullPath, 'utf8');
  let changesMade = 0;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –ª–æ–≥–≥–µ—Ä–∞
  const hasLoggerImport = content.includes('from "@/lib/clientLogger"');
  
  if (!hasLoggerImport) {
    console.log(`üì¶ –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –ª–æ–≥–≥–µ—Ä–∞ –≤ ${filePath}`);
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–º–ø–æ—Ä—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –Ω–µ–≥–æ
    const lastImportMatch = content.match(/import.*from.*["'];(\n|$)/);
    if (lastImportMatch) {
      const insertPosition = lastImportMatch.index + lastImportMatch[0].length;
      const loggerImport = `import { clientLogger } from "@/lib/clientLogger";\n`;
      content = content.slice(0, insertPosition) + loggerImport + content.slice(insertPosition);
      changesMade++;
    }
  }

  // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∑–∞–º–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
  switch (path.basename(filePath)) {
    case 'usePerformanceAudit.ts':
      content = content.replace(/console\.log/g, 'clientLogger.debug("performance"');
      content = content.replace(/console\.warn/g, 'clientLogger.warn("performance"');
      changesMade += 2;
      break;
      
    case 'errorLogger.ts':
      content = content.replace(/console\.error/g, 'clientLogger.error("errors"');
      changesMade += 1;
      break;
      
    case 'Dashboard.tsx':
      // —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω
      break;
      
    case 'CreateOrder.tsx':
    case 'EditOrder.tsx':
      // –£–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø—Ä–æ console.log
      content = content.replace(/\s*\/\/ ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£—Å–ª–æ–≤–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–º–µ—Å—Ç–æ console\.[a-z]+/g, '');
      changesMade += 1;
      break;
  }

  if (changesMade > 0) {
    fs.writeFileSync(fullPath, content, 'utf8');
    console.log(`‚úÖ –§–∞–π–ª ${filePath} –æ–±–Ω–æ–≤–ª–µ–Ω (${changesMade} –∏–∑–º–µ–Ω–µ–Ω–∏–π)`);
    return true;
  } else {
    console.log(`‚ÑπÔ∏è  –§–∞–π–ª ${filePath} –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π`);
    return false;
  }
}

function runMigration() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤...\n');
  
  let totalFiles = 0;
  let migratedFiles = 0;

  filesToMigrate.forEach(filePath => {
    totalFiles++;
    if (migrateFile(filePath)) {
      migratedFiles++;
    }
  });

  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏:`);
  console.log(`   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${totalFiles}`);
  console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${migratedFiles}`);
  console.log(`   –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${totalFiles - migratedFiles}`);
  
  console.log('\nüéâ –§–∏–Ω–∞–ª—å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  console.log('üìù –í—Å–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ');
  console.log('üîí ESLint –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç—è—Ç –Ω–æ–≤—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è');
}

runMigration();