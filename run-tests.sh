#!/bin/bash

# üß™ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ERP —Å–∏—Å—Ç–µ–º—ã
# –ê–≤—Ç–æ—Ä: ERP Development Team
# –î–∞—Ç–∞: 02.07.2025

set -e

echo "üß™ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –°–ò–°–¢–ï–ú–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ERP"
echo "========================================"
echo ""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
print_result() {
    local category="$1"
    local status="$2"
    local time="$3"
    local details="$4"
    
    if [ "$status" = "PASS" ]; then
        echo "‚úÖ $category: $status ($time) $details"
    else
        echo "‚ùå $category: $status ($time) $details"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤
run_test_category() {
    local name="$1"
    local command="$2"
    local description="$3"
    
    echo "üîÑ –ó–∞–ø—É—Å–∫ $name —Ç–µ—Å—Ç–æ–≤..."
    start_time=$(date +%s)
    
    if eval "$command" > /tmp/test_output_$$ 2>&1; then
        end_time=$(date +%s)
        duration=$((end_time - start_time))
        print_result "$description" "PASS" "${duration}s" ""
        return 0
    else
        end_time=$(date +%s)
        duration=$((end_time - start_time))
        print_result "$description" "FAIL" "${duration}s" ""
        echo "–û—à–∏–±–∫–∏:"
        cat /tmp/test_output_$$
        return 1
    fi
}

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
total_tests=0
passed_tests=0
failed_tests=0

echo "1Ô∏è‚É£ UNIT –¢–ï–°–¢–´ - –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"
echo "===================================="

# Services Tests
total_tests=$((total_tests + 1))
if run_test_category "services" "NODE_ENV=test npx vitest run tests/services --reporter=verbose" "Services (–±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞)"; then
    passed_tests=$((passed_tests + 1))
else
    failed_tests=$((failed_tests + 1))
fi

# Utils Tests  
total_tests=$((total_tests + 1))
if run_test_category "utils" "NODE_ENV=test npx vitest run tests/utils --reporter=verbose" "Utils (—É—Ç–∏–ª–∏—Ç—ã)"; then
    passed_tests=$((passed_tests + 1))
else
    failed_tests=$((failed_tests + 1))
fi

# Middleware Tests
total_tests=$((total_tests + 1))
if run_test_category "middleware" "NODE_ENV=test npx vitest run tests/middleware --reporter=verbose" "Middleware (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)"; then
    passed_tests=$((passed_tests + 1))
else
    failed_tests=$((failed_tests + 1))
fi

# zFields Validation Tests
total_tests=$((total_tests + 1))
if run_test_category "zfields" "NODE_ENV=test npx vitest run tests/zFields.test.ts tests/zFields --reporter=verbose" "zFields (–≤–∞–ª–∏–¥–∞—Ü–∏—è)"; then
    passed_tests=$((passed_tests + 1))
else
    failed_tests=$((failed_tests + 1))
fi

# Logs Tests
total_tests=$((total_tests + 1))
if run_test_category "logs" "NODE_ENV=test npx vitest run tests/logs.test.ts --reporter=verbose" "Logs (–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)"; then
    passed_tests=$((passed_tests + 1))
else
    failed_tests=$((failed_tests + 1))
fi

echo ""
echo "2Ô∏è‚É£ INTEGRATION –¢–ï–°–¢–´ - –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"
echo "================================================="

# Integration Tests
total_tests=$((total_tests + 1))
if run_test_category "integration" "NODE_ENV=test npx vitest run tests/integration --reporter=verbose" "Integration (API –∏ —Å–∏—Å—Ç–µ–º–∞)"; then
    passed_tests=$((passed_tests + 1))
else
    failed_tests=$((failed_tests + 1))
fi

# API Routing Tests
total_tests=$((total_tests + 1))
if run_test_category "api-routing" "NODE_ENV=test npx vitest run tests/api-routing.test.ts --reporter=verbose" "API Routing (–º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è)"; then
    passed_tests=$((passed_tests + 1))
else
    failed_tests=$((failed_tests + 1))
fi

echo ""
echo "3Ô∏è‚É£ –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –¢–ï–°–¢–´"
echo "============================"

# Cache Tests
total_tests=$((total_tests + 1))
if run_test_category "cache" "NODE_ENV=test npx vitest run tests/cache --reporter=verbose" "Cache (–∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ)"; then
    passed_tests=$((passed_tests + 1))
else
    failed_tests=$((failed_tests + 1))
fi

# Validation Tests
total_tests=$((total_tests + 1))
if run_test_category "validation" "NODE_ENV=test npx vitest run tests/validation --reporter=verbose" "Validation (—Å—Ö–µ–º—ã –¥–∞–Ω–Ω—ã—Ö)"; then
    passed_tests=$((passed_tests + 1))
else
    failed_tests=$((failed_tests + 1))
fi

# Performance Tests
total_tests=$((total_tests + 1))
if run_test_category "performance" "NODE_ENV=test npx vitest run tests/performance --reporter=verbose" "Performance (–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)"; then
    passed_tests=$((passed_tests + 1))
else
    failed_tests=$((failed_tests + 1))
fi

echo ""
echo "4Ô∏è‚É£ –ê–î–ê–ü–¢–ò–í–ù–´–ï –¢–ï–°–¢–´"
echo "==================="

# Adaptive Tests (–µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
if [ -f "./tests/adaptive/runSystemTest.sh" ]; then
    total_tests=$((total_tests + 1))
    if run_test_category "adaptive" "./tests/adaptive/runSystemTest.sh" "Adaptive (responsive –¥–∏–∑–∞–π–Ω)"; then
        passed_tests=$((passed_tests + 1))
    else
        failed_tests=$((failed_tests + 1))
    fi
else
    echo "‚ö†Ô∏è  Adaptive —Ç–µ—Å—Ç—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã (—Å–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω)"
fi

echo ""
echo "üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í"
echo "==============================="
echo "–í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–µ—Å—Ç–æ–≤: $total_tests"
echo "‚úÖ –ü—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ: $passed_tests"
echo "‚ùå –ü—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å: $failed_tests"

# –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞
if [ $total_tests -gt 0 ]; then
    success_rate=$(( (passed_tests * 100) / total_tests ))
    echo "üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: $success_rate%"
else
    success_rate=0
fi

echo ""

# –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
if [ $failed_tests -eq 0 ]; then
    echo "üèÜ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!"
    echo "–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é."
    exit 0
elif [ $success_rate -ge 80 ]; then
    echo "‚ö†Ô∏è  –ë–û–õ–¨–®–ò–ù–°–¢–í–û –¢–ï–°–¢–û–í –ü–†–û–®–õ–ò ($success_rate%)"
    echo "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–±–ª–µ–º—ã."
    exit 1
else
    echo "‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –í –¢–ï–°–¢–ê–• ($success_rate%)"
    echo "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º."
    exit 2
fi

# –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
rm -f /tmp/test_output_$$