#!/usr/bin/env node

import { exec } from 'child_process';
import fs from 'fs';
import path from 'path';
import { promisify } from 'util';

const execAsync = promisify(exec);

console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏ ERP —Å–∏—Å—Ç–µ–º—ã...\n');

const results = {
  stylelint: [],
  responsive: [],
  lighthouse: null
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Stylelint
function runStylelint() {
  return new Promise(async (resolve) => {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Stylelint...');
    
    try {
      const { stdout, stderr } = await execAsync('npx stylelint "**/*.css" "**/*.tsx" --formatter json --ignore-path .gitignore');
      if (stdout.trim()) {
        try {
          const parsed = JSON.parse(stdout);
          parsed.forEach(file => {
            file.warnings.forEach(warning => {
              results.stylelint.push({
                file: path.basename(file.source),
                line: warning.line,
                issue: warning.text,
                rule: warning.rule,
                severity: warning.severity
              });
            });
          });
        } catch (e) {
          console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Stylelint');
        }
      }
      
      console.log(`‚úÖ Stylelint: –Ω–∞–π–¥–µ–Ω–æ ${results.stylelint.length} –ø—Ä–æ–±–ª–µ–º`);
    } catch (error) {
      if (error.stdout) {
        try {
          const parsed = JSON.parse(error.stdout);
          parsed.forEach(file => {
            file.warnings.forEach(warning => {
              results.stylelint.push({
                file: path.basename(file.source),
                line: warning.line,
                issue: warning.text,
                rule: warning.rule,
                severity: warning.severity
              });
            });
          });
        } catch (e) {
          console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Stylelint –∏–∑ error.stdout');
        }
      }
      console.log(`‚ö†Ô∏è Stylelint –∑–∞–≤–µ—Ä—à–µ–Ω —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏: ${results.stylelint.length} –ø—Ä–æ–±–ª–µ–º`);
    }
    
    resolve();
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
function checkResponsiveness() {
  return new Promise((resolve) => {
    console.log('üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏...');
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏
    const issues = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ overflow-x-auto –≤ DataTable
    try {
      const dataTableContent = fs.readFileSync('client/src/components/DataTable.tsx', 'utf8');
      if (!dataTableContent.includes('overflow-x-auto')) {
        issues.push({
          component: 'DataTable',
          issue: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç overflow-x-auto –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏',
          severity: 'critical',
          file: 'DataTable.tsx'
        });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º responsive –∫–ª–∞—Å—Å—ã
      const responsiveClasses = ['sm:', 'md:', 'lg:'];
      const hasResponsive = responsiveClasses.some(cls => dataTableContent.includes(cls));
      if (!hasResponsive) {
        issues.push({
          component: 'DataTable',
          issue: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ breakpoints (sm:, md:, lg:)',
          severity: 'warning',
          file: 'DataTable.tsx'
        });
      }
    } catch (e) {
      issues.push({
        component: 'DataTable',
        issue: '–§–∞–π–ª DataTable.tsx –Ω–µ –Ω–∞–π–¥–µ–Ω',
        severity: 'critical',
        file: 'DataTable.tsx'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Navigation
    try {
      const navContent = fs.readFileSync('client/src/components/Navigation.tsx', 'utf8');
      if (!navContent.includes('md:hidden')) {
        issues.push({
          component: 'Navigation',
          issue: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é (md:hidden)',
          severity: 'critical',
          file: 'Navigation.tsx'
        });
      }
    } catch (e) {
      issues.push({
        component: 'Navigation',
        issue: '–§–∞–π–ª Navigation.tsx –Ω–µ –Ω–∞–π–¥–µ–Ω',
        severity: 'critical',
        file: 'Navigation.tsx'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º ResponsiveTableWrapper
    try {
      fs.accessSync('client/src/components/ui/responsive-table-wrapper.tsx');
    } catch (e) {
      issues.push({
        component: 'ResponsiveTableWrapper',
        issue: 'ResponsiveTableWrapper –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
        severity: 'warning',
        file: 'responsive-table-wrapper.tsx'
      });
    }
    
    results.responsive = issues;
    console.log(`‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å: –Ω–∞–π–¥–µ–Ω–æ ${issues.length} –ø—Ä–æ–±–ª–µ–º`);
    resolve();
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
function quickPerformanceCheck() {
  return new Promise((resolve) => {
    console.log('‚ö° –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
    
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤
    const issues = [];
    
    try {
      const stats = fs.statSync('client/src/components/DataTable.tsx');
      if (stats.size > 50000) { // 50KB
        issues.push('DataTable.tsx —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>50KB)');
      }
    } catch (e) {}
    
    try {
      const indexContent = fs.readFileSync('client/src/index.css', 'utf8');
      if (indexContent.length > 10000) { // 10KB CSS
        issues.push('CSS —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>10KB)');
      }
    } catch (e) {}
    
    results.lighthouse = {
      performance: issues.length === 0 ? 85 : 65,
      issues: issues
    };
    
    console.log(`‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${issues.length} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π`);
    resolve();
  });
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
function generateReport() {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  let report = '';
  
  report += '========================================\n';
  report += 'üîç –û–¢–ß–ï–¢ –ê–í–¢–û–¢–ï–°–¢–ê –ê–î–ê–ü–¢–ò–í–ù–û–°–¢–ò\n';
  report += '========================================\n\n';
  
  // –°–≤–æ–¥–∫–∞
  const criticalIssues = results.responsive.filter(i => i.severity === 'critical').length;
  const warningIssues = results.responsive.filter(i => i.severity === 'warning').length;
  const stylelintErrors = results.stylelint.filter(i => i.severity === 'error').length;
  
  report += 'üìä –°–í–û–î–ö–ê:\n';
  report += `   –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${criticalIssues}\n`;
  report += `   –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${warningIssues}\n`;
  report += `   –û—à–∏–±–∫–∏ Stylelint: ${stylelintErrors}\n`;
  report += `   –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${results.lighthouse.performance}/100\n\n`;
  
  // –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
  if (criticalIssues > 0) {
    report += 'üö® –ö–†–ò–¢–ò–ß–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:\n';
    results.responsive.filter(i => i.severity === 'critical').forEach((issue, index) => {
      report += `   ${index + 1}. [${issue.component}] ${issue.issue}\n`;
      report += `      –§–∞–π–ª: ${issue.file}\n\n`;
    });
  }
  
  // –ü—Ä–æ–±–ª–µ–º—ã –¥–ª—è —à–∏—Ä–∏–Ω—ã < 375px
  report += 'üì± –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –≠–ö–†–ê–ù–û–í < 375px:\n';
  report += '   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏–º–µ—é—Ç overflow-x-auto\n';
  report += '   2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ sm: –ø—Ä–µ—Ñ–∏–∫—Å—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n';
  report += '   3. –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ iPhone SE (375px) –∏ Samsung Galaxy (360px)\n';
  report += '   4. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∫–Ω–æ–ø–∫–∏ –Ω–µ —Å–ª–∏—à–∫–æ–º —à–∏—Ä–æ–∫–∏–µ\n\n';
  
  // Stylelint –ø—Ä–æ–±–ª–µ–º—ã
  if (results.stylelint.length > 0) {
    report += 'üé® STYLELINT –ü–†–û–ë–õ–ï–ú–´:\n';
    results.stylelint.slice(0, 5).forEach((issue, index) => {
      report += `   ${index + 1}. ${issue.file}:${issue.line} - ${issue.issue}\n`;
    });
    if (results.stylelint.length > 5) {
      report += `   ... –∏ –µ—â–µ ${results.stylelint.length - 5} –ø—Ä–æ–±–ª–µ–º\n`;
    }
    report += '\n';
  }
  
  // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  report += 'üîß –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:\n';
  if (stylelintErrors > 0) {
    report += '   npx stylelint "**/*.css" "**/*.tsx" --fix\n';
  }
  report += '   npm run test:responsive  # –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n';
  report += '   –û—Ç–∫—Ä–æ–π—Ç–µ /responsive-test –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏\n\n';
  
  report += '========================================\n';
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
  const reportFile = `test_results_adaptive_${timestamp}.log`;
  fs.writeFileSync(reportFile, report);
  
  console.log(report);
  console.log(`üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportFile}`);
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å
  return criticalIssues === 0 && stylelintErrors === 0;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function runTest() {
  const startTime = Date.now();
  
  try {
    await runStylelint();
    await checkResponsiveness();
    await quickPerformanceCheck();
    
    const success = generateReport();
    const duration = (Date.now() - startTime) / 1000;
    
    console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration.toFixed(1)}—Å`);
    
    if (success) {
      console.log('\n‚úÖ –ê–≤—Ç–æ—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      process.exit(0);
    } else {
      console.log('\n‚ùå –ê–≤—Ç–æ—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏');
      process.exit(1);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Ç–µ—Å—Ç–∞:', error);
    process.exit(1);
  }
}

runTest();