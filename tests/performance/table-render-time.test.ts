/**
 * –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Ç–∞–±–ª–∏—Ü
 * –ò–∑–º–µ—Ä—è–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü –≤ React-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
 */

import { test, expect, Page } from '@playwright/test';

interface TableRenderResult {
  page: string;
  loadTime: number;
  tableRenderTime: number;
  totalTime: number;
  status: 'excellent' | 'good' | 'needs-optimization';
  rowCount: number;
}

// –ü–æ—Ä–æ–≥–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
const RENDER_THRESHOLDS = {
  EXCELLENT: 500,
  GOOD: 1500,
} as const;

// –¶–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const COLORS = {
  GREEN: '\x1b[32m',
  YELLOW: '\x1b[33m',
  RED: '\x1b[31m',
  RESET: '\x1b[0m',
  BOLD: '\x1b[1m',
} as const;

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
 */
function getRenderStatus(renderTime: number): TableRenderResult['status'] {
  if (renderTime <= RENDER_THRESHOLDS.EXCELLENT) return 'excellent';
  if (renderTime <= RENDER_THRESHOLDS.GOOD) return 'good';
  return 'needs-optimization';
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ü–≤–µ—Ç–æ–≤–æ–π –≥—Ä–∞–¥–∞—Ü–∏–µ–π
 */
function formatRenderResult(result: TableRenderResult): string {
  const { page, totalTime, status } = result;
  
  let color: string;
  let statusText: string;
  
  switch (status) {
    case 'excellent':
      color = COLORS.GREEN;
      statusText = '–û–¢–õ–ò–ß–ù–û';
      break;
    case 'good':
      color = COLORS.YELLOW;
      statusText = '–•–û–†–û–®–û';
      break;
    case 'needs-optimization':
      color = COLORS.RED;
      statusText = '–¢–†–ï–ë–£–ï–¢ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò';
      break;
  }

  return `${color}${COLORS.BOLD}${page}${COLORS.RESET}${color} - ${totalTime}ms [${statusText}]${COLORS.RESET}`;
}

/**
 * –ò–∑–º–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 */
async function measureTableRender(page: Page, url: string, pageTitle: string): Promise<TableRenderResult> {
  // –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∫–∏
  const startTime = Date.now();
  
  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
  await page.goto(url);
  
  // –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const loadEndTime = Date.now();
  const loadTime = loadEndTime - startTime;
  
  // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã - –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
  let tableSelector: string;
  let tableElement;
  
  const possibleSelectors = [
    '[data-testid="data-table"]',
    '.data-table',
    'table',
    '[role="table"]',
    '.table-container table',
    '.responsive-table-wrapper table'
  ];
  
  for (const selector of possibleSelectors) {
    try {
      tableElement = await page.locator(selector).first();
      if (await tableElement.isVisible({ timeout: 1000 })) {
        tableSelector = selector;
        break;
      }
    } catch (e) {
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
    }
  }
  
  if (!tableElement || !tableSelector!) {
    throw new Error(`–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${pageTitle}`);
  }
  
  // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
  await tableElement.waitFor({ state: 'visible' });
  
  // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
  const rowsSelector = `${tableSelector} tbody tr, ${tableSelector} tr`;
  await page.waitForSelector(rowsSelector, { timeout: 5000 });
  
  // –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Ç–∞–±–ª–∏—Ü—ã
  const tableRenderEndTime = Date.now();
  const tableRenderTime = tableRenderEndTime - loadEndTime;
  const totalTime = tableRenderEndTime - startTime;
  
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
  const rows = await page.locator(rowsSelector).count();
  
  const result: TableRenderResult = {
    page: pageTitle,
    loadTime,
    tableRenderTime,
    totalTime,
    status: getRenderStatus(totalTime),
    rowCount: rows,
  };
  
  return result;
}

test.describe('Table Render Time Performance Tests', () => {
  const results: TableRenderResult[] = [];
  const BASE_URL = 'http://localhost:5000';

  test.beforeEach(async ({ page }) => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º viewport –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    await page.setViewportSize({ width: 1280, height: 720 });
  });

  test('–¥–æ–ª–∂–µ–Ω –∏–∑–º–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Ç–∞–±–ª–∏—Ü—ã /products', async ({ page }) => {
    const url = `${BASE_URL}/products`;
    const result = await measureTableRender(page, url, 'Products');
    
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–º–µ—Ä–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞:');
    console.log(formatRenderResult(result));
    console.log(`‚è±Ô∏è  –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${result.loadTime}ms`);
    console.log(`üèóÔ∏è  –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ã: ${result.tableRenderTime}ms`);
    console.log(`üìä –°—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ: ${result.rowCount}`);
    
    results.push(result);
    
    expect(result.totalTime).toBeGreaterThan(0);
    expect(result.rowCount).toBeGreaterThan(0);
    
    if (result.status === 'needs-optimization') {
      console.warn(`‚ö†Ô∏è  –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥: ${result.totalTime}ms –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥ ${RENDER_THRESHOLDS.GOOD}ms`);
    }
  });

  test('–¥–æ–ª–∂–µ–Ω –∏–∑–º–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Ç–∞–±–ª–∏—Ü—ã /documents', async ({ page }) => {
    const url = `${BASE_URL}/documents`;
    const result = await measureTableRender(page, url, 'Documents');
    
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–º–µ—Ä–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞:');
    console.log(formatRenderResult(result));
    console.log(`‚è±Ô∏è  –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${result.loadTime}ms`);
    console.log(`üèóÔ∏è  –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ã: ${result.tableRenderTime}ms`);
    console.log(`üìä –°—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ: ${result.rowCount}`);
    
    results.push(result);
    
    expect(result.totalTime).toBeGreaterThan(0);
    expect(result.rowCount).toBeGreaterThan(0);
    
    if (result.status === 'needs-optimization') {
      console.warn(`‚ö†Ô∏è  –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥: ${result.totalTime}ms –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥ ${RENDER_THRESHOLDS.GOOD}ms`);
    }
  });

  test('–¥–æ–ª–∂–µ–Ω –∏–∑–º–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Ç–∞–±–ª–∏—Ü—ã /inventory', async ({ page }) => {
    const url = `${BASE_URL}/inventory`;
    const result = await measureTableRender(page, url, 'Inventory');
    
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–º–µ—Ä–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞:');
    console.log(formatRenderResult(result));
    console.log(`‚è±Ô∏è  –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${result.loadTime}ms`);
    console.log(`üèóÔ∏è  –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ã: ${result.tableRenderTime}ms`);
    console.log(`üìä –°—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ: ${result.rowCount}`);
    
    results.push(result);
    
    expect(result.totalTime).toBeGreaterThan(0);
    expect(result.rowCount).toBeGreaterThan(0);
    
    if (result.status === 'needs-optimization') {
      console.warn(`‚ö†Ô∏è  –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥: ${result.totalTime}ms –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥ ${RENDER_THRESHOLDS.GOOD}ms`);
    }
  });

  test('–¥–æ–ª–∂–µ–Ω –∏–∑–º–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Ç–∞–±–ª–∏—Ü—ã /warehouses', async ({ page }) => {
    const url = `${BASE_URL}/warehouses`;
    const result = await measureTableRender(page, url, 'Warehouses');
    
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–º–µ—Ä–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞:');
    console.log(formatRenderResult(result));
    console.log(`‚è±Ô∏è  –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${result.loadTime}ms`);
    console.log(`üèóÔ∏è  –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ã: ${result.tableRenderTime}ms`);
    console.log(`üìä –°—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ: ${result.rowCount}`);
    
    results.push(result);
    
    expect(result.totalTime).toBeGreaterThan(0);
    expect(result.rowCount).toBeGreaterThan(0);
    
    if (result.status === 'needs-optimization') {
      console.warn(`‚ö†Ô∏è  –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥: ${result.totalTime}ms –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥ ${RENDER_THRESHOLDS.GOOD}ms`);
    }
  });

  test('–¥–æ–ª–∂–µ–Ω –∏–∑–º–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Ç–∞–±–ª–∏—Ü—ã /orders', async ({ page }) => {
    const url = `${BASE_URL}/orders`;
    const result = await measureTableRender(page, url, 'Orders');
    
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–º–µ—Ä–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞:');
    console.log(formatRenderResult(result));
    console.log(`‚è±Ô∏è  –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${result.loadTime}ms`);
    console.log(`üèóÔ∏è  –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ã: ${result.tableRenderTime}ms`);
    console.log(`üìä –°—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ: ${result.rowCount}`);
    
    results.push(result);
    
    expect(result.totalTime).toBeGreaterThan(0);
    expect(result.rowCount).toBeGreaterThan(0);
    
    if (result.status === 'needs-optimization') {
      console.warn(`‚ö†Ô∏è  –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥: ${result.totalTime}ms –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥ ${RENDER_THRESHOLDS.GOOD}ms`);
    }
  });

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Ç–∞–±–ª–∏—Ü', async () => {
    const totalTests = results.length;
    const excellentCount = results.filter(r => r.status === 'excellent').length;
    const goodCount = results.filter(r => r.status === 'good').length;
    const needsOptimizationCount = results.filter(r => r.status === 'needs-optimization').length;

    const averageTotalTime = results.reduce((sum, r) => sum + r.totalTime, 0) / totalTests;
    const averageLoadTime = results.reduce((sum, r) => sum + r.loadTime, 0) / totalTests;
    const averageRenderTime = results.reduce((sum, r) => sum + r.tableRenderTime, 0) / totalTests;
    const totalRows = results.reduce((sum, r) => sum + r.rowCount, 0);

    const maxTime = Math.max(...results.map(r => r.totalTime));
    const minTime = Math.min(...results.map(r => r.totalTime));

    console.log('\n' + '='.repeat(70));
    console.log(`${COLORS.BOLD}üèóÔ∏è  –°–í–û–î–ù–´–ô –û–¢–ß–ï–¢ –†–ï–ù–î–ï–†–ò–ù–ì–ê –¢–ê–ë–õ–ò–¶${COLORS.RESET}`);
    console.log('='.repeat(70));
    console.log(`üìä –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: ${totalTests}`);
    console.log(`${COLORS.GREEN}‚ö° –û—Ç–ª–∏—á–Ω—ã—Ö: ${excellentCount} (<${RENDER_THRESHOLDS.EXCELLENT}ms)${COLORS.RESET}`);
    console.log(`${COLORS.YELLOW}‚úÖ –•–æ—Ä–æ—à–∏—Ö: ${goodCount} (${RENDER_THRESHOLDS.EXCELLENT}-${RENDER_THRESHOLDS.GOOD}ms)${COLORS.RESET}`);
    console.log(`${COLORS.RED}üîß –¢—Ä–µ–±—É—é—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: ${needsOptimizationCount} (>${RENDER_THRESHOLDS.GOOD}ms)${COLORS.RESET}`);
    console.log(`‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –æ–±—â–µ–µ –≤—Ä–µ–º—è: ${averageTotalTime.toFixed(1)}ms`);
    console.log(`üì• –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: ${averageLoadTime.toFixed(1)}ms`);
    console.log(`üèóÔ∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞: ${averageRenderTime.toFixed(1)}ms`);
    console.log(`üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${totalRows}`);
    console.log(`üèÉ –ë—ã—Å—Ç—Ä–µ–π—à–∞—è: ${minTime}ms`);
    console.log(`üêå –ú–µ–¥–ª–µ–Ω–Ω–µ–π—à–∞—è: ${maxTime}ms`);
    console.log('='.repeat(70));

    // –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log('\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    results.forEach(result => {
      console.log(`  ${formatRenderResult(result)}`);
      console.log(`    –ó–∞–≥—Ä—É–∑–∫–∞: ${result.loadTime}ms | –†–µ–Ω–¥–µ—Ä–∏–Ω–≥: ${result.tableRenderTime}ms | –°—Ç—Ä–æ–∫: ${result.rowCount}`);
    });

    expect(totalTests).toBeGreaterThan(0);
    expect(averageTotalTime).toBeGreaterThan(0);
  });
});