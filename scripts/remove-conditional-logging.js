#!/usr/bin/env node
/**
 * üîß –£–î–ê–õ–ï–ù–ò–ï –£–°–õ–û–í–ù–û–ì–û –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
 * 
 * –£–±–∏—Ä–∞–µ—Ç –≤—Å–µ if (process.env.NODE_ENV === "development") –±–ª–æ–∫–∏
 * —Ç–∞–∫ –∫–∞–∫ clientLogger —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const filesToClean = [
  'client/src/pages/CreateOrder.tsx',
  'client/src/pages/EditOrder.tsx'
];

function cleanFile(filePath) {
  const fullPath = path.join(__dirname, '..', filePath);
  
  if (!fs.existsSync(fullPath)) {
    console.warn(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    return false;
  }

  let content = fs.readFileSync(fullPath, 'utf8');
  let changesMade = 0;

  // –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—Å–ª–æ–≤–Ω—ã—Ö –±–ª–æ–∫–æ–≤ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  const conditionalLogPattern = /\s*\/\/ ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£—Å–ª–æ–≤–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–º–µ—Å—Ç–æ console\.(log|error|warn|info)\s*if \(process\.env\.NODE_ENV === ["']development["']\) \{\s*(log[A-Za-z]+\([^}]+\));?\s*\}/gs;
  
  // –ó–∞–º–µ–Ω—è–µ–º —É—Å–ª–æ–≤–Ω—ã–π –±–ª–æ–∫ —Ç–æ–ª—å–∫–æ –Ω–∞ –≤—ã–∑–æ–≤ –ª–æ–≥–≥–µ—Ä–∞
  content = content.replace(conditionalLogPattern, (match, logLevel, logCall) => {
    changesMade++;
    return `      ${logCall}`;
  });

  if (changesMade > 0) {
    fs.writeFileSync(fullPath, content, 'utf8');
    console.log(`‚úÖ –§–∞–π–ª ${filePath} –æ—á–∏—â–µ–Ω (${changesMade} –±–ª–æ–∫–æ–≤ —É–¥–∞–ª–µ–Ω–æ)`);
    return true;
  } else {
    console.log(`‚ÑπÔ∏è  –§–∞–π–ª ${filePath} –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ—á–∏—Å—Ç–∫–∏`);
    return false;
  }
}

function runCleanup() {
  console.log('üßπ –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ —É—Å–ª–æ–≤–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...\n');
  
  let totalFiles = 0;
  let cleanedFiles = 0;

  filesToClean.forEach(filePath => {
    totalFiles++;
    if (cleanFile(filePath)) {
      cleanedFiles++;
    }
  });

  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—Å—Ç–∫–∏:`);
  console.log(`   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${totalFiles}`);
  console.log(`   –û—á–∏—â–µ–Ω–æ: ${cleanedFiles}`);
  console.log(`   –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${totalFiles - cleanedFiles}`);
  
  if (cleanedFiles > 0) {
    console.log('\nüéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìù –í—Å–µ —É—Å–ª–æ–≤–Ω—ã–µ –±–ª–æ–∫–∏ —É–¥–∞–ª–µ–Ω—ã, –æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ –ø—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã –ª–æ–≥–≥–µ—Ä–∞');
  } else {
    console.log('\n‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —É–∂–µ –æ—á–∏—â–µ–Ω—ã –æ—Ç —É—Å–ª–æ–≤–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è');
  }
}

runCleanup();