/**
 * üö¢ API –•–£–ö–ò –î–õ–Ø –û–¢–ì–†–£–ó–û–ö
 * 
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ö—É–∫–∏ –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –æ—Ç–≥—Ä—É–∑–∫–∞–º–∏
 */

import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { API_ROUTES } from "@shared/apiRoutes";
import type {
  Shipment,
  CreateShipmentRequest,
  InsertShipment,
} from "@shared/schema";

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–≥—Ä—É–∑–æ–∫
export function useShipments() {
  return useQuery<Shipment[]>({
    queryKey: [API_ROUTES.SHIPMENTS.LIST],
    staleTime: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
    gcTime: 10 * 60 * 1000, // 10 –º–∏–Ω—É—Ç
  });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–π –æ—Ç–≥—Ä—É–∑–∫–∏
export function useShipment(id: number) {
  return useQuery<Shipment>({
    queryKey: [API_ROUTES.SHIPMENTS.LIST, id],
    enabled: !!id,
    staleTime: 5 * 60 * 1000,
  });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≥—Ä—É–∑–∫–∏
export function useCreateShipment() {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (data: CreateShipmentRequest) => apiRequest(API_ROUTES.SHIPMENTS.CREATE, "POST", data),
    onSuccess: () => {
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –æ—Ç–≥—Ä—É–∑–æ–∫
      queryClient.invalidateQueries({
        queryKey: [API_ROUTES.SHIPMENTS.LIST],
      });
      
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –æ—Å—Ç–∞—Ç–∫–æ–≤ (–æ—Ç–≥—Ä—É–∑–∫–∏ –≤–ª–∏—è—é—Ç –Ω–∞ –æ—Å—Ç–∞—Ç–∫–∏)
      queryClient.invalidateQueries({
        queryKey: [API_ROUTES.INVENTORY.LIST],
      });
      queryClient.invalidateQueries({
        queryKey: [API_ROUTES.INVENTORY.AVAILABILITY],
      });
    },
  });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–≥—Ä—É–∑–∫–∏
export function useUpdateShipment() {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: ({ id, data }: { id: number; data: Partial<InsertShipment> }) => 
      apiRequest(API_ROUTES.SHIPMENTS.UPDATE(id), "PUT", data),
    onSuccess: (_, { id }) => {
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ—Ç–≥—Ä—É–∑–∫—É
      queryClient.invalidateQueries({
        queryKey: [API_ROUTES.SHIPMENTS.LIST, id],
      });
      
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–≥—Ä—É–∑–æ–∫
      queryClient.invalidateQueries({
        queryKey: [API_ROUTES.SHIPMENTS.LIST],
      });
      
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –æ—Å—Ç–∞—Ç–∫–æ–≤
      queryClient.invalidateQueries({
        queryKey: [API_ROUTES.INVENTORY.LIST],
      });
      queryClient.invalidateQueries({
        queryKey: [API_ROUTES.INVENTORY.AVAILABILITY],
      });
    },
  });
}

// –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–≥—Ä—É–∑–∫–∏
export function useDeleteShipment() {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (id: number) => apiRequest(API_ROUTES.SHIPMENTS.DELETE(id), "DELETE"),
    onSuccess: () => {
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –æ—Ç–≥—Ä—É–∑–æ–∫
      queryClient.invalidateQueries({
        queryKey: [API_ROUTES.SHIPMENTS.LIST],
      });
      
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –æ—Å—Ç–∞—Ç–∫–æ–≤
      queryClient.invalidateQueries({
        queryKey: [API_ROUTES.INVENTORY.LIST],
      });
      queryClient.invalidateQueries({
        queryKey: [API_ROUTES.INVENTORY.AVAILABILITY],
      });
    },
  });
}

// –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–≥—Ä—É–∑–æ–∫
export function useDeleteShipments() {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (ids: number[]) => apiRequest(API_ROUTES.SHIPMENTS.DELETE_MULTIPLE, "POST", { shipmentIds: ids }),
    onSuccess: () => {
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –æ—Ç–≥—Ä—É–∑–æ–∫
      queryClient.invalidateQueries({
        queryKey: [API_ROUTES.SHIPMENTS.LIST],
      });
      
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –æ—Å—Ç–∞—Ç–∫–æ–≤
      queryClient.invalidateQueries({
        queryKey: [API_ROUTES.INVENTORY.LIST],
      });
      queryClient.invalidateQueries({
        queryKey: [API_ROUTES.INVENTORY.AVAILABILITY],
      });
    },
  });
}



