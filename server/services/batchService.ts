import { db } from "../db";
import { products, suppliers, contractors, warehouses, documents } from "@shared/schema";
import { inArray } from "drizzle-orm";
import { dbLogger, getErrorMessage } from "@shared/logger";
import { BATCH_SIZES } from "@shared/constants";

/**
 * üöÄ –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö batch –æ–ø–µ—Ä–∞—Ü–∏–π
 * –ó–∞–º–µ–Ω—è–µ—Ç N+1 –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export class BatchService {
  
  /**
   * üì¶ –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
   */
  async deleteProducts(ids: number[]): Promise<boolean> {
    if (ids.length === 0) return true;
    
    const endOperation = dbLogger.startOperation('batchDeleteProducts');
    try {
      // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ batch'–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è timeout'–æ–≤
      await this.processBatches(ids, async (batch) => {
        await db.delete(products).where(inArray(products.id, batch));
      });
      
      endOperation();
      return true;
    } catch (error) {
      dbLogger.error('Error in batch delete products', { 
        error: getErrorMessage(error),
        idsCount: ids.length 
      });
      endOperation();
      return false;
    }
  }

  /**
   * üë• –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
   */
  async deleteSuppliers(ids: number[]): Promise<boolean> {
    if (ids.length === 0) return true;
    
    const endOperation = dbLogger.startOperation('batchDeleteSuppliers');
    try {
      await this.processBatches(ids, async (batch) => {
        await db.delete(suppliers).where(inArray(suppliers.id, batch));
      });
      
      endOperation();
      return true;
    } catch (error) {
      dbLogger.error('Error in batch delete suppliers', { 
        error: getErrorMessage(error),
        idsCount: ids.length 
      });
      endOperation();
      return false;
    }
  }

  /**
   * ü§ù –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤
   */
  async deleteContractors(ids: number[]): Promise<boolean> {
    if (ids.length === 0) return true;
    
    const endOperation = dbLogger.startOperation('batchDeleteContractors');
    try {
      await this.processBatches(ids, async (batch) => {
        await db.delete(contractors).where(inArray(contractors.id, batch));
      });
      
      endOperation();
      return true;
    } catch (error) {
      dbLogger.error('Error in batch delete contractors', { 
        error: getErrorMessage(error),
        idsCount: ids.length 
      });
      endOperation();
      return false;
    }
  }

  /**
   * üè≠ –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤
   */
  async deleteWarehouses(ids: number[]): Promise<boolean> {
    if (ids.length === 0) return true;
    
    const endOperation = dbLogger.startOperation('batchDeleteWarehouses');
    try {
      await this.processBatches(ids, async (batch) => {
        await db.delete(warehouses).where(inArray(warehouses.id, batch));
      });
      
      endOperation();
      return true;
    } catch (error) {
      dbLogger.error('Error in batch delete warehouses', { 
        error: getErrorMessage(error),
        idsCount: ids.length 
      });
      endOperation();
      return false;
    }
  }

  /**
   * üìÑ –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
   */
  async deleteDocuments(ids: number[]): Promise<boolean> {
    if (ids.length === 0) return true;
    
    const endOperation = dbLogger.startOperation('batchDeleteDocuments');
    try {
      await this.processBatches(ids, async (batch) => {
        await db.delete(documents).where(inArray(documents.id, batch));
      });
      
      endOperation();
      return true;
    } catch (error) {
      dbLogger.error('Error in batch delete documents', { 
        error: getErrorMessage(error),
        idsCount: ids.length 
      });
      endOperation();
      return false;
    }
  }

  /**
   * üîß –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ batch'–∞—Ö
   */
  private async processBatches<T>(
    items: T[],
    operation: (batch: T[]) => Promise<void>,
    batchSize: number = BATCH_SIZES.MEDIUM
  ): Promise<void> {
    for (let i = 0; i < items.length; i += batchSize) {
      const batch = items.slice(i, i + batchSize);
      await operation(batch);
    }
  }

  /**
   * üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ batch –æ–ø–µ—Ä–∞—Ü–∏–π
   */
  async getBatchOperationStats(ids: number[]): Promise<{
    totalItems: number;
    batchCount: number;
    estimatedTime: number; // –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  }> {
    const batchSize = BATCH_SIZES.MEDIUM;
    const totalItems = ids.length;
    const batchCount = Math.ceil(totalItems / batchSize);
    const estimatedTime = batchCount * 50; // –ø—Ä–∏–º–µ—Ä–Ω–æ 50ms –Ω–∞ batch

    return {
      totalItems,
      batchCount,
      estimatedTime
    };
  }

  /**
   * üéØ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è batch –æ–ø–µ—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
   */
  async processBatchWithProgress<T>(
    items: T[],
    operation: (batch: T[]) => Promise<void>,
    onProgress?: (completed: number, total: number) => void,
    batchSize: number = BATCH_SIZES.MEDIUM
  ): Promise<void> {
    const totalBatches = Math.ceil(items.length / batchSize);
    
    for (let i = 0; i < items.length; i += batchSize) {
      const batch = items.slice(i, i + batchSize);
      await operation(batch);
      
      const currentBatch = Math.floor(i / batchSize) + 1;
      if (onProgress) {
        onProgress(currentBatch, totalBatches);
      }
    }
  }
}

export const batchService = new BatchService();