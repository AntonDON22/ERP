import { describe, it, expect, beforeAll, afterAll } from 'vitest';
import { apiLogger } from '../../shared/logger';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
interface TestProduct {
  id?: number;
  name: string;
  sku: string;
  price: string;
}

interface TestContractor {
  id?: number;
  name: string;
  website: string;
}

interface TestWarehouse {
  id?: number;
  name: string;
  address: string;
}

interface TestDocument {
  id?: number;
  name: string;
  type: string;
  status: 'draft' | 'posted';
  warehouseId: number;
}

interface InventoryItem {
  id: number;
  name: string;
  quantity: number;
  reserved?: number;
  available?: number;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
class TestAPI {
  private baseUrl = 'http://localhost:5000/api';

  async request(method: string, endpoint: string, body?: any) {
    const response = await fetch(`${this.baseUrl}${endpoint}`, {
      method,
      headers: {
        'Content-Type': 'application/json',
      },
      body: body ? JSON.stringify(body) : undefined,
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`${method} ${endpoint} failed: ${response.status} ${errorText}`);
    }

    return response.json();
  }

  // –ü—Ä–æ–¥—É–∫—Ç—ã
  async createProduct(product: Omit<TestProduct, 'id'>): Promise<TestProduct> {
    return this.request('POST', '/products', product);
  }

  async deleteProduct(id: number): Promise<void> {
    await this.request('DELETE', `/products/${id}`);
  }

  // –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã
  async createContractor(contractor: Omit<TestContractor, 'id'>): Promise<TestContractor> {
    return this.request('POST', '/contractors', contractor);
  }

  async deleteContractor(id: number): Promise<void> {
    await this.request('DELETE', `/contractors/${id}`);
  }

  // –°–∫–ª–∞–¥—ã
  async createWarehouse(warehouse: Omit<TestWarehouse, 'id'>): Promise<TestWarehouse> {
    return this.request('POST', '/warehouses', warehouse);
  }

  async deleteWarehouse(id: number): Promise<void> {
    await this.request('DELETE', `/warehouses/${id}`);
  }

  // –î–æ–∫—É–º–µ–Ω—Ç—ã
  async createDocument(document: { type: string; warehouseId: number; status: 'draft' | 'posted'; items: Array<{ productId: number; quantity: number; price: number }> }): Promise<TestDocument> {
    return this.request('POST', '/documents', document);
  }

  async updateDocumentStatus(id: number, status: 'draft' | 'posted'): Promise<TestDocument> {
    return this.request('PUT', `/documents/${id}`, { status });
  }

  async deleteDocument(id: number): Promise<void> {
    await this.request('DELETE', `/documents/${id}`);
  }

  // –û—Å—Ç–∞—Ç–∫–∏
  async getInventory(): Promise<InventoryItem[]> {
    return this.request('GET', '/inventory');
  }

  async getInventoryAvailability(): Promise<InventoryItem[]> {
    return this.request('GET', '/inventory/availability');
  }
}

describe('üß™ –°–∏—Å—Ç–µ–º–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç ERP', () => {
  const api = new TestAPI();
  const testData = {
    product: null as TestProduct | null,
    contractor: null as TestContractor | null,
    warehouse: null as TestWarehouse | null,
    documents: [] as TestDocument[],
  };

  beforeAll(async () => {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å–∏—Å—Ç–µ–º—ã');
    apiLogger.info('Starting system integration test');
  });

  afterAll(async () => {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    // –£–¥–∞–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
    for (const doc of testData.documents) {
      if (doc.id) {
        try {
          await api.deleteDocument(doc.id);
          console.log(`‚úÖ –î–æ–∫—É–º–µ–Ω—Ç ${doc.id} —É–¥–∞–ª–µ–Ω`);
        } catch (error) {
          console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç ${doc.id}:`, error);
        }
      }
    }

    // –£–¥–∞–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
    if (testData.product?.id) {
      try {
        await api.deleteProduct(testData.product.id);
        console.log(`‚úÖ –¢–æ–≤–∞—Ä ${testData.product.id} —É–¥–∞–ª–µ–Ω`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä:`, error);
      }
    }

    if (testData.contractor?.id) {
      try {
        await api.deleteContractor(testData.contractor.id);
        console.log(`‚úÖ –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç ${testData.contractor.id} —É–¥–∞–ª–µ–Ω`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞:`, error);
      }
    }

    if (testData.warehouse?.id) {
      try {
        await api.deleteWarehouse(testData.warehouse.id);
        console.log(`‚úÖ –°–∫–ª–∞–¥ ${testData.warehouse.id} —É–¥–∞–ª–µ–Ω`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–∫–ª–∞–¥:`, error);
      }
    }

    apiLogger.info('System integration test completed');
    console.log('üéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
  });

  it('1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π', async () => {
    const timestamp = Date.now();
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä
    testData.product = await api.createProduct({
      name: `TEST-–¢–æ–≤–∞—Ä-${timestamp}`,
      sku: `TEST-SKU-${timestamp}`,
      price: '10.00'
    });
    
    expect(testData.product).toBeDefined();
    expect(testData.product.id).toBeGreaterThan(0);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä ID: ${testData.product.id}`);

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞
    testData.contractor = await api.createContractor({
      name: `TEST-–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç-${timestamp}`,
      website: `https://test-${timestamp}.com`
    });
    
    expect(testData.contractor).toBeDefined();
    expect(testData.contractor.id).toBeGreaterThan(0);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç ID: ${testData.contractor.id}`);

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫–ª–∞–¥
    testData.warehouse = await api.createWarehouse({
      name: `TEST-–°–∫–ª–∞–¥-${timestamp}`,
      address: `–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å ${timestamp}`
    });
    
    expect(testData.warehouse).toBeDefined();
    expect(testData.warehouse.id).toBeGreaterThan(0);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫–ª–∞–¥ ID: ${testData.warehouse.id}`);
  });

  it('2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞', async () => {
    if (!testData.product?.id || !testData.warehouse?.id) {
      throw new Error('–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã');
    }

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏—Ö–æ–¥–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    const receiptDoc = await api.createDocument({
      type: '–û–ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω–∏–µ',
      warehouseId: testData.warehouse.id,
      status: 'posted', // –°—Ä–∞–∑—É –ø—Ä–æ–≤–æ–¥–∏–º
      items: [{
        productId: testData.product.id,
        quantity: 100,
        price: 10.00
      }]
    });

    testData.documents.push(receiptDoc);
    
    expect(receiptDoc).toBeDefined();
    expect(receiptDoc.id).toBeGreaterThan(0);
    expect(receiptDoc.status).toBe('posted');
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–∏—Ö–æ–¥–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç ID: ${receiptDoc.id}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ = 100
    const inventory = await api.getInventory();
    const testProductInventory = inventory.find(item => item.id === testData.product.id);
    
    expect(testProductInventory).toBeDefined();
    expect(testProductInventory!.quantity).toBe(100);
    console.log(`‚úÖ –û—Å—Ç–∞—Ç–æ–∫ –ø–æ—Å–ª–µ –ø—Ä–∏—Ö–æ–¥–∞: ${testProductInventory!.quantity} (–æ–∂–∏–¥–∞–ª–æ—Å—å: 100)`);
  });

  it('3Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (FIFO)', async () => {
    if (!testData.product?.id || !testData.warehouse?.id) {
      throw new Error('–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã');
    }

    // –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Ö–æ–¥–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    const writeoffDoc = await api.createDocument({
      type: '–°–ø–∏—Å–∞–Ω–∏–µ',
      warehouseId: testData.warehouse.id,
      status: 'posted', // –°—Ä–∞–∑—É –ø—Ä–æ–≤–æ–¥–∏–º
      items: [{
        productId: testData.product.id,
        quantity: 40,
        price: 10.00
      }]
    });

    testData.documents.push(writeoffDoc);
    
    expect(writeoffDoc).toBeDefined();
    expect(writeoffDoc.id).toBeGreaterThan(0);
    expect(writeoffDoc.status).toBe('posted');
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ä–∞—Å—Ö–æ–¥–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç ID: ${writeoffDoc.id}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ = 60 (FIFO –æ—Ç—Ä–∞–±–æ—Ç–∞–ª)
    const inventory = await api.getInventory();
    const testProductInventory = inventory.find(item => item.id === testData.product.id);
    
    expect(testProductInventory).toBeDefined();
    expect(testProductInventory!.quantity).toBe(60);
    console.log(`‚úÖ –û—Å—Ç–∞—Ç–æ–∫ –ø–æ—Å–ª–µ —Ä–∞—Å—Ö–æ–¥–∞: ${testProductInventory!.quantity} (–æ–∂–∏–¥–∞–ª–æ—Å—å: 60, FIFO —Ä–∞–±–æ—Ç–∞–µ—Ç)`);
  });

  it('4Ô∏è‚É£ –°–ø–∏—Å–∞–Ω–∏–µ –≤ –º–∏–Ω—É—Å', async () => {
    if (!testData.product?.id || !testData.warehouse?.id) {
      throw new Error('–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã');
    }

    // –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Å–ø–∏—Å–∞–Ω–∏—è –±–æ–ª—å—à–µ –æ—Å—Ç–∞—Ç–∫–∞
    const minusWriteoffDoc = await api.createDocument({
      type: '–°–ø–∏—Å–∞–Ω–∏–µ',
      warehouseId: testData.warehouse.id,
      status: 'posted',
      items: [{
        productId: testData.product.id,
        quantity: 80, // –ë–æ–ª—å—à–µ —á–µ–º –æ—Å—Ç–∞—Ç–æ–∫ 60
        price: 10.00
      }]
    });

    testData.documents.push(minusWriteoffDoc);
    
    expect(minusWriteoffDoc).toBeDefined();
    expect(minusWriteoffDoc.id).toBeGreaterThan(0);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç —Å–ø–∏—Å–∞–Ω–∏—è –≤ –º–∏–Ω—É—Å ID: ${minusWriteoffDoc.id}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ = -20 (—Å–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–∑–≤–æ–ª–∏—Ç—å –º–∏–Ω—É—Å)
    const inventory = await api.getInventory();
    const testProductInventory = inventory.find(item => item.id === testData.product.id);
    
    expect(testProductInventory).toBeDefined();
    expect(testProductInventory!.quantity).toBe(-20);
    console.log(`‚úÖ –û—Å—Ç–∞—Ç–æ–∫ –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è –≤ –º–∏–Ω—É—Å: ${testProductInventory!.quantity} (–æ–∂–∏–¥–∞–ª–æ—Å—å: -20)`);
  });

  it('5Ô∏è‚É£ –û—Ç–º–µ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (—Å–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞)', async () => {
    if (testData.documents.length === 0) {
      throw new Error('–ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã');
    }

    // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –∏ –æ—Ç–º–µ–Ω—è–µ–º –µ–≥–æ (–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ draft)
    const lastDoc = testData.documents[testData.documents.length - 1];
    if (!lastDoc.id) {
      throw new Error('ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    const cancelledDoc = await api.updateDocumentStatus(lastDoc.id, 'draft');
    
    expect(cancelledDoc.status).toBe('draft');
    console.log(`‚úÖ –î–æ–∫—É–º–µ–Ω—Ç ${lastDoc.id} –æ—Ç–º–µ–Ω–µ–Ω (—Å—Ç–∞—Ç—É—Å: ${cancelledDoc.status})`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞ (–¥–æ–ª–∂–Ω–æ —Å—Ç–∞—Ç—å 60)
    const inventory = await api.getInventory();
    const testProductInventory = inventory.find(item => item.id === testData.product.id);
    
    expect(testProductInventory).toBeDefined();
    expect(testProductInventory!.quantity).toBe(60);
    console.log(`‚úÖ –û—Å—Ç–∞—Ç–æ–∫ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã: ${testProductInventory!.quantity} (–æ–∂–∏–¥–∞–ª–æ—Å—å: 60, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)`);
  });

  it('6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π', async () => {
    const startTime = Date.now();
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API inventory availability (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è)
    const availability = await api.getInventoryAvailability();
    
    const endTime = Date.now();
    const responseTime = endTime - startTime;
    
    expect(availability).toBeDefined();
    expect(Array.isArray(availability)).toBe(true);
    expect(responseTime).toBeLessThan(1000); // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—ã—Å—Ç—Ä–æ
    
    console.log(`‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∑–∞ ${responseTime}–º—Å`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞—à–µ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    const testProductAvailability = availability.find(item => item.id === testData.product.id);
    expect(testProductAvailability).toBeDefined();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    expect(testProductAvailability!.quantity).toBe(60); // –ü–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ availability –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã: –æ—Å—Ç–∞—Ç–æ–∫ ${testProductAvailability!.quantity}, –¥–æ—Å—Ç—É–ø–Ω–æ ${testProductAvailability!.available || 0}`);
  });

  it('7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ—à–∏–±–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ', async () => {
    // –≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
    // —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã:
    // 1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –º–∏–Ω—É—Ç
    // 2. –£–±–µ–¥–∏—Ç—å—Å—è –≤ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ ERROR/WARN –∑–∞–ø–∏—Å–µ–π
    // 3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–æ–≤');
    
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ
    expect(testData.product).toBeDefined();
    expect(testData.contractor).toBeDefined();
    expect(testData.warehouse).toBeDefined();
    expect(testData.documents.length).toBeGreaterThan(0);
    
    apiLogger.info('System integration test passed all checks', {
      entities_created: {
        products: 1,
        contractors: 1,
        warehouses: 1,
        documents: testData.documents.length
      }
    });
  });
});