#!/usr/bin/env python3
import re

# –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª storage.ts
with open('server/storage.ts', 'r', encoding='utf-8') as f:
    content = f.read()

# –ó–∞–º–µ–Ω–∞ console.log –Ω–∞ dbLogger
patterns = [
    # –ó–∞–º–µ–Ω—è–µ–º console.log('[DB] Starting getXXX query...');
    (r"console\.log\('\[DB\] Starting ([^']*) query[^']*'\);", r"const endOperation = dbLogger.startOperation('\1');"),
    
    # –ó–∞–º–µ–Ω—è–µ–º console.log(`[DB] getXXX completed...`);
    (r"console\.log\(`\[DB\] ([^`]*) completed in \$\{endTime - startTime\}ms[^`]*`\);", r"// Logging handled by endOperation()"),
    
    # –ó–∞–º–µ–Ω—è–µ–º console.error —Å –æ—à–∏–±–∫–∞–º–∏
    (r"console\.error\(`\[DB\] ([^`]*) failed after \$\{endTime - startTime\}ms:\`, error\);", r"dbLogger.error('Error in \1', { error: getErrorMessage(error) });"),
    (r"console\.error\('\[DB\] Error in ([^']*):',\s*error\);", r"dbLogger.error('Error in \1', { error: getErrorMessage(error) });"),
    (r"console\.error\(`\[DB\] ([^`]*) error:\`, error\);", r"dbLogger.error('Error in \1', { error: getErrorMessage(error) });"),
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∏
    (r"const startTime = Date\.now\(\);\s*", ""),
    (r"const endTime = Date\.now\(\);\s*", ""),
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–º–µ–Ω—ã –¥–ª—è FIFO –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    (r"console\.log\(`üîÑ FIFO-—Å–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ \$\{productId\}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: \$\{quantityToWriteoff\}`\);", r"inventoryLogger.info('Starting FIFO writeoff', { productId, quantity: quantityToWriteoff });"),
    (r"console\.log\(`üì¶ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏—Ö–æ–¥–æ–≤: \$\{availableStock\.length\}`\);", r"inventoryLogger.debug('Found incoming stock batches', { count: availableStock.length });"),
    (r"console\.log\(`üì§ –°–ø–∏—Å–∞–Ω–æ \$\{quantityToTakeFromThisBatch\} –∏–∑ –ø–∞—Ä—Ç–∏–∏ \$\{stockItem\.id\}, –æ—Å—Ç–∞–µ—Ç—Å—è —Å–ø–∏—Å–∞—Ç—å: \$\{remainingToWriteoff\}`\);", r"inventoryLogger.debug('Writing off from batch', { batchId: stockItem.id, quantity: quantityToTakeFromThisBatch, remaining: remainingToWriteoff });"),
    (r"console\.log\(`‚ö†Ô∏è –°–ø–∏—Å–∞–Ω–∏–µ –≤ –º–∏–Ω—É—Å: \$\{remainingToWriteoff\} –µ–¥–∏–Ω–∏—Ü`\);", r"inventoryLogger.warn('Negative inventory writeoff', { negativeQuantity: remainingToWriteoff });"),
    (r"console\.log\(`‚úÖ FIFO-—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ`\);", r"inventoryLogger.info('FIFO writeoff completed');"),
]

# –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã
for pattern, replacement in patterns:
    content = re.sub(pattern, replacement, content, flags=re.MULTILINE)

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
with open('server/storage.ts', 'w', encoding='utf-8') as f:
    f.write(content)

print("–ó–∞–º–µ–Ω—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")