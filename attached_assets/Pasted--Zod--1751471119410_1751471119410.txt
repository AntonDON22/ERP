Тема: Внедрение архитектурных правил и разделения Zod-схем для защиты от повторяющихся ошибок валидации

⸻

Цель:

Устранить повторяющуюся проблему, при которой API использует не ту схему валидации и ломается из-за несоответствия типов (например, число вместо строки). Создать устойчивую архитектуру валидации, которая чётко разделяет назначение схем и предотвращает ошибки при работе с заказами, товарами и другими сущностями.

⸻

Задачи:

⸻

1. Ввести три типа схем и разделить их по назначению

Нужно жёстко разделить все схемы, связанные с данными, на три категории:

– Входные схемы: используются для приёма данных от клиента. Они допускают числа и строки, и преобразуют их в нужный формат. Пример: orderItemInputSchema.
– Схемы для записи в базу данных: используются только для передачи данных в Drizzle ORM. Они строго принимают строки и не выполняют преобразования. Пример: insertOrderItemSchema.
– Схемы для ответа API: используются для возврата данных клиенту. Они отдают значения в читаемом виде, например, как числа. Пример: orderItemSchema.

⸻

2. Организовать структуру файлов схем по категориям

В папке shared/schemas нужно создать три вложенных папки:

– input — для входных схем
– insert — для схем, связанных с записью в базу данных
– output — для схем, связанных с отдачей данных на фронтенд

Каждая сущность (товар, заказ, элемент заказа) должна иметь соответствующую схему в каждой из этих папок, если она используется на всех трёх уровнях.

⸻

3. Обновить все API маршруты и сервисы

Все API endpoints (например, создание заказа, добавление товара и т.д.) должны использовать только входные схемы для валидации данных от клиента.

Схемы insert не должны использоваться напрямую в API. Они могут применяться только после предварительной валидации через input-схему, в слое бизнес-логики (в сервисах), для подготовки данных к сохранению в базу.

⸻

4. Добавить автоматические тесты на схемы

В тестовой директории создать тест, который проверяет:

– что insert-схемы не принимают число вместо строки
– что input-схемы корректно преобразуют число в строку
– что output-схемы возвращают ожидаемые числовые значения

Цель — защитить архитектуру от регресса и случайных ошибок.

⸻

5. Добавить документацию

В корне папки со схемами создать README файл с кратким объяснением:

– какая схема для чего предназначена
– где и в каком слое она должна использоваться
– примеры использования input → insert → output схем

⸻

Ожидаемый результат:

– Все схемы чётко разделены по назначению
– API не ломается при отправке чисел или строк
– insert-схемы больше не вызываются в контроллерах
– input-схемы содержат преобразования и очистку данных
– система валидации становится предсказуемой и устойчивой
– все тесты проходят успешно
– разработчики знают, какую схему использовать и где

⸻

После выполнения этого задания повторяющаяся проблема с несовпадением типов (например, price: число vs. строка) будет устранена архитектурно, а не вручную. Это избавит от регулярных ошибок и упростит поддержку системы.