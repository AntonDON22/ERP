/**
 * üîß –¶–ï–ù–¢–†–ê–õ–ò–ó–û–í–ê–ù–ù–´–ô –ö–õ–ò–ï–ù–¢–°–ö–ò–ô –õ–û–ì–ì–ï–†
 * 
 * –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π
 * –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ —É—Å–ª–æ–≤–Ω—ã–º –≤—ã–≤–æ–¥–æ–º –≤ dev-—Ä–µ–∂–∏–º–µ
 */

type LogLevel = 'DEBUG' | 'INFO' | 'WARN' | 'ERROR';

interface LogEntry {
  timestamp: string;
  level: LogLevel;
  module: string;
  message: string;
  data?: any;
  component?: string;
  userId?: string;
}

class ClientLogger {
  private isDev = process.env.NODE_ENV === 'development';
  private apiEndpoint = '/api/logs/client';

  /**
   * –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  private log(level: LogLevel, module: string, message: string, data?: any, component?: string) {
    const entry: LogEntry = {
      timestamp: new Date().toISOString(),
      level,
      module,
      message,
      data,
      component
    };

    // –í dev-—Ä–µ–∂–∏–º–µ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    if (this.isDev) {
      const prefix = `[${level}] ${entry.timestamp} [${module}]`;
      const fullMessage = component ? `${prefix} ${component}: ${message}` : `${prefix} ${message}`;
      
      switch (level) {
        case 'DEBUG':
          console.debug(fullMessage, data);
          break;
        case 'INFO':
          console.info(fullMessage, data);
          break;
        case 'WARN':
          console.warn(fullMessage, data);
          break;
        case 'ERROR':
          console.error(fullMessage, data);
          break;
      }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    if (level === 'ERROR') {
      this.sendToServer(entry);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (—Ç–æ–ª—å–∫–æ –¥–ª—è ERROR)
   */
  private async sendToServer(entry: LogEntry) {
    try {
      await fetch(this.apiEndpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(entry),
      });
    } catch (error) {
      // –§–æ–Ω–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ - –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º UI –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
      if (this.isDev) {
        console.warn('Failed to send log to server:', error);
      }
    }
  }

  /**
   * –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –≤ dev)
   */
  debug(module: string, message: string, data?: any, component?: string) {
    this.log('DEBUG', module, message, data, component);
  }

  /**
   * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  info(module: string, message: string, data?: any, component?: string) {
    this.log('INFO', module, message, data, component);
  }

  /**
   * –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
   */
  warn(module: string, message: string, data?: any, component?: string) {
    this.log('WARN', module, message, data, component);
  }

  /**
   * –û—à–∏–±–∫–∏ (–æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä)
   */
  error(module: string, message: string, data?: any, component?: string) {
    this.log('ERROR', module, message, data, component);
  }

  /**
   * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ç–∏–ø–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
   */
  
  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ñ–æ—Ä–º–∞–º–∏
   */
  formOperation(component: string, operation: string, data?: any) {
    this.debug('forms', `${operation} operation`, data, component);
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  blockDuplicate(component: string, submissionId: string | number, reason: string) {
    this.debug('forms', `Blocked duplicate submission #${submissionId} - ${reason}`, { submissionId, reason }, component);
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
   */
  operationSuccess(component: string, operation: string, data?: any) {
    this.info('operations', `${operation} completed successfully`, data, component);
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π
   */
  operationError(component: string, operation: string, error: any) {
    this.error('operations', `${operation} failed`, { error: error.message || error }, component);
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º
   */
  validationError(component: string, errors: any) {
    this.warn('validation', 'Form validation failed', errors, component);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton
export const clientLogger = new ClientLogger();

// –ò–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
export const logFormOperation = clientLogger.formOperation.bind(clientLogger);
export const logBlockDuplicate = clientLogger.blockDuplicate.bind(clientLogger);
export const logOperationSuccess = clientLogger.operationSuccess.bind(clientLogger);
export const logOperationError = clientLogger.operationError.bind(clientLogger);
export const logValidationError = clientLogger.validationError.bind(clientLogger);